<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blog</title>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://keijirotanabe.github.io/blog/"/>
  <updated>2017-02-17T13:05:25.287Z</updated>
  <id>https://keijirotanabe.github.io/blog/</id>
  
  <author>
    <name>田邊 慶次朗</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Googleフォトに置いてあるブログ用の画像が表示されなくなった</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/17/google-photo-not-show-170217/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/17/google-photo-not-show-170217/</id>
    <published>2017-02-17T03:27:09.000Z</published>
    <updated>2017-02-17T13:05:25.287Z</updated>
    
    <content type="html"><![CDATA[<p>ブログ用の画像をGoogleフォト</p>
<h1 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h1><p><img src="http://drive.google.com/uc?export=view&id=1dK6nMPhUOt0FNuN-aItNhM-9SH9Ip17ERA"></p>
<p><img src="http://drive.google.com/uc?export=view&id=1hhXQfcusUMsgiaeBLWdURkvHNtZHjcCuJg"></p>
<h1 id="解決策"><a href="#解決策" class="headerlink" title="解決策"></a>解決策</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&quot;http://drive.google.com/uc?export=view&amp;id=[画像ID]&quot;&gt;</div></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://www.weed.nagoya/entry/2016/06/08/191000" target="_blank" rel="external">Googleフォトの写真や動画をWebページに埋め込むには（追記あり）</a></li>
<li><a href="http://tharadaa8.blogspot.jp/2016/03/google.html" target="_blank" rel="external">Google フォトの画像をホームページに貼る方法 </a></li>
<li><a href="https://gist.github.com/mattsuDev/5ed37be6d659e05eadd1" target="_blank" rel="external">Googleドライブの画像をMarkdownの中に挿入する方法.md</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ブログ用の画像をGoogleフォト&lt;/p&gt;
&lt;h1 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://drive.google.com/uc?export=v
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Cloud9からHexoを使ってGutHub Pagesにブログを公開する手順</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/16/Cloud9%E3%81%A8HEXO%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6GutHub%20Pages%E3%81%AB%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B%E6%89%8B%E9%A0%86/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/16/Cloud9とHEXOを使ってGutHub Pagesにブログを公開する手順/</id>
    <published>2017-02-16T06:08:05.956Z</published>
    <updated>2017-02-16T06:08:05.956Z</updated>
    
    <content type="html"><![CDATA[<p>Cloud9にHexoをインストールし作成したブログをGitHub Pagesに公開するやり方をメモ</p>
<h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><ul>
<li>Clude9とGitHubの登録</li>
<li>Clude9でblogを作成</li>
<li>GitHubにリポジトリを作成</li>
<li>SSHの設定</li>
<li>GitHub Pages にデプロイする</li>
</ul>
<h2 id="clude9とgithubの登録"><a href="#Clude9とGitHubの登録" class="headerlink" title="Clude9とGitHubの登録"></a>Clude9とGitHubの登録</h2><p><a href="https://github.com/" target="_blank" rel="external">GitHub</a><br><a href="https://c9.io/" target="_blank" rel="external">Cloud9</a></p>
<h2 id="clude9でblogを作成"><a href="#Clude9でblogを作成" class="headerlink" title="Clude9でblogを作成"></a>Clude9でblogを作成</h2><h3 id="作業用プロジェクトの作成手順"><a href="#作業用プロジェクトの作成手順" class="headerlink" title="作業用プロジェクトの作成手順"></a>作業用プロジェクトの作成手順</h3><ol>
<li>create a new workspace</li>
<li>Workspace name: blog_work</li>
<li>Choose a template -&gt; Node.js</li>
<li>Create workspace</li>
</ol>
<p>blog_workという名前のプロジェクトができます。</p>
<p>初めにあるファイルはすべて削除します。</p>
<p>以下でnodeとnpmのバージョンを確認<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">~/workspace $ node -v</div><div class="line">v4.6.1</div><div class="line">~/workspace $ npm -v</div><div class="line">2.15.9</div></pre></td></tr></table></figure></p>
<h3 id="hexoのインストール"><a href="#Hexoのインストール" class="headerlink" title="Hexoのインストール"></a>Hexoのインストール</h3><p><a href="https://hexo.io/" target="_blank" rel="external">Hexo公式サイト</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">~/workspace $ npm install hexo-cli -g</div><div class="line">~/workspace $ hexo init blog</div><div class="line">~/workspace $ cd blog</div><div class="line">~/workspace/blog $ npm install</div><div class="line">~/workspace/blog $ hexo server -p 8080</div></pre></td></tr></table></figure>
<p>ターミナルから <a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a>　-&gt; Open </p>
<h3 id="sshの設定"><a href="#SSHの設定" class="headerlink" title="SSHの設定"></a>SSHの設定</h3><h5 id="clude9の場合"><a href="#Clude9の場合" class="headerlink" title="Clude9の場合"></a>Clude9の場合</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cat ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure>
<p>で公開鍵が出力されるので、コピーする</p>
<h5 id="clude9以外の場合"><a href="#Clude9以外の場合" class="headerlink" title="Clude9以外の場合"></a>Clude9以外の場合</h5><p>.sshディレクトリの作成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/workspace/blog $ mkdir ~/.ssh</div></pre></td></tr></table></figure>
<p>鍵を生成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">~/workspace/blog $ ssh-keygen -t rsa</div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter file in which to save the key (/Users/(username)/.ssh/id_rsa):</div><div class="line">Enter passphrase (empty for no passphrase):</div><div class="line">Enter same passphrase again:</div></pre></td></tr></table></figure></p>
<p>何か聞かれるので3回エンター</p>
<p>鍵の中身をクリップボードへコピー<br>xselのインストール</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/workspace/blog $ sudo apt-get install xsel</div></pre></td></tr></table></figure>
<p>クリップボードへコピーするコマンド</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">~/workspace/blog $ cat ./id_rsa.pub | xsel --clipboard --input</div><div class="line"></div><div class="line"># Mac or Windows</div><div class="line">$ pbcopy &lt; ~/.ssh/id_rsa.pub  (Mac)</div><div class="line">$ clip &lt; ~/.ssh/id_rsa.pub    (Windows)</div></pre></td></tr></table></figure>
<h3 id="公開鍵をgithubに登録"><a href="#公開鍵をGitHubに登録" class="headerlink" title="公開鍵をGitHubに登録"></a>公開鍵をGitHubに登録</h3><p><a href="https://github.com/settings/ssh" target="_blank" rel="external">公開鍵をGitHubに登録</a>で公開鍵を設定。</p>
<ol>
<li>New SSH key</li>
<li>Titlte : cloud9-ssh-rsa</li>
<li>Key : 鍵の中身をコピペ (Ctrl + V)</li>
<li>Add SSH key</li>
</ol>
<p>接続確認</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">~/workspace/blog $ ssh -T git@github.com</div><div class="line">Hi &lt;アカウント名&gt; You&apos;ve successfully authenticated, but GitHub does not provide shell access.</div></pre></td></tr></table></figure>
<p>と返れば成功</p>
<h2 id="githubにリポジトリを作成"><a href="#GitHubにリポジトリを作成" class="headerlink" title="GitHubにリポジトリを作成"></a>GitHubにリポジトリを作成</h2><h5 id="手順"><a href="#手順-1" class="headerlink" title="手順"></a>手順</h5><ol>
<li>Start a project</li>
<li>Repository name: blog</li>
<li>Create repository</li>
</ol>
<p>SSH文字列をコピー</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git@github.com:keijirotanabe/blog.git</div></pre></td></tr></table></figure>
<p>こういうやつ</p>
<h2 id="github-pages-にデプロイする"><a href="#GitHub-Pages-にデプロイする" class="headerlink" title="GitHub Pages にデプロイする"></a>GitHub Pages にデプロイする</h2><p> GitHub Pages へデプロイするには ‘hexo-deployer-git’ という Hexo のプラグインをインストールする必要があるので、</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>でインストール</p>
<h3 id="gitの設定"><a href="#gitの設定" class="headerlink" title="gitの設定"></a>gitの設定</h3><p>バージョン確認</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git --version</div><div class="line">git version 2.10.2</div></pre></td></tr></table></figure>
<p>インストールされてなければ以下で、インストール</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install git-core</div></pre></td></tr></table></figure>
<p>名前とメールアドレスの設定</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;Keijiro Tanabe&quot;</div><div class="line">$ git config --global user.email &quot;ayt7gysnyx@gmail.com&quot;</div></pre></td></tr></table></figure>
<p>設定できたか確認</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ git config -l</div><div class="line">user.name=Keijiro Tanabe</div><div class="line">user.email=ayt7gysnyx@gmail.com</div><div class="line">core.editor=nano</div><div class="line">core.whitespace=off</div><div class="line">core.excludesfile=~/.gitignore</div><div class="line">advice.statusuoption=false</div><div class="line">color.ui=true</div><div class="line">push.default=current</div></pre></td></tr></table></figure>
<h3 id="_configyml-の編集"><a href="#config-yml-の編集" class="headerlink" title="_config.yml の編集"></a>_config.yml の編集</h3><p><a href="https://hexo.io/docs/deployment.html#Git" target="_blank" rel="external">Deployment | Hexo</a>を参考に<code>_config.yml</code>ファイルを編集していく</p>
<p>url: <a href="https://[アカウント名].github.io/blog/" target="_blank" rel="external">https://[アカウント名].github.io/blog/</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">url: https://keijirotanabe.github.io/blog/</div><div class="line">root: /blog/</div><div class="line"></div><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type:　git</div><div class="line">  repo: git@github.com:keijirotanabe/blog.git　(さっきコピーしたやつ)</div><div class="line">  branch: gh-pages</div></pre></td></tr></table></figure>
<h3 id="デプロイ"><a href="#デプロイ" class="headerlink" title="デプロイ"></a>デプロイ</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/workspace/blog $ hexo deploy -g</div></pre></td></tr></table></figure>
<p><a href="https://keijirotanabe.github.io/blog/">https://keijirotanabe.github.io/blog/</a><br><a href="https://[アカウント名].github.io/blog/" target="_blank" rel="external">https://[アカウント名].github.io/blog/</a></p>
<p>といったurlにアクセス</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://am1tanaka.hatenablog.com/entry/2017/01/23/011105" target="_blank" rel="external">HexoのインストールとGitHub Pageへデプロイ</a><br><a href="http://qiita.com/shizuma/items/2b2f873a0034839e47ce" target="_blank" rel="external">gitHubでssh接続する手順~公開鍵・秘密鍵の生成から~</a></p>
<h5 id="メモ"><a href="#メモ" class="headerlink" title="メモ"></a>メモ</h5><ul>
<li>Cloud9背景黒<br>Preferences -&gt; THEMES -&gt; Classic Theme</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Cloud9にHexoをインストールし作成したブログをGitHub Pagesに公開するやり方をメモ&lt;/p&gt;
&lt;h2 id=&quot;手順&quot;&gt;&lt;a href=&quot;#手順&quot; class=&quot;headerlink&quot; title=&quot;手順&quot;&gt;&lt;/a&gt;手順&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Clude9
    
    </summary>
    
      <category term="Hexo" scheme="https://keijirotanabe.github.io/blog/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://keijirotanabe.github.io/blog/tags/Hexo/"/>
    
      <category term="Cloud9" scheme="https://keijirotanabe.github.io/blog/tags/Cloud9/"/>
    
      <category term="GutHub" scheme="https://keijirotanabe.github.io/blog/tags/GutHub/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/16/hello-world/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/16/hello-world/</id>
    <published>2017-02-16T02:26:38.644Z</published>
    <updated>2017-02-16T02:26:38.644Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="quick-start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexoのテーマicarusでサイト内検索を追加する</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/15/hexo-search-add-170216/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/15/hexo-search-add-170216/</id>
    <published>2017-02-15T19:01:51.000Z</published>
    <updated>2017-02-17T11:02:23.603Z</updated>
    
    <content type="html"><![CDATA[<p>Hexoのテーマicarusでサイト内検索を追加するのにつまづいたのでメモ</p>
<h1 id="_configymlの設定"><a href="#config-ymlの設定" class="headerlink" title="_config.ymlの設定"></a>_config.ymlの設定</h1><p>themes &gt; icarus &gt; _config.yml を編集</p>
<figure class="highlight yml"><figcaption><span>config.yml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">search:</span> </div><div class="line"><span class="attr">    insight:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>としたあと、</p>
<p><code>hexo-generator-json-content</code>をインストール</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-json-content --save</div></pre></td></tr></table></figure>
<p><img src="https://lh3.googleusercontent.com/ZV2rc5m-2TIwBUlZ_Z0roEeidLy3vXyszLqkD2qAs3xP2zOwGhTKwzEXaKi5GLMBTTxw6z_ET5W-6gSyPMp6LXaVHgpJUx789o6eO8rDz3kdeX46C6voS5qq4viisvTnZWp1qwASfg_A5e6apM_2U_EDKX50Dv9LK8O88FrapzYHLHLidk96c7UGJNH49ycmaEFlSuhRc4KeDcnFsequYe7WBxOdb1l-OJ307srMSUq17Z7obxLDtHK4KKV0sdAJoCHvPT1w7OhB5EQ54woKi5wtkgMKVBvaS2R4a_fGjHRCeWSqqCfLQwpEZOpR0t5IruAIkVdpZ8v-Ge19nXkVa71mYhzXvXAYCGzTN6D3fiwuEkVCjEfTbamIrc0YKVg17xPtfAbny9jTjRwzslydu-pdptxUKTbcuz8pBGqi5iHXZAE2APRNONYbiV0EzvPRdyRvhY0I_b1GzsPU7h_SYuIS0loPTZPNDnZ8fSSZXK3Y2WqWmb2H-RueFp7z8eBcY-YeDASd5cxFxBQz2aHCTHwkXejHaeNPpdCrhP_UoB-TmMIKT9NOX0h-ftBHULlbn8DXWTIKR4Eu47PNWOYJi7E_vdA3cqJvWrnh4GSzJyOSqrUng4EK=w942-h171-no" alt=""></p>
<p>これで、追加されるはず、、、</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s -p 8080 --draft</div></pre></td></tr></table></figure>
<p>が、サーバーを起動したらエラーが発生</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1t6sPhfi5FS_1S4RRDqETvD_xZKLTaMToMA" alt=""></p>
<h1 id="解決策"><a href="#解決策" class="headerlink" title="解決策"></a>解決策</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -S hexo-generator-json-content@1 --save</div></pre></td></tr></table></figure>
<p>とし、サーバーを起動</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=19j1bRjuvcde1neN4nhaEWZL4DhL3ZxUukg" alt=""></p>
<p>これで起動しました</p>
<p>サイト内検索もうまく追加されました</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1YH_mttOCgwKheERyWoikf4ftiKIk5NA6HA" alt=""></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://blog.yangcvo.me/2014/06/16/Blog/Hexo/hexo%E6%89%93%E5%8C%85%E6%8F%90%E7%A4%BA%E9%94%99%E8%AF%AF%EF%BC%9AERROR%20Plugin%20load%20failed:hexo-generator-json-content/" target="_blank" rel="external">hexo打包提示错误:ERROR Plugin load failed:hexo-generator-json-content</a></li>
<li><a href="https://github.com/hexojs/hexo/issues/1080" target="_blank" rel="external">Hexo插件无法运行/安装,hexo g提示ReferenceError: hexo is not defined</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexoのテーマicarusでサイト内検索を追加するのにつまづいたのでメモ&lt;/p&gt;
&lt;h1 id=&quot;_configymlの設定&quot;&gt;&lt;a href=&quot;#config-ymlの設定&quot; class=&quot;headerlink&quot; title=&quot;_config.ymlの設定&quot;&gt;&lt;/a&gt;_
    
    </summary>
    
      <category term="Hexo" scheme="https://keijirotanabe.github.io/blog/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://keijirotanabe.github.io/blog/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>HexoにDisqusでコメント機能を追加する手順</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/15/hexo-disqus-add-comment-170215/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/15/hexo-disqus-add-comment-170215/</id>
    <published>2017-02-15T13:03:55.000Z</published>
    <updated>2017-02-16T02:26:38.968Z</updated>
    
    <content type="html"><![CDATA[<p>HexoにDisqusでコメント機能を追加する手順をまとめました</p>
<h1 id="disqus-公式サイト"><a href="#Disqus-公式サイト" class="headerlink" title="Disqus 公式サイト"></a>Disqus 公式サイト</h1><p><a href="https://disqus.com/" target="_blank" rel="external">https://disqus.com/</a></p>
<h1 id="disqusに登録"><a href="#Disqusに登録" class="headerlink" title="Disqusに登録"></a>Disqusに登録</h1><p>「GET STARTED」を選択</p>
<p><img src="https://lh3.googleusercontent.com/zHO4EGkBgc9SRF_g-KiqfkWPbrLgJCPuOPeO9SE2HZ4Ra29etsFpr0p7zlMiKtQpt9A2U8S9YNVN-QOcw0UYJtiwQaV0pcDgsY-HAqCM1kAZzX63DlUZdIrL8r2qkn61W5KcMlJmh72oD347wJOV4T4RPlag7VBU_iE2fJEPOnyK7pj7iNkpIjl2uPe-yJCWOLAcDvDCcTzw6AzqnKi0fTS5u3GAwWRyjkGlCP8dMi_G6nWABGcHI1vyg7QsLWQumbWpzqSJHHF6yTyOMHryUmbM0rQcpKIk10RqBOVTWh04azJxHjLzVYmZ_YNq6nb-9F0HiR3exQ2n44WoNFa5pibakBdTE5knvqFvKOwn0Or0qlxFwwkltH0htuGnsE8R4HSjUlREnabtWgdzRLpvQeQ9BM1RcPQgtpmtpfV0AoBTAgKykIn-AnKXQBolPR_VPhKAvxOGq7HFnh84k04Iflhwq7v0ByMYjdwMeB4mZ8w9H91EWEJjhu7tRwuj9p5pIdszwatIyNlWMNVkwTpxYfb3hadVcsHigYfLMhv0fhyr4NTRCpnKz7ro53t7Ps8d9-HUv34GS0l9cs84i9JaFqrXT2zH7XOQ14TcftS7k9cDMIQTuZA2=w1352-h635-no" alt=""></p>
<p>今回はGoogleアカウントで登録します</p>
<p><img src="https://lh3.googleusercontent.com/2lF692GwOAgpBflzy4hFm_icD7UWrWybev3zsFgY7UaWWUcKPDX8VJDqepjx40JpHKwwsxJnXeu9hcDm262E_4K3ZvIUkKKZ_lXS_2ZMe_L9HBau9FHFNsv8tRXsHQgeHWBb7gqEEdkUG66Uf2Mlz9BJ9jInVXXc9ce5W775Tc5WudnEQuNEclhqQ2-Yazxuf2JEkPszyXk-SK3SMRHmEHT7Hvz77vctCZSolD_VpzzHxFm2aHTPK_qNZqYKDDTtPnmXw1OLqaoeKCHte_SwkBK-b6m9_PRARjpJ4WV4wCgQepPQ5mHyxBLx5hG0NEihlrOL5bWs3T6be8s609ezrSt6jbQPnU2QfU0f-spA-XdQgIwfHvcAmbUyoytvdN1YVIgmRa3il7gBTHsK-uTc_oT4I05NkaxcY7AfLzUPYe8qcn4OUeJJB7mPLd8hMeXvBnLLHIPGfGnSR4Rt1EGeHkug1NCLnY90oRAKzcWBU7dHNJr-ERrJgk2L3QIwJq889qTuIUAWTSrxAsqm7S_NoEFgxQdXFJM6MQOPccT7Cs7U-bYVMw8FbxOe3SLQUWDmMtSCmAIcygUTjV1b_Wk65Q-R3cTxxVDyXz0qBkDS5i4cP_J8tW87=w995-h515-no" alt=""></p>
<p>別ウィンドウが開くので入力</p>
<p><img src="https://lh3.googleusercontent.com/oBjnqL18eF3Uf9Fdt2_82ZV9XxDkuJVVTrrdHTo0pNUV2rZctZkB_TJn4GYDf-uAc1MAhaBXAM0jG2NbUElPB4ZZabVDvfAotkrPlQXHtroPMit4zFBnCSbUdpi9-bIQwBxkekNhrJAHBSa8dp5IpG0n34JI1u-6e5PfFwbVK0rMmfGwEZ8tIojKFY27m2XF-3nC72s3DsZAfIu3DvTvLPnO56quFQdcZCK-44lWqjq2jWr68nYD1v94dwfDo-MUH2GnDzkw6aM1bFmIVDnsmZv24MsLNEcZMenb5BL-g7estzmq9z_3Y4S9c1u0TA4i0JYH9RN3isOi3nvBZ-2rlVUkmv-gQKsF2fo73TBg6W_9rL1W82Nnox64LymRo0RW2zYnEPvwBf4AYSiDxV8NbOxU_Da3FnsJx74ipb2hWyAYlVG02vJRiMvWPOfJJtF36PhwJQs4teiI2-WWijkClmIgOGO3f8XX4VVQph7Ac6yd4_EDYuhKsPIdpIBeiGPTXPTnB2f41WDf9caw22xnnE9mr8cmqrd_f0fYpEvjgp2D8EghUQRmnuGZ89o4hVJgzfKZpbKSyia5xWxX5U8Ayuzg8Hbj75wMobKMVXU72aOS1hxs__yu=w650-h434-no" alt=""></p>
<p>「I want to install Disqus on my site」を選択</p>
<p><img src="https://lh3.googleusercontent.com/0xT7o1NmwR06s4P0B5ulYQBXrsEl0wHib6Amum10Gt5HO--c8Pe7En8aPZ7-sxlhDZgEjxMdJrxQlLdxy4sD2owM3T73_VTjKD0ZUYx_TQo6EgVjLmEufy79zM9J6yu1FPNCbymip4cJNykvl-VRM46DXeOQFRgwpf-5gkwx9j04CraULtBLEXNoF3siQZ6c1P3plpFWRpU9BfjWOdUBF2e6qOwhtk-Gxvb4CIbbKi6TKQoa8gkGpQsXXuRZHh8HA2HEgdytAZs9sdRDgA8iGRBPyGtJrZrahTZNfxK7aLAYR7f8ywGDRbT4Y7eP5gkZMf7IVKwYVO2JIb9jEu-fi1IAYDSVv2ZrYjcyAey4ZiiMLBMRUc5Lic48Jay5gUBz3PSyAkcMCZvh0rkWHuhUGdS1xL6Cay1Ng-0YyHq3HAlTWA_bX_nrV6s5rMrhdyijT_iH9OS76pMkcA-3aOGlnCd2YB2zabpKzfnfS6INZQxcjhri-1yCf4F59mG0TITe3pKHsyUwfLlzBCtiYwTbuxjKvfeA_V3V7aoeeACvJ3RaR-XJTzCXJGeuY6gBqR_HGmc1-efaRJNEqM-vOXZP0_gxQBfTlksWjs_ULSZm3JxDxliqbF6V=w957-h515-no" alt=""></p>
<p>3ヶ所入力後、「Create Site」を選択</p>
<p><img src="https://lh3.googleusercontent.com/FmLYxubn-RtIpOGSRBktJ-rYk5cvWW_6k4xETtcGEEBL1lI41uO8K3dJiFsE7VDZXU9dFuzbKifWyERiNkO2q18smz6CkrrdZmm7pzPpaD5oDnPUbD1LW4WXdMdY3D9dJELxT-xC_G4YoHWszWuIle_2_Paj8CEPwx_le2_vALhBEBeB7cFcu5qG2FIgQxAvifuXvtH_Poydm2dFHcd6dp6bJb6rOgoU7DlefL81ONDdUA1RBr-fyrNRW6-Iu1z5gIFnCEY4OnY1UVWNQzs9C6Tzba6KWQM8DOdmQK5wQn-PIczb8LITCKMQliXlJekNfyXBD_bE4hghK9ERzHykw6Xw_CdtXTJpVZ_I8VeYXaDfjChmrKha3xB8qRU5cf2cIZN14SmzCkQ8WhvCjNmLmmx4T0wUw7QXK6Xv5ap29caq34t7jSTVmDtWnbfK7hNIoxxNpMjHiH7sb2WrIh8P_UPZbqjv7gelNq9ZiLxKtRk-sDc30llG9vlaKiW5kkzcBddk-FvU-RjcQ2Ay-_P8EwCz7ovuI8QR_WQTLG7fRuOfNYY54wt-LgFpMWedo0Uy0DFY1_mCY8L9uypaV1om-AVb7EeLSFdExvx48Qw-eUiY0eqrJ5PQ=w671-h601-no" alt=""></p>
<p>「Got it. Let’s get started!」を選択</p>
<p><img src="https://lh3.googleusercontent.com/RswkezTYh60FGQqSszndjsH22Zfopp6nU97cbMkVXadAVX_l204BUatuBmEwcr1fgQhR0xBnbVALQyOdbJ0DSQ646Y_yN0XotR4qQuyQLNXopB7WEt-wvLh18cIJnJMlzexDkBJwkgZ94Z2lWUiAhKazDuegavmeg7-rYK-xc066ZDk3b3xEwX0CoqZAenlZ-LHq1slPS_HG5bPIl4eHpyqgMo4Rgk1Rz1pLLCg4IEBZs20pHq9wSLf9k6pi1Yv7y5Oi1Zt7g1hrjKTQSl6xIUwOXa9B7Auykra3Is32B9s_Vo_T7j40SKnJlF1-LwqqNGZN6v4mx8Mng_ktSCTRlaBHPmbk9lu4fji2MH_6tbnlj7s_ED_JGekselgl-3ZAWhS0YKwsPRRfzOW8Ss4nVwfbs9lk12Zkb9LRwR9DtD98n4uM4LLGmj39um7e2vnywgX6eKq5cxpDFV4atQvHT4-JN4SS4_0sxoRceVr2qjSsjIZeyKpSW9O8PqDndPCM5Sc_tLfDBfo2JnCztDL5-TYesqph8e7u-6I9OR6ZNmUa9nEbfuE8W-7CRGGLnfcebMzE7QSFNE1nvu_Z1Kz9hsKMGCWVzn5dpMKtPlG7n2xJ7xsF7HJC=w1393-h740-no" alt=""></p>
<p>Hexoはないので、次へ</p>
<p><img src="https://lh3.googleusercontent.com/yK_eQQOwh87lvTCIA_e_V5HF4u1Kl1PfueICLHH7xv8okknOIOWw8qLaTUbQjNxM3ds_uG0tE5Y5A3baKOHCQOS8oaiy6GRpWOhe1TAFFCySPuYrOluMeR1z6PxwodLVZuKOtZk6_ALVEjF9cLT3I8omg7kYiObm7cME0ZxgHu7ryQ_zp57_-XnLIb_sQdVQTNf3a1vThVOH3_xpoOAssu3GvNLYtRxtSgOFasuhXW-SU2F-o53fHNyD9H3SetmV6LN4ulGIs5CPqWXm9vNPp6CpKVluLk34enioLstipy3M55KsC0aI-5D5bMZBQLr9tprnmwadkn1Pz6HX90xfzfphvjll7DgyaPRmGfDKevUoiMBt4i8Pl4W0R3OdTzqYnzn0CTqwqHL1FaMvePnq-4rDr4TsVH5-FvVtKNG_W6GmtLGgzWl5OtljAkCYefcm_sG7J_7qoEJcLqHDSCXWZ_jWhSWEBqkiveIvVMuQBsabvFaBZa_jrTd-CbhPENzCDTbQsisrXJzmuZ-LGK5Q9Ncx0nOLeJABFnQlDVSV919RKHHxsnZ3yT_Lvw6nY2-tkicYevatRm5Zfcadi1Ac__i6htNVjs3czvkERpaM_vOrIEiuDaaO=w821-h221-no" alt=""></p>
<p>使用しているテンプレートにコメントがない場合はscriptを追加してください<br>※このブログで使用している<code>icarus</code>にはコメントがあるので省略します</p>
<p><img src="https://lh3.googleusercontent.com/PjsOhpZvBZP_p5p3pXeGYvPEJjcS9t7kh2KQG8py_lmkAi29V6gnsJjJXbqqaUOMADp-ZRLu-qYKzE922JgFN3XquCuAC_SPHouJCEFiUAsFCXOceBrJpbqAkYmaRhUalNjh9Tbn91PU8WtrvT73PPomly_dAibt1LT-SMPe5kFi3quhK1WTZHqfDHqDE6_PbxKbEGO6q8FZuSyGBMLOPdBEZiXO-5doOkRT4i-WOMgd0rKsIY1oIW_NdZg0vspSf28vpL5ru6Rw2oUfh8Ue3TBlz5o9CkJh6yfFu_XHvj3u8M_uF0JfNmBl2klgDMAGrIoE2vmvoQtcBvZZGDJrOomTY26gNsNS0UiM6oqd1TQT9WMg4N40GWckhKcS9IZU7s_W3p5lhHw-XkQ7knyqEpyhSh3zJPRm3_Q-pnZ8zc4fseCiMLQBNMANr0RGT82Lc9q_dgAH-VkqTmlQe67ITCithhx6t_7mRhOwuW7z77beUeeuroULqoXDuxDYHxRvjscR6hWSQwbt0M1uufJzBooTc5Dgo3GrI9JHq9T12u6h9EFNoFNoIT14NoahYP8jMmnGrVq6-3ZMhXAakdoM2gm6PcwbJlmnb-CvhajRi2hgXV81BIN2=w1313-h709-no" alt=""></p>
<p><img src="https://lh3.googleusercontent.com/I2QzAiIbanXgwNwZoeu4d2F_MLGIhpnyl4DDoFXCO8qCa5UaCX-oGVcZmzJLaNklqnZxCxZPMS5lWJrc2vA3PwV-8dfb7aR-AvrGuLes7ndxQGndsed-tO4pkuBB_OaMq_2hNDuQiTDFkwanFnjCGAAHElwDEBwx1tHjcbzlyLgNnfB5pJlAfAmmyMeXKqfiMl2I-DdtmEUaLIriygYPaOeDV7puaPE3Z9ZsEWqF2vvavDGqp0jf_CpON0titslg4g6fWwj2DIudRAunLnqaTlVHZpSZt4-hUDfLySk5jgU3w3f6yWtbn_4qMPslsiI7TOk0oHsP1xwACZt4fq28Q0i29SUHYSAPUEn30kVZnr_Xj7kaLGUHqqvUtfNtpU3QvGPh4CPoANKBEHmVsRPxI673vcUYrcGSuF5tVUVDTwrqG1fyW0WkhU8kLjvBfv-1pa9OIhD_jpn6NSQVU0VFJQ5fQuSPHuboEFgnYCKIBrTZthZ7N-Fqhlvo7mRbgrqqao6-43BfbScXE1cwhQ459pJfv1exQoFf6bc-hjuDdO49-eaPoy_RTBvLPl1X0ONoFiKqVKjfbo-l-XSyxiP770iXdgvh0FzWoB8T9tJaZNSazeSWXMBk=w1124-h741-no" alt=""></p>
<p>サイトのURLを入力し、「Complete Setup」を選択</p>
<p><img src="https://lh3.googleusercontent.com/PIaMW5ELRCIyGk_-evyFy21qA9YNaIoRFjEtno5K6ENukkgxlU3PDJvKRhweF1oCVJbrTR9PNBKAiWiRHbmAhehfZ5NzFett9EVvkOWSHhTddgEVj2UEd61rHiRAFGLU41We2vWRu1j-2DiXdJPIqEyDVlxIrNkItfmb7OVASsAVxfwiCBT3u7brzfk2niv213PFmJthjJifnE-VO3jivlG8MVvxG_2XkLTnFRJOUQ8fjUYpGs1yxMPfopQDIS7BMskTsaDf8edUJKuzWjwv3ytUxXoaeApYBWZBsMFpr7B19lJ27E1uQVgJHmFOzQbVJErEWHj3s0AWrKv9zujTnCjEQKZCCVEggZNLGRZ5u0DMefUL7ujIcM4AqK6gWfqdybXvCIsZsJK4A4sBJaImXs9YfFo-6Z-ZsQ9jH_s63x-u4WDZpqNUJhCubuQdwpESFCSxDO6JhZtgrcgvuUrWxp8sjEU7GTTC_eeOUrJg9UWual4UrSKClb1xcoS1gH2v9GFKUvsGKzKrTUBdKFuw4Ch7TQc7siZhZ7Xk7yO8Ue55b6wAqIUdbscLFM0H0ddruMrKLZ2PZ5i2c6OBeMmVfe7t5Tsxfwccr_qfv_T9a3GnpjfKBa8k=w933-h630-no" alt=""></p>
<p>Admin &gt; Settings &gt; blog &gt; General<br>「shortname」をコピー</p>
<p><img src="https://lh3.googleusercontent.com/EbVFOIIcBeOk1Uquz7qJBbqdlxOVBRT0APXM_k4XTHM76uXwKBlznKMVJ9QFp-OsUJkersijcacRVgMDbzAS8SFy-71E7MxlQFOiNp7F2UjPf8LjBfZOKxnERnoeUDhfi7kBCeQhELnkOtBjXY64eMJD3ER0pKRLoxQCu7fd4lmMD0qZTCe0MSlR27sJDdnEH59lV_VdOfbgMqU5jazx-caj8kDIO17KOmEPsLmkJn3JaU52NZHkQRLX04x7K6lcYx8SOH9UnU7zWkaV_xPWBhUvj98reV_YP2bfmgQHdTAvyG8o-GCcY7Gfr4PJVpHNYlSLLPQO_xWnyTBH3pdKpI4UP6pQ-3dVYxw9rN6mu742xGHUcV74yRySQVYaCifEQdjLy1Qw-KDkYuIfTLInKAAopXjFHNr2Mbgl1R_1sLAch_FUtIcSIawI4lctEjH3_BrqzfrGqwqPZISmfU7kz_A8VBNv10r9i3mTGsMalncCxp3QOY2iNsEc3_2QUxrvd3B0SCEW1eRtbtIiIvhgknMYNqJKSukWFeMclUOPJBVJCzU4fY0TegWHGA9xFQVeJIpBPmWMvbsgg1vLxJ2YYm-pmZ4j4Dsx7gPLbceesqIW_qYyqQ0N=w1218-h481-no" alt=""></p>
<p>shortnameを_config.ymlに記述<br><code>themes &gt; icarus &gt; _config.yml</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">comment:</div><div class="line">    disqus: [shortname]</div><div class="line">    duoshuo: [shortname]</div></pre></td></tr></table></figure>
<h1 id="関係のないコメントを消す"><a href="#関係のないコメントを消す" class="headerlink" title="関係のないコメントを消す"></a>関係のないコメントを消す</h1><p><img src="https://lh3.googleusercontent.com/AWTO6iKJwU5s0tAHc2gz8pOxxISjZlxgMmg5QKaMbOGIitzYAPKbrvrUesZDxi4E00FYOBlpw0RHdJ-LEtdVOaNqefVZ3La28r6XQ_taGOT-uJo5jS26CMCI46ROHHFxeNFazfXDMwUI7KoXfjMa6r39fT5n4ERUOQJOYZarguppJt3LPQcCdettj2RjY1ZlSxuLBS9drFYoJo5Ww3lLvUPvlJVUKpAec64bOVd5EdgNrTuOCuUrVNFVcH4wOJEf-6LcMtZQBtbixkCS_lhXcOgjrnUvHChvqJUMCxcVSboM1R0QbAB3K8l0cbzmeeldpLHK4E_yVCnqulinDII4RdFQ8g0bB2QR0-g2e2TLa87ufzirxZOmsYiqPvGzxZwCjmy-V3Mlu70u2C6W8UxQ1yM7E3TLqpdFrUIhNHDpZX8qheqVk6u5U5boQ5mLVS3AHK5-MM4i02diZUuhwfkgA0OeJBeXDjz70XNUBmAgWURfYKmC6ognnvP3rMgiNKVk_w63-2CdP2U378b2uFe9yCzGEFc1b4qFtbrPbqEP9LsWtXCfqe1kbNe6qhaPjmkuudOmtPXZ96BmJdi-2D5zNcBHOKVwMLO9mhLqj-AaFsi73-yISiys=w1303-h738-no" alt=""></p>
<p>Admin &gt; Settings &gt; blog &gt; General<br>Discoveryのチェックを外す</p>
<p><img src="https://lh3.googleusercontent.com/HY_hEHU8m3Scutdi3ibgjmMmpDPNAQQsAcamGPy4eNwHdDmBZT6mGJRrNtj8lzvg6v0uT-2ZqSzwMurNZ2nEutjFmYrsfbtrlhQDpJIyggm53l8OKNdiDSv2ES2EQRef7K4w92D3OgztBopjHiYku-pdbj3xqXQO9rftGvXv1IoCBijU2vxQXwtkl1uu6UlBHz0KEpojpOrkrLYZNAuThyvuPoQooXvPtzAx5ooZ4woPhNvh9ckuJWUdS8LpsAxh-iHMfmCTTuYOZI_NWq-1Th929Wn-LCwvGAjgqZHayPjpJUjAr-G-WFfWjK2am0utaSUT7ZbCqor9S1wrf-YofEGBBpL0HEziA22ROWtqwu-FsPDxeaNdXmHLHW_GMA0mNLGPoufb9huxwSZdg1jHIE89IZCLGGkQYlFhc4nzedGnmTgQWZT2VknGlFBO4SWeiGw-smKNfsrrih1HJgJCKRAI3-F0Uq3zXl4PhZmqimVbpps9kHb87UjE1Mb0yL_A0XDa_2UG8haaarSET9X2tyUoOn92G3VZ2TIkFWDugZitYl0UzADbXTFInfCR_6UJTdyBwKVMKBhhRpTk2RjY2rDiwWMj-8soFP1Rrfmu7Lfpb_8v_Klj=w1218-h684-no" alt=""></p>
<p><img src="https://lh3.googleusercontent.com/uNfLNZqKUyZyX9qw6xViu9h_KRp63uSl-bpmdZfMvW0ey0gNgfRoX9-KgfvPhl-GpGjPaC0rHLBa2VvJ4qFq_k3G-gadIKIDfGJ3YhsZs-EViTlc3kDTLKkqnfVRA4NC1FGmGX7lcL4mIAoZ1IRwkHYiQiMz_1ynC3j4H7Ho4E1ZYofERzt1TU50G5gYu6ZhxNfT0b938ik_2RKXjEx4TIGriDOEwWBriCMi2pZBDMsRwrE6YiMhF5vHCl6NgUYLfWvfJ35VVdv58FxKq5HwqaTxVZOMRmgEwgr1_G5kZy3HlyFt0VcNhDR_QFwy8FAmqNj7C-Tjnn40GcSgiObHHX7dd9ENfxsaRSLAMRiWyopgJpFIO7dVoFMBZpQX2kcn96XQ-GrgEMkh3Lmxjh8m0WD282QGHhRd1cOUWpAv94ugeKZEncJFY4rTWEmDrLqqJ29KhYfUSZarWtCJ8Oyv0cbHc32SkUS5tC5d1gu7CcfaZ9iE8FkdVFxcbLkXSNwXnFxHoIh2ymMoRDglEZ4raQSasw4eN6SQBeGkRurv-UApqT0wTZM3eSlbnyqJSkGGWQsg9Hz37hl3D3oinkPz6TWbsPVnHOgwsdbSjj1f9csNRGRZZZ0r=w923-h136-no" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HexoにDisqusでコメント機能を追加する手順をまとめました&lt;/p&gt;
&lt;h1 id=&quot;disqus-公式サイト&quot;&gt;&lt;a href=&quot;#Disqus-公式サイト&quot; class=&quot;headerlink&quot; title=&quot;Disqus 公式サイト&quot;&gt;&lt;/a&gt;Disqus 公式サ
    
    </summary>
    
      <category term="Hexo" scheme="https://keijirotanabe.github.io/blog/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://keijirotanabe.github.io/blog/tags/Hexo/"/>
    
      <category term="Disqus" scheme="https://keijirotanabe.github.io/blog/tags/Disqus/"/>
    
  </entry>
  
  <entry>
    <title>HEXOで目次を自動で作成してくれるhexo-tocをインストール</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/14/hexo-toc-install-170215/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/14/hexo-toc-install-170215/</id>
    <published>2017-02-14T18:59:49.000Z</published>
    <updated>2017-02-16T02:26:38.876Z</updated>
    
    <content type="html"><![CDATA[<p>Hexoで目次を自動で作成してくれる<code>hexo-toc</code>を使うための手順をまとめました</p>
<p><img src="https://lh3.googleusercontent.com/jjzli739j5Eay0zHdvnF4lVN1U88a4SY0Z4-D-ZRgsO_yJhCU_aq4MMx19XltmF8yGFTS3SkGU1cojoGmMHIMTT64EiIkSsscYEWKzPKhDwl3qQl0YQjQm_UpJPl1wODz5eXcmX-HTg288YcDvdCrkP8SOJEvnpILZ6NJ94S4QIOBZUztF-ebhXx7pBjDPD9MeMuGr1rAr1Cc_s8QMKG26NP5R5V3CKDAgPBZbECVITcN_aICJoAOSmbcj4jj_iLRP7lrF5B4mHHrqs_NyvLvB-VkbOKG0W6zaVpyFUzvCqqGx6m3tLB_uYAdJdRZFpGDF1AvHrE4ekccw1rboFL5mo04eGL_orfQ9CIZghfaxPyw2ipVC9r-W0YVfRn9NQMvtmMscSXSoOGR8F9pxVpBiaRbxcXlVrwbk-QhqVATItn3K3Xll7X1B-jgF8kQJLwHXMQfw_Gx5lnvv6KN0tItCe09nDoUGlzI15nTzzxx_RnxzxJv318E6WM_kqQC8QY1wGj-FTx41e-kXs1cYxvtGld8bO-apoHYVTme7YGF5gozOJHphBul8os7r7E9TzyJOv3SSIwrV_vBrozRkiXKnHU4bsdF_jsZdEkUCHvyA0dQT9jq-Mw=w749-h432-no" style="width: 320px; height: 200px;"></p>
<h1 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h1><!-- toc -->
<ul>
<li><a href="#ブルーの目次">ブルーの目次</a><ul>
<li><a href="#オプションの説明">オプションの説明</a></li>
<li><a href="#記事から呼び出す">記事から呼び出す</a></li>
</ul>
</li>
<li><a href="#オレンジの目次">オレンジの目次</a><ul>
<li><a href="#記事から呼び出す-1">記事から呼び出す</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->
<h1 id="ブルーの目次"><a href="#ブルーの目次" class="headerlink" title="ブルーの目次"></a>ブルーの目次</h1><p>hexo-toc GitHubページ<br><a href="https://github.com/bubkoo/hexo-toc" target="_blank" rel="external">https://github.com/bubkoo/hexo-toc</a></p>
<p>インストールコマンド<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-toc --save</div></pre></td></tr></table></figure></p>
<p><code>themes/icarus/_config.yml</code>に以下を追加</p>
<p><code>icarus</code>は使用しているテンプレート名です</p>
<figure class="highlight yml"><figcaption><span>config.yml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attr">toc:</span></div><div class="line"><span class="attr">  maxdepth:</span> <span class="number">3</span></div><div class="line"><span class="attr">  class:</span> toc</div><div class="line"><span class="attr">  slugify:</span> transliteration</div><div class="line"><span class="attr">  anchor:</span></div><div class="line"><span class="attr">    position:</span> after</div><div class="line"><span class="attr">    symbol:</span> <span class="string">'#'</span></div><div class="line"><span class="attr">    style:</span> header-anchor</div></pre></td></tr></table></figure>
<h2 id="オプションの説明"><a href="#オプションの説明" class="headerlink" title="オプションの説明"></a>オプションの説明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">maxdepth ：最大深度以下の見出しを使用します。</div><div class="line">class ：tocのCSSクラス。 （ デフォルトはfalse ）</div><div class="line">slugify ：使用したい機能を選択します。 現在、 uslug （ デフォルト ）と音訳をサポートしています。</div><div class="line">anchor ：各見出しにアンカーを付けるかどうか。 （ デフォルトはfalse ）</div><div class="line"></div><div class="line">    position ：アンカーは、タイトルのbefore 、タイトルのafter 、またはタイトルのafter before置く必要があります。 （ デフォルトはafter ）。</div><div class="line">    symbol ：あなたがアンカーにしたいシンボル。 （ デフォルトは# ）。</div><div class="line">    style ：アンカーのCSSクラスです（ デフォルトはheader-anchor ）。</div></pre></td></tr></table></figure>
<h2 id="記事から呼び出す"><a href="#記事から呼び出す" class="headerlink" title="記事から呼び出す"></a>記事から呼び出す</h2><p>呼び出したい箇所で以下を追加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 目次</div><div class="line">&lt;!-- toc --&gt;</div></pre></td></tr></table></figure>
<h1 id="オレンジの目次"><a href="#オレンジの目次" class="headerlink" title="オレンジの目次"></a>オレンジの目次</h1><p><code>article.styl</code>の末尾に以下を追加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">// toc-style</div><div class="line">.toc-article &#123;</div><div class="line">    background: #eee;</div><div class="line">    margin: 0 0 0 .5em;</div><div class="line">    padding: 1em</div><div class="line">&#125;</div><div class="line">.toc-article strong &#123;</div><div class="line">    padding: .3em 0</div><div class="line">&#125;</div><div class="line"></div><div class="line">#toc &#123;</div><div class="line">    line-height: 1.6em;</div><div class="line">    font-size: .8em;</div><div class="line">    float: right</div><div class="line">    margin-top: 30px;</div><div class="line">&#125;</div><div class="line">#toc .toc &#123;</div><div class="line">    padding: 0</div><div class="line">&#125;</div><div class="line">#toc .toc li &#123;</div><div class="line">    list-style-type: none</div><div class="line">&#125;</div><div class="line">#toc ol &#123;</div><div class="line">    margin-left: 0</div><div class="line">&#125;</div><div class="line">#toc .toc-child &#123;</div><div class="line">    padding-left: 1.5em</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="記事から呼び出す"><a href="#記事から呼び出す-1" class="headerlink" title="記事から呼び出す"></a>記事から呼び出す</h2><p>呼び出したい記事で以下を追加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">toc: true</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexoで目次を自動で作成してくれる&lt;code&gt;hexo-toc&lt;/code&gt;を使うための手順をまとめました&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/jjzli739j5Eay0zHdvnF4lVN1U88a4S
    
    </summary>
    
      <category term="Hexo" scheme="https://keijirotanabe.github.io/blog/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://keijirotanabe.github.io/blog/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>有機ＥＬキャラクタディスプレイモジュールをESP8266(ESP-WROOM-02)で使う</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/14/esp8266-oled-how-to-use-170214/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/14/esp8266-oled-how-to-use-170214/</id>
    <published>2017-02-14T02:20:26.000Z</published>
    <updated>2017-02-16T02:26:38.288Z</updated>
    
    <content type="html"><![CDATA[<p>有機ＥＬキャラクタディスプレイモジュールをESP8266(ESP-WROOM-02)でmikroCのLcd Library風に使う</p>
<p>これみたいに使う<br>mikroC PRO for PIC &gt; Lcd Library<br>→ <a href="https://download.mikroe.com/documents/compilers/mikroc/pic/help/lcd_library.htm" target="_blank" rel="external">https://download.mikroe.com/documents/compilers/mikroc/pic/help/lcd_library.htm</a></p>
<h1 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h1><!-- toc -->
<ul>
<li><a href="#使うもの">使うもの</a></li>
<li><a href="#配線">配線</a></li>
<li><a href="#自作ライブラリをインポート">自作ライブラリをインポート</a></li>
<li><a href="#使い方">使い方</a><ul>
<li><a href="#自作ライブラリのインクルード">自作ライブラリのインクルード</a></li>
<li><a href="#関数一覧">関数一覧</a></li>
<li><a href="#oled_cmd関数のコマンド一覧">Oled_Cmd関数のコマンド一覧</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->
<h1 id="使うもの"><a href="#使うもの" class="headerlink" title="使うもの"></a>使うもの</h1><ul>
<li><p>有機ＥＬキャラクタディスプレイモジュール　１６ｘ２行　白色<br>  → <a href="http://akizukidenshi.com/catalog/g/gP-08277/" target="_blank" rel="external">http://akizukidenshi.com/catalog/g/gP-08277/</a></p>
<p>  １６文字×２行の有機ＥＬ（ＯＬＥＤ）ディスプレイです。<br>  マイコン等で制御することで内部に登録済みの任意の文字を表示させることが出来ます。<br>  液晶と違い、文字が光りますので暗い場所での視認性が良好です。また視野角が広いです。<br>  特長<br>  ・コントラストが高く視認性に優れます。<br>  ・視野角が広いです。<br>  ・３．３Ｖ単一電源動作です。<br>  ・Ｉ２Ｃインタフェースです。<br>  仕様<br>  ・電源：２．４Ｖ～３．６Ｖ（標準　３．３Ｖ）<br>  ・消費電流：最大８０ｍＡ（標準　５０ｍＡ）<br>  ・表示色：白色<br>  ・表示部：１６文字ｘ２行<br>  ・１文字（キャラクタ）のドット構成：縦７ドット×横５ドット<br>  ・明るさ：最小１２０ｃｄ／ｍ２（標準　１５０ｃｄ／ｍ２）<br>  ・コントローラ：ＵＳ２０６６または互換品<br>  ・寸法：８０．０ｘ３６．０ｘ８．５ｍｍ</p>
</li>
<li><p>自作したライブラリ<br>  → <a href="https://github.com/keijirotanabe/Arduino-Oled-like-mikroC" target="_blank" rel="external">https://github.com/keijirotanabe/Arduino-Oled-like-mikroC</a></p>
</li>
<li><p>ESP8266(ESP-WROOM-02)<br>  → <a href="http://amzn.to/2lEjWZf" target="_blank" rel="external">ESPr Developer(ESP-WROOM-02開発ボード)</a></p>
</li>
</ul>
<h1 id="配線"><a href="#配線" class="headerlink" title="配線"></a>配線</h1><p>有機ＥＬキャラクタディスプレイモジュール１６ｘ２行のピン配列</p>
<table>
<thead>
<tr>
<th>OLED(pin番号)</th>
<th>ESP8266</th>
<th>説明</th>
</tr>
</thead>
<tbody>
<tr>
<td>VSS(1)</td>
<td>GND</td>
<td>電源グランド</td>
</tr>
<tr>
<td>VDD(2)</td>
<td>3.3V</td>
<td>電源＋</td>
</tr>
<tr>
<td>/CS(3)</td>
<td>GND</td>
<td>必ずVSSに接続</td>
</tr>
<tr>
<td>SA0(4)</td>
<td>GND</td>
<td>スレーブアドレス L→0x3C or H→0x3D</td>
</tr>
<tr>
<td>SCL(7)</td>
<td>IO5</td>
<td>I2C クロック, 4.7kΩでプルアップ</td>
</tr>
<tr>
<td>SDA in(8)</td>
<td>IO4</td>
<td>I2C データ入力, 4.7kΩでプルアップ</td>
</tr>
<tr>
<td>SDA out(9)</td>
<td>IO4</td>
<td>I2C データ出力, 4.7kΩでプルアップ</td>
</tr>
</tbody>
</table>
<p><img src="https://lh3.googleusercontent.com/nG2-P11VWG4gYaiutwu9b4ELc8kFDEnPgXdcfOX3QP5yZOPB2Gg6VMnepZ-DC7qDMtAQw1LPZf-yk9T5o6Giae-OvMW2DqwG-kYUMBfGVc96CB0zvH5XW3e4Hx7Lgjwgv5cs0uarcka6erPv6xnX1lfFFYJrhy1fQ1XZnzmlOwwt9ksbPH8XtUTpA21Xl-pflTrBMvto3u_VEDRYKM2SFL30CCAE7yXPduW-MSv7XQB-IXh97Hbbc62Qberj9IKGg7WGxeIct6OxBW8X7j40TWHtGx1gXWfCPQJWpZzRV_ThwprJLDEGh_I8MWa2iakXjDlLnA-wbiDWNerLpxdTB4DdXtq8UMzREFsLHAZdV3zyiUpBo4VwStzoEa_Ez-LZ53de9_rfzO_ydgugy9lpwrv_XJDcCU6aWz1HDmQTLVW65rM3PCE_xU3O_aDettOuPYZaF2qsXNt5E6IpiAOao2rkPutno8YeZal4KCSHlDvAJmiepsd2GvKWRjCNBB9U34_b8gapptZjkcOS_9ultIBefU_RMygrD5nZiZc1YxD4YctEQGla2o4Suw_nYAufCN_D6OJxXzCn6-0TdqMgXWMPAYF9rfadWqNmFeEw2djRTTa0XaE5=w1095-h602-no" alt=""></p>
<h1 id="自作ライブラリをインポート"><a href="#自作ライブラリをインポート" class="headerlink" title="自作ライブラリをインポート"></a>自作ライブラリをインポート</h1><p>ダウンロード<br><a href="https://github.com/keijirotanabe/Arduino-Oled-like-mikroC" target="_blank" rel="external">https://github.com/keijirotanabe/Arduino-Oled-like-mikroC</a></p>
<p><img src="https://lh3.googleusercontent.com/zpw7ih1IadYXhl48-iN3BfvaIsJsoRi9HezNIh75qd8W5OaBZaKkDP_sAHiQHVwUh11NeZ16algMNx7mInk1syflmI58Uh7b5brcJSmODWLJADo7kdUpEkC6RURcEwePpmbR8UYjtyS3B2tSY0-PJVyp3zAbGS-07rVtBxvvKTNI2StEtxxE0-2Mhit_62tXFc73skGw1Pa64e7Q-ATYj_nAwA-a7FkuQIKCWUhzKB2WFmI5Z3j0rSolcsI2RLy1p9_eXIvS2XXLEHx0JVMry5MiZUgBMJJgBlwWady5o1NMDHauBDDNxv7oQkHKjqfCpcrzcKlETQ-DMYf69FexTzQxmqfjl_ttZo1rq-NHE-7k26Yti--ogul55fKs7PfglyD74avw_mhmAzofu0KyzTrWNpaT7WoCnDY18SOymug-U8av_Q1eR4G-aFdJroYp89GON9ZjtqvUS6JSqwQXMv8Oqe4HiRHBfI1LZ6bUMcw3lSAw7FC0iJanDauoF7anbQz_w-KNGKSac2JX7-eI4WgGvNntyvxeka6Hho2Y993SRrWehbJvP7zGbmbJmv0cHB3WJQ0RWlXcrbyeLeh4_OpfsxKmflNaFsi8XspBdIcDr2AldVNH=w1095-h700-no" alt=""></p>
<p><img src="https://lh3.googleusercontent.com/LVV3PJFOzTftMo8Q_pzkcNtcgHMdy5DVQabB4017f0x_qfqmucAYMl10xFKDnSjGGTPdTXdaU_cZhjOX1f9XcuA3PQhtv7dwGk0FTKtnb09Oimerqz2mWxAN8RiJYPDOz8NHh6TzTX8qlyvISI16xz29YrHYmEVlV6z-vvjDku1eezE9rX225jWnCgEqdP3MVcik52lZphrNK4t797EfDQD8yCWaWwcag9sga_W7_lKXuZQFQwJOXpyqpvVA7-uWpIiV34rTqr4HM5FvynE3VAkcCorpkQQMh_1TF8C-7klXsef-X3NCn_eMfxStdYxFcmcNa9UWLaQYAV8FPynPgroxjT0I9TRg4v7Fv8aOUZPojuPzUfYSYHziyz5Qip8TG7c7cW5ND6m7di9btnF47c91CNYhP4GpmQQfGGDT0UEzZaosA0UCywsUQZ7QowsGtb6BS92gGhNI1cwQJkS4MokzE0CII5pejCo3KAMyQ73dUTJehs4DbZeVc8un89KgrGlnUXD4W1d2xSg5yfZc6Fq7o3MMeoAckuVMGdDFwWX5lJd-CfmzkpXNpsLjU2i-GKHK4FmGjqeCpap_AlTpEIb6mL-leCROqKFO-p_zuDYflEjaH3UA=w676-h296-no" alt=""></p>
<p><img src="https://lh3.googleusercontent.com/OgRsWFFxUanTz734raRjBjB_WVYlpDrOt7Zf1ZkKjwaL77cto7AXktdcNAZNoi-4MAGF31nG5fIs5XOsdz2PvZaEt0uZPyLDnekLLqiqZrCK7aXeMl8M2mxem2K49ZUqwKZckb0IeSnwOcEdEkwBW9dQOoCtlyDDk5ClwpknuCHhjVZLgOFe4X9p69kt5EcgurZTZ_UCFVHJeAV0ZmgmsGPyb-KFXEkl1Z5dyd9Eamo9Ofh_08tSSiJgEeDsWDWJudEdG41V0vAbpnCoCSjZ3EunqrRrTpQ4I4X68JK0IgtpiuoDLjXgMp9Oeud97yZ5ivqyPUwRiMN7__jdOkyv8VeOpb5ykszj-ps-U70KD6ZVDfAryQBJdoiJji2jhNmPAjnAhUBOLEIxyfsTNTyyNd6aRRy9zhjHjeBiVsvcZKQa6rjshmQreKgBanvuGHt3cdQYAL6OIVoj8aZrvMhfV8bhF6o9WpthzxI7cGPRhOdt7PLSzfPYPYrkfSphttWsU2LFIxFflbXEYJLP_5zuIGvCty5MgFuvBz9JhwpNMtwdLtaalAcWi_-hhx5KOAK3EaMebr2iW7QgsNDu4aOWC-FibYvqfS49c3JKNMrOcIut3lV43JFR=w680-h547-no" alt=""></p>
<h1 id="使い方"><a href="#使い方" class="headerlink" title="使い方"></a>使い方</h1><h2 id="自作ライブラリのインクルード"><a href="#自作ライブラリのインクルード" class="headerlink" title="自作ライブラリのインクルード"></a>自作ライブラリのインクルード</h2><p><img src="https://lh3.googleusercontent.com/-0MpE1Z0A2wBD2ArVCwe0UMJkPS2T3up0TMl_1jM4RghDslX3gF5F5AV4j6XoKx9krhbWQbdUtzq4hl9BgwyG9nOQ4PEkOmPDV74G_ftkzrMyT5F5U_8C-EbxBosuaz6JiT2vv43PtvoF90YQpz1y2LW0mKmyJR07Xsv6W3-X-Yb4sBC5mRnJ154MECY-SWuxF0F-sn818cCN6m6e28ebffeReFP3Yfa5u8iG2UnN9PY6tc0yEklSxOIFQt6RrFfdC5KCLTRUjT0RY9kghJLEPbEApazFSzpRUtL7ELDQGOXvkpZsbmxdzxk6WxcOHIIio6Ys0WP_hAnKyqLgGI7TES6q6cbWOB_H5E2GC7p0es8EvsjOeUlz2BTua5O4hnkZK0Iaw-LgYyTEq7rSvDPV4a8ShI5lwEijSLB-_IEWx_4igqmGhomezy9Pza9LrstEYg2Be_Mj8TZDHnMT6GXFgZf_B30AxI8tBHmnG9Gsohr2UHEVbZEOpIMFky3j7JmpiplFeZtJuGqrl-x3Qlt7j_gTc-afxQNgS23j0Tn736KIY86DvdUYDiCUY1_px8au2XevnVwdyPwA1a_cnNlSputsTCfaZT_EA6MeZkK5oWYuzP5Wq92=w681-h334-no" alt=""></p>
<p><img src="https://lh3.googleusercontent.com/DNJIQS27seTf9ohNdSqX3-Vbm4vYSa19hYY4BeiKGx8FU6n5kpuq6foDqsmhjERtm0eKq6RaF-G8AtDoutVjosKS5E74wxCXgTAEuzliK4mlmw956ue4JWMPKtbk3X14pp3TfBMrtwzynY1zK_tf0PWscnzfOMUpJgekin27FmyCtVbvJmsnDxUnJao1x09i61-b6zrmLjq78oRGEiYVZeibloOx5OXWz7GPgDiEJ04RvghN3EKggU8iH63RvYmVKODVp5bKVGh1Jwf89Ot5hNtbDVowkCWgArEr3DPC_XWGkgb20hDylmTq5fqt991UCrGvpzS_llTcDiHmUtVqaP24q5yQYfkrP5eoIFIIIt1QlEblaDNGvscHprhM9LwrmeTxpFcGzEp9Mo2dlsgn_3JLKQ2D6p8t9S_BFmUM9zVL58jPWJa-xC4fd1X_01DDE6dJwBMTqgwBFsaVxjCn1oZiGoPY6hQ4kI2WIo3qoRPRj5PJjVsrmQKNjFVCWkdFAbO_Z9gOGcnGISsQPPrfSq-p6bLobqEKZcq0Z3TvSUkvv1eLEMqZjABCMZweEMlsRzsCD_VJICoYR6l-LEwaErCl-irUgVIx09c4EEDF2RFgni_LEnqJ=w680-h435-no" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#include &lt;Wire.h&gt;</div><div class="line">#include &lt;Arduino-Oled-like-mikroC.h&gt;</div></pre></td></tr></table></figure>
<p>直接、記述してもかまいません</p>
<p><img src="https://lh3.googleusercontent.com/A9D8HFByFV6Pym0vuQdHITWqYj9-XeF7TD52FVki5LEN3VWVvgWPrTiCDnOL9KqYkeIq3E5dOt2nlFyUp3qnK_FFDdn7Mk69LxOA8KtNDvEoct5CDmXzqDTY6e2sueb9Ep3coC_NoD_sC9cnkeLka0ueAYKqFD-r9_BuimcBDnNHvuwLMgaITgkYOjBRAY8qPItmbvYUfTKPm41KOYAVWyZ9STkywobaa9agR-4e_jG6wZZfQikK1Me4y7v7Zowolo1uGyP-b5tm1t3VCY3y5xrxekwkaTnch8LcagoGc6Nf52e6AdrAzyTmQ-1T8K2GaN444bjWuszokl8tPE6z4U8HB7FqoZ0USKBJb2pcJBl7cgpVjI5J745eZm1Anlg-udproeLRI5JWbVUAu318MYiIvka5oVTjjR8uvse_SHE-yY5A-D2o5EwAZuv_P0zsst1fO1Q0xQbfC1i0hiNi3wZNWa8HBRyoOji3la0oOKkATkHnJHM1flDPYbpjSDrGxB6JguS7TqJvgHVAZ8l8PxeUvUcxWoT0fqgfMdfFDGRfPmmIFcglpEDCqdobdEd8M7EqVaff3nJ-PC2XJTADRz8M41IbQTadfesNcJmxTMGrtcFpUnE7=w679-h333-no" alt=""></p>
<h2 id="関数一覧"><a href="#関数一覧" class="headerlink" title="関数一覧"></a>関数一覧</h2><table>
<thead>
<tr>
<th>コマンド</th>
<th>目的</th>
<th>サンプルコード</th>
</tr>
</thead>
<tbody>
<tr>
<td>Oled_Init</td>
<td>初期化</td>
<td>Oled_Init()</td>
</tr>
<tr>
<td>Oled_Cmd</td>
<td>コマンド書き込み(↓の表を引数にとる)</td>
<td>Oled_Cmd(ClearDisplay)</td>
</tr>
<tr>
<td>Oled_Out</td>
<td>位置を指定して、文字列を表示</td>
<td>Oled_Out(1, 1, “Hello World!”)</td>
</tr>
<tr>
<td>Oled_Out_Cp</td>
<td>カーソルのある位置に文字列を表示</td>
<td>Oled_Out_Cp(“Hello World!”)</td>
</tr>
<tr>
<td>Oled_Chr</td>
<td>位置を指定して、１文字を表示</td>
<td>Oled_Out(2, 1, ‘A’)</td>
</tr>
<tr>
<td>Oled_Chr_Cp</td>
<td>カーソルのある位置に１文字を表示</td>
<td>Oled_Chr_Cp(‘A’)</td>
</tr>
<tr>
<td>Oled_Set_Cursor</td>
<td>カーソルの位置を変更</td>
<td>Oled_Set_Cursor(2, 1)</td>
</tr>
<tr>
<td>Oled_Set_Contrast</td>
<td>コントラストを変更</td>
<td>Oled_Set_Contrast(0x7F)</td>
</tr>
<tr>
<td>Oled_Max_Contrast</td>
<td>コントラスト最大</td>
<td>Oled_Max_Contrast()</td>
</tr>
<tr>
<td>Oled_Min_Contrast</td>
<td>コントラスト最小</td>
<td>Oled_Min_Contrast()</td>
</tr>
</tbody>
</table>
<h2 id="oled_cmd関数のコマンド一覧"><a href="#Oled-Cmd関数のコマンド一覧" class="headerlink" title="Oled_Cmd関数のコマンド一覧"></a>Oled_Cmd関数のコマンド一覧</h2><p><code>Oled_Cmd(コマンド)</code></p>
<table>
<thead>
<tr>
<th>コマンド</th>
<th>目的</th>
</tr>
</thead>
<tbody>
<tr>
<td>ClearDisplay</td>
<td>表示をクリアする</td>
</tr>
<tr>
<td>ReturnHome</td>
<td>カーソルをホームポジションに戻し、シフト表示を元の位置に戻します</td>
</tr>
<tr>
<td>DisplayON</td>
<td>液晶ディスプレイをオンにする</td>
</tr>
<tr>
<td>DisplayOFF</td>
<td>液晶ディスプレイをオフにする</td>
</tr>
<tr>
<td>CursorON</td>
<td>カーソルをオフにする</td>
</tr>
<tr>
<td>CursorOFF</td>
<td>カーソルをオンにする</td>
</tr>
<tr>
<td>BlinkON</td>
<td>カーソルを点滅させる</td>
</tr>
<tr>
<td>BlinkOFF</td>
<td>カーソルを点滅さない</td>
</tr>
<tr>
<td>ShiftLeft</td>
<td>表示RAMデータを変更せずに表示を左にシフト</td>
</tr>
<tr>
<td>ShiftRight</td>
<td>表示RAMデータを変更せずに表示を右にシフト</td>
</tr>
<tr>
<td>CursorLeft</td>
<td>表示RAMデータを変更せずにカーソルを左に移動</td>
</tr>
<tr>
<td>CursorRight</td>
<td>表示RAMデータを変更せずにカーソルを右に移動</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有機ＥＬキャラクタディスプレイモジュールをESP8266(ESP-WROOM-02)でmikroCのLcd Library風に使う&lt;/p&gt;
&lt;p&gt;これみたいに使う&lt;br&gt;mikroC PRO for PIC &amp;gt; Lcd Library&lt;br&gt;→ &lt;a href=&quot;ht
    
    </summary>
    
      <category term="ESP8266" scheme="https://keijirotanabe.github.io/blog/categories/ESP8266/"/>
    
    
      <category term="Arduino" scheme="https://keijirotanabe.github.io/blog/tags/Arduino/"/>
    
      <category term="ESP8266" scheme="https://keijirotanabe.github.io/blog/tags/ESP8266/"/>
    
      <category term="ESP-WROOM-02" scheme="https://keijirotanabe.github.io/blog/tags/ESP-WROOM-02/"/>
    
  </entry>
  
  <entry>
    <title>Raspberry Pi 3のはじめかた</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/11/raspberry-pi-3-starting-step-170210/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/11/raspberry-pi-3-starting-step-170210/</id>
    <published>2017-02-11T01:49:17.000Z</published>
    <updated>2017-02-17T14:51:43.014Z</updated>
    
    <content type="html"><![CDATA[<p>Raspberry Pi 3 にRaspbianをインストールして使えるようにするまでのやり方、解説</p>
<h1 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h1><!-- toc -->
<ul>
<li><a href="#環境">環境</a></li>
<li><a href="#公式サイト">公式サイト</a></li>
<li><a href="#必要なもの">必要なもの</a></li>
<li><a href="#手順">手順</a><ul>
<li><a href="#まずはsdをフォーマットする">まずはSDをフォーマットする</a></li>
<li><a href="#raspbianの用意">「Raspbian」の用意</a></li>
<li><a href="#raspbianをsdカードに書き込む">「Raspbian」をSDカードに書き込む</a></li>
<li><a href="#raspberry-piを起動させる">Raspberry Piを起動させる</a></li>
</ul>
</li>
<li><a href="#設定">設定</a><ul>
<li><a href="#まずはwifiに接続">まずはWiFiに接続</a></li>
<li><a href="#windowsからsshで接続">WindowsからSSHで接続</a><ul>
<li><a href="#sshの設定をonに">SSHの設定をONに</a></li>
<li><a href="#ipアドレスの確認">IPアドレスの確認</a></li>
<li><a href="#tera-termで接続">Tera Termで接続</a></li>
</ul>
</li>
<li><a href="#パッケージの更新">パッケージの更新</a></li>
<li><a href="#リモートデスクトップでpcから操作できるようにする">リモートデスクトップでPCから操作できるようにする</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->
<!--- [環境](#環境)-->
<!--- [公式サイト](#公式サイト)-->
<!--- [必要なもの](#必要なもの)-->
<!--- [手順](#手順)-->
<!--    - [まずはSDをフォーマットする](#まずはSDをフォーマットする)-->
<!--    - [「Raspbian」の用意](#「Raspbian」の用意)-->
<!--    - [「Raspbian」をSDカードに書き込む](#「Raspbian」をSDカードに書き込む)-->
<!--    - [Raspberry Piを起動させる](#Raspberry-Piを起動させる)-->
<!--- [設定](#設定)-->
<!--    - [まずはWiFiに接続](#まずはWiFiに接続)-->
<!--    - [WindowsからSSHで接続](#WindowsからSSHで接続)-->
<!--    - [パッケージの更新](#パッケージの更新)-->
<!--    - [リモートデスクトップでPCから操作できるようにする](#リモートデスクトップでPCから操作できるようにする)-->
<h1 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h1><ul>
<li>Windows10 Home 64bit</li>
<li>Raspberry Pi 3 Model B Element14版</li>
<li>Raspbian Jessie with PIXEL</li>
</ul>
<h1 id="公式サイト"><a href="#公式サイト" class="headerlink" title="公式サイト"></a>公式サイト</h1><p><a href="https://www.raspberrypi.org/" target="_blank" rel="external">https://www.raspberrypi.org/</a></p>
<h1 id="必要なもの"><a href="#必要なもの" class="headerlink" title="必要なもの"></a>必要なもの</h1><ul>
<li><a href="http://amzn.to/2lEbclX" target="_blank" rel="external">Raspberry Pi 3 本体</a></li>
<li><a href="http://amzn.to/2lCQFgQ" target="_blank" rel="external">microSD (8G以上)</a><br>  ↓によると SD と Raspberry Pi には相性があるようです<br>  参考: <a href="http://elinux.org/RPi_SD_cards" target="_blank" rel="external">http://elinux.org/RPi_SD_cards</a></li>
<li>マウス</li>
<li>キーボード</li>
<li>モニター<br>  HDMI出力ができるもの</li>
<li><a href="http://amzn.to/2lCwSxS" target="_blank" rel="external">HDMIケーブル</a></li>
<li>電源 MicroUSB経由 (2.5A推奨)<br>  ここでは2.4Aのを使っています<br>  こういうのもあるようです<br>  <a href="http://amzn.to/2kk0gYT" target="_blank" rel="external">Raspberry Pi 3 model B 専用電源</a></li>
</ul>
<h1 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h1><h2 id="まずはsdをフォーマットする"><a href="#まずはSDをフォーマットする" class="headerlink" title="まずはSDをフォーマットする"></a>まずはSDをフォーマットする</h2><p>「SDカードフォーマッター」でSDカードをフォーマット(初期化)します</p>
<p>ダウンロード先<br><a href="https://www.sdcard.org/jp/downloads/formatter_4/index.html" target="_blank" rel="external">https://www.sdcard.org/jp/downloads/formatter_4/index.html</a></p>
<p>詳しくは<a href="/blog/2017/02/10/sd-formatter-4-170210/" title="SDカードフォーマッターの使い方">SDカードフォーマッターの使い方</a></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1GgeB9NRR7ay_fPmgq7TCnyWVfRW7rj77vw" alt=""></p>
<h2 id="raspbianの用意"><a href="#「Raspbian」の用意" class="headerlink" title="「Raspbian」の用意"></a>「Raspbian」の用意</h2><p>ダウンロード先<br><a href="https://www.raspberrypi.org/downloads/raspbian/" target="_blank" rel="external">https://www.raspberrypi.org/downloads/raspbian/</a></p>
<p><a href="https://ja.wikipedia.org/wiki/%E3%82%B0%E3%83%A9%E3%83%95%E3%82%A3%E3%82%AB%E3%83%AB%E3%83%A6%E3%83%BC%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9" target="_blank" rel="external">GUI</a>版と<a href="https://ja.wikipedia.org/wiki/%E3%82%AD%E3%83%A3%E3%83%A9%E3%82%AF%E3%82%BF%E3%83%A6%E3%83%BC%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9" target="_blank" rel="external">CUI</a>版がありますが、今回はGUI版をダウンロードします</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1QQFN6hUVbepusPA4KWaFNoxs98gJjvtuDg" alt=""></p>
<h2 id="raspbianをsdカードに書き込む"><a href="#「Raspbian」をSDカードに書き込む" class="headerlink" title="「Raspbian」をSDカードに書き込む"></a>「Raspbian」をSDカードに書き込む</h2><p>RaspbianをSDカードに書き込むには、「Win32DiskImager」を使います</p>
<p>ダウンロード先<br><a href="https://ja.osdn.net/projects/sfnet_win32diskimager/" target="_blank" rel="external">https://ja.osdn.net/projects/sfnet_win32diskimager/</a></p>
<p>詳しくは<a href="/blog/2017/02/10/win32-disk-imager-170211/" title="Win32DiskImagerの使い方">Win32DiskImagerの使い方</a></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=13i_NbuaDH3Zm23eWO-Co4XUVrWFRYUginA" alt=""></p>
<h2 id="raspberry-piを起動させる"><a href="#Raspberry-Piを起動させる" class="headerlink" title="Raspberry Piを起動させる"></a>Raspberry Piを起動させる</h2><p>SDカードを挿します</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=11L3dyOtXZHnyF5xg0RCflTg1IAsSLyG9QQ" alt=""></p>
<p>周辺を接続</p>
<p>電源は最後に挿します</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1W20IzqR0yYaeRf2yIjEFEQuuh6edsnFwPA" alt=""></p>
<p>起動しました</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=15ma3VA1HoxASlmKmTK5MwivQzPA0cgY4QA" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1X41JEXx4yrqbLue40LipiQKNaDYFWtL9ig" alt=""></p>
<h1 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h1><h2 id="まずはwifiに接続"><a href="#まずはWiFiに接続" class="headerlink" title="まずはWiFiに接続"></a>まずはWiFiに接続</h2><p>Raspberry Pi 3には標準でWiFiがついています</p>
<p>接続方法</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1Vkfp61Tm3_FAKnSj4UFTJzI0258j0Cmjxw" alt=""></p>
<h2 id="windowsからsshで接続"><a href="#WindowsからSSHで接続" class="headerlink" title="WindowsからSSHで接続"></a>WindowsからSSHで接続</h2><h3 id="sshの設定をonに"><a href="#SSHの設定をONに" class="headerlink" title="SSHの設定をONに"></a>SSHの設定をONに</h3><p><code>Preferences &gt; Raspberry Pi Configuration</code></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1CIRtA4GOYdc2PoxeLV9AOozEsHQfFN5hnw" alt=""></p>
<p><code>Interfaces &gt; SSH: Enabled &gt; OK</code></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1l4UxAIftx905yjlwk6P_G8c8xn1los1dBA" alt=""></p>
<h3 id="ipアドレスの確認"><a href="#IPアドレスの確認" class="headerlink" title="IPアドレスの確認"></a>IPアドレスの確認</h3><p>ターミナルを起動します</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=181_m267p5vAkcAPf9QmLvUMcwG0GwtQA4g" alt=""></p>
<p>以下のコマンドを入力</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ifconfig</div></pre></td></tr></table></figure>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1PPKP2FqC7SzspYaisdq4irHV-kKmq6jXfA" alt=""></p>
<p>調べたIPアドレスはメモしておいてください</p>
<h3 id="tera-termで接続"><a href="#Tera-Termで接続" class="headerlink" title="Tera Termで接続"></a>Tera Termで接続</h3><p>Tera Term をインストール</p>
<p>ダウンロード先<br><a href="https://ja.osdn.net/projects/ttssh2/releases/66795" target="_blank" rel="external">https://ja.osdn.net/projects/ttssh2/releases/66795</a></p>
<p>↑で調べたIPアドレスを入力して「OK」</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1oe0UyaNKhDXEDopxGegU9MLL2Cvcdtvz0A" alt=""></p>
<p>セキュリティ警告「続行」</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1cEllQmrJ_wxH66clLhZACmKRRqTE2-5e1A" alt=""></p>
<p>ユーザー名とパスワードを入力して「OK」</p>
<p>なお、デフォルトの設定は</p>
<table>
<thead>
<tr>
<th>ユーザー名</th>
<th>パスワード</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>pi</code></td>
<td><code>raspberry</code></td>
</tr>
</tbody>
</table>
<p>となっています</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1l5i3woXAm1ni7fILsodWZtioGnHHmu_4eQ" alt=""></p>
<p>ログイン画面</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1nBtigO3cC7ZwggO2Wh1u_Z8ip_uM2IVWUA" alt=""></p>
<h2 id="パッケージの更新"><a href="#パッケージの更新" class="headerlink" title="パッケージの更新"></a>パッケージの更新</h2><p>以下のコマンドでパッケージをアップデートしておきます</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div></pre></td></tr></table></figure>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1zf53jRe9r8FMox7E5W1bh5FttMGOJ946Yw" alt=""></p>
<p>つづいて ↓ も<br>※時間がかかるので注意してください</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get upgrade</div></pre></td></tr></table></figure>
<p>途中で聞かれたら「y」を入力して「Enter」</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1G6YSp2wW9WDmDaPYBptNW9mj_46WdJ1wig" alt=""></p>
<p>途中で聞かれたら「q」を入力</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1Mf2V-2lkgkJPsr1UlBZPf9RaxbhQSq4lwA" alt=""></p>
<p>終了しました<br>1時間くらいかかりました</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1-8u-BdknqrpuJozNJ3EP50b0p7GhW0oNIQ" alt=""></p>
<h2 id="リモートデスクトップでpcから操作できるようにする"><a href="#リモートデスクトップでPCから操作できるようにする" class="headerlink" title="リモートデスクトップでPCから操作できるようにする"></a>リモートデスクトップでPCから操作できるようにする</h2><p>詳しくは<br><a href="/blog/2017/02/11/raspberry-pi-remote-disktop-170211/" title="Raspberry Pi 3をリモートデスクトップで操作">Raspberry Pi 3をリモートデスクトップで操作</a></p>
<p>以下をインストール</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install tightvncserver</div><div class="line">sudo apt-get install xrdp</div></pre></td></tr></table></figure>
<p>先ほど調べたIPアドレスへ接続します</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1JivpnB-rSjfyaR41wTZPEY3XY6Mf5NSizQ" alt=""></p>
<p>ユーザー名とパスワードを入力して「OK」</p>
<ul>
<li>ユーザー名: <code>pi</code></li>
<li>パスワード: <code>raspberry</code></li>
</ul>
<p><img src="https://drive.google.com/uc?export=view&amp;id=15zzAlYBj_STR_9K3jF9FnV4bzs89SfiewA" alt=""></p>
<p>以下の画面が表示されます</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1MkjO2qzvWyDQW49oPPvA_08qupB-nz4FXg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Raspberry Pi 3 にRaspbianをインストールして使えるようにするまでのやり方、解説&lt;/p&gt;
&lt;h1 id=&quot;目次&quot;&gt;&lt;a href=&quot;#目次&quot; class=&quot;headerlink&quot; title=&quot;目次&quot;&gt;&lt;/a&gt;目次&lt;/h1&gt;&lt;!-- toc --&gt;
&lt;u
    
    </summary>
    
      <category term="Raspberry Pi" scheme="https://keijirotanabe.github.io/blog/categories/Raspberry-Pi/"/>
    
    
      <category term="Raspberry Pi" scheme="https://keijirotanabe.github.io/blog/tags/Raspberry-Pi/"/>
    
      <category term="Raspberry Pi 3" scheme="https://keijirotanabe.github.io/blog/tags/Raspberry-Pi-3/"/>
    
  </entry>
  
  <entry>
    <title>コマンドプロンプトの起動方法</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/11/command-prompt-start-up-170211/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/11/command-prompt-start-up-170211/</id>
    <published>2017-02-11T01:41:44.000Z</published>
    <updated>2017-02-17T14:00:42.477Z</updated>
    
    <content type="html"><![CDATA[<p>コマンドプロンプトの起動方法をメモ</p>
<h2 id="共通"><a href="#共通" class="headerlink" title="共通"></a>共通</h2><p><code>「Windowsキー」+「R」</code>→ 「ファイル名を指定して実行」<br><img src="https://drive.google.com/uc?export=view&amp;id=13HzI-FXlK_DjVfxrvsx0elkA6FCRku4r3Q" alt=""></p>
<h2 id="windows10"><a href="#Windows10" class="headerlink" title="Windows10"></a>Windows10</h2><p><img src="https://drive.google.com/uc?export=view&amp;id=1lqIziTSacsemYDvQFlPPVFOt3DX70GkEvQ" alt=""><br><img src="https://drive.google.com/uc?export=view&amp;id=1Z13RVoI1iTPrjPikK4XWTJ4QKazEke7Ilg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;コマンドプロンプトの起動方法をメモ&lt;/p&gt;
&lt;h2 id=&quot;共通&quot;&gt;&lt;a href=&quot;#共通&quot; class=&quot;headerlink&quot; title=&quot;共通&quot;&gt;&lt;/a&gt;共通&lt;/h2&gt;&lt;p&gt;&lt;code&gt;「Windowsキー」+「R」&lt;/code&gt;→ 「ファイル名を指定して実行」&lt;
    
    </summary>
    
      <category term="補足" scheme="https://keijirotanabe.github.io/blog/categories/%E8%A3%9C%E8%B6%B3/"/>
    
    
      <category term="補足" scheme="https://keijirotanabe.github.io/blog/tags/%E8%A3%9C%E8%B6%B3/"/>
    
  </entry>
  
  <entry>
    <title>Raspberry Pi 3をリモートデスクトップで操作</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/11/raspberry-pi-remote-disktop-170211/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/11/raspberry-pi-remote-disktop-170211/</id>
    <published>2017-02-11T00:52:02.000Z</published>
    <updated>2017-02-17T14:47:48.463Z</updated>
    
    <content type="html"><![CDATA[<p>Raspberry Piにxrdpをインストールして、Windowsのリモートデスクトップ機能から操作できるようにする</p>
<h1 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h1><ul>
<li>Windows10 Home 64bit</li>
<li><a href="http://amzn.to/2kkapVB" target="_blank" rel="external">Raspberry Pi 3 Model B (Element14)</a></li>
<li><a href="https://www.raspberrypi.org/downloads/raspbian/" target="_blank" rel="external">Raspbian Jessie with PIXEL</a></li>
<li><a href="https://ja.osdn.net/projects/ttssh2/" target="_blank" rel="external">Tera Term バージョン 4.9.2</a></li>
</ul>
<h1 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h1><h2 id="tightvncserverのインストール"><a href="#tightvncserverのインストール" class="headerlink" title="tightvncserverのインストール"></a>tightvncserverのインストール</h2><p><code>xrdp</code>というパッケージをインストールしますが、先に<code>tightvncserver</code>をインストールする必要があります</p>
<p>以下のコマンドでインストール</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install tightvncserver</div></pre></td></tr></table></figure>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1OfVJs_YsNRNNqFWkc-Nn7OODLoRBwccj-g" alt=""></p>
<p>途中で聞かれたら「y」を入力して「Enter」</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1IAx9J2isbGfqOnnirQRQBAQxgEXSm6hwGA" alt=""></p>
<h2 id="xrdpのインストール"><a href="#xrdpのインストール" class="headerlink" title="xrdpのインストール"></a>xrdpのインストール</h2><p>以下のコマンドでインストール</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install xrdp</div></pre></td></tr></table></figure>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1mL9HCFhjcHJR1RULJOjo3-CyUVpGw1ucWg" alt=""></p>
<p>途中で聞かれたら「y」を入力して「Enter」</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1-poJb57CuLr99JmSxZwIe1ecD0aQqIcLuA" alt=""></p>
<h1 id="ipアドレスの確認"><a href="#IPアドレスの確認" class="headerlink" title="IPアドレスの確認"></a>IPアドレスの確認</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ifconfig</div></pre></td></tr></table></figure>
<p>ここでは<code>192.168.11.15</code>を使用します<br>※各自、異なります</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1emvG8aYEIkQUshGsWwpjDKRCjmigAY1ZIw" alt=""></p>
<h1 id="リモートデスクトップの起動"><a href="#リモートデスクトップの起動" class="headerlink" title="リモートデスクトップの起動"></a>リモートデスクトップの起動</h1><p>リモートデスクトップを起動させます</p>
<p>「リモートデスクトップ」で検索して起動します</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=11ow4JS4CPAtXGyzSfjx0C0X5Lcf6RZo_uQ" alt=""></p>
<p>先ほど調べたIPアドレス(<code>192.168.11.15</code>)へ接続します</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1JivpnB-rSjfyaR41wTZPEY3XY6Mf5NSizQ" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1tsWbpnp92i7HXapNFjNhD7Vy3JPym4sUew" alt=""></p>
<p>ユーザー名とパスワードを入力して「OK」</p>
<p>なお、デフォルトの設定は</p>
<table>
<thead>
<tr>
<th>ユーザー名</th>
<th>パスワード</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>pi</code></td>
<td><code>raspberry</code></td>
</tr>
</tbody>
</table>
<p>になっています</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1ArwATK2qxzO9DGWLrPRQwiQk1s7k_gUZAQ" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=15zzAlYBj_STR_9K3jF9FnV4bzs89SfiewA" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1ScEthT_0mpRbiWSGZ1Md4nyhCHBj4iCfSw" alt=""></p>
<p>以下の画面が表示されます</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1MkjO2qzvWyDQW49oPPvA_08qupB-nz4FXg" alt=""></p>
<p>以上です</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Raspberry Piにxrdpをインストールして、Windowsのリモートデスクトップ機能から操作できるようにする&lt;/p&gt;
&lt;h1 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h1&gt;&lt;ul&gt;
&lt;
    
    </summary>
    
      <category term="Raspberry Pi" scheme="https://keijirotanabe.github.io/blog/categories/Raspberry-Pi/"/>
    
    
      <category term="Raspberry Pi" scheme="https://keijirotanabe.github.io/blog/tags/Raspberry-Pi/"/>
    
      <category term="Raspberry Pi 3" scheme="https://keijirotanabe.github.io/blog/tags/Raspberry-Pi-3/"/>
    
  </entry>
  
  <entry>
    <title>Win32DiskImagerの使い方</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/10/win32-disk-imager-170211/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/10/win32-disk-imager-170211/</id>
    <published>2017-02-10T19:56:35.000Z</published>
    <updated>2017-02-17T14:40:49.587Z</updated>
    
    <content type="html"><![CDATA[<p>SDカードやUSBメモリーにイメージファイルを書き出せるソフトWin32DiskImagerを説明します</p>
<h1 id="ダウンロード"><a href="#ダウンロード" class="headerlink" title="ダウンロード"></a>ダウンロード</h1><p>ダウンロード先<br><a href="https://ja.osdn.net/projects/sfnet_win32diskimager/" target="_blank" rel="external">https://ja.osdn.net/projects/sfnet_win32diskimager/</a></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=11ER1WD8myfqGQybhjdVZeqPoyPRo_DrzHQ" alt=""></p>
<h1 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h1><p>ダウンロードした<code>Win32DiskImager-0.9.5-install.exe</code>を実行します</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1RokPOlizLE7k-drsR47wBJg9pNUxDGXz7g" alt=""></p>
<p>以下の流れでインストール</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1iIuEz6ycx1TQw9MJUIccr-QqDVr7CjahtQ" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1n4wSFMt4arIvzwPpXMsZQPswuTvlsHnVCw" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1zE4ugaVtyFwtWJnJJPU0PFM7_PdtOLwUWw" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1qUHuJwjLprV_yQR3SmgitWuOJypgpPxTPA" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1iPjV-q3LRiC41AOqFKjmW5OA2lqIIktSYw" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1hN0SdhwwcCqV5EFD61WP7rrPqBC-wfhwtA" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=15v4ESCCZaq-9xbfsUUmONdCDM0nhoA8Gyg" alt=""></p>
<h1 id="使い方"><a href="#使い方" class="headerlink" title="使い方"></a>使い方</h1><h2 id="起動"><a href="#起動" class="headerlink" title="起動"></a>起動</h2><p>管理者として実行<br>何か聞かれたら「はい」を選択</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1oWBxULK7z2R06EFJWHDAiH1F0hS_Y-IFUg" alt=""></p>
<p>起動画面</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1AxiZABJ9EAfHE-s0TfFN3f39_C8TFOyOHg" alt=""></p>
<h2 id="ファイルを選択"><a href="#ファイルを選択" class="headerlink" title="ファイルを選択"></a>ファイルを選択</h2><p>書き込みたいファイルを選択します<br>※ここでは<code>2017-01-11-raspbian-jessie.img</code>を選択</p>
<p>ファイルのマークを選択</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1sECDXXLPVBp2efTf2JYu1TnW4k-U4ZXoJw" alt=""></p>
<p>ファイルを開く</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1TPvVXcX5_6W-vLOgOQkRQ8NrD2u-FmpJzQ" alt=""></p>
<p>選択できました</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1sbOB49cVcWmCN1txwe38W5Bw6GpmUUOPSw" alt=""></p>
<h2 id="書き込み先を選択"><a href="#書き込み先を選択" class="headerlink" title="書き込み先を選択"></a>書き込み先を選択</h2><p>書き込み先のSDカードまたは、USBメモリーを選択します</p>
<p>(F:)に書き込みたいので、[F]を選択</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1G8Mat1XZMi7r_Eft9mp-pAHBbZTRzivM-A" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1Cd7TBKtbf5YRhiW-k_-lWkpeBfvF2hDfuw" alt=""></p>
<p>※大抵、初めから選択されています</p>
<h2 id="書き込み開始"><a href="#書き込み開始" class="headerlink" title="書き込み開始"></a>書き込み開始</h2><p>「Write」を選択</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=13i_NbuaDH3Zm23eWO-Co4XUVrWFRYUginA" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1-XKsBF6mmjNIrXtpRuGK1mkloymOmvkVNQ" alt=""></p>
<p>書き込み中<br>終わるまで待ちます</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1s0esPsazCSLHKCMNK8wGQ3kmOsDkSAH3yw" alt=""></p>
<p>終わりました</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=10vXPlSIFYAWabhB-O5fG7l8As0ghDRgcHA" alt=""></p>
<p>使い方は以上です</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SDカードやUSBメモリーにイメージファイルを書き出せるソフトWin32DiskImagerを説明します&lt;/p&gt;
&lt;h1 id=&quot;ダウンロード&quot;&gt;&lt;a href=&quot;#ダウンロード&quot; class=&quot;headerlink&quot; title=&quot;ダウンロード&quot;&gt;&lt;/a&gt;ダウンロード&lt;/
    
    </summary>
    
      <category term="補足" scheme="https://keijirotanabe.github.io/blog/categories/%E8%A3%9C%E8%B6%B3/"/>
    
    
      <category term="補足" scheme="https://keijirotanabe.github.io/blog/tags/%E8%A3%9C%E8%B6%B3/"/>
    
      <category term="Win32DiskImager" scheme="https://keijirotanabe.github.io/blog/tags/Win32DiskImager/"/>
    
  </entry>
  
  <entry>
    <title>SDカードフォーマッターの使い方</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/10/sd-formatter-4-170210/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/10/sd-formatter-4-170210/</id>
    <published>2017-02-10T06:13:41.000Z</published>
    <updated>2017-02-17T14:18:13.068Z</updated>
    
    <content type="html"><![CDATA[<p>SD / SDHC / SDXC カードのフォーマットに対応し、メモリーカードの性能が最適になるように設計されています</p>
<h1 id="ダウンロード"><a href="#ダウンロード" class="headerlink" title="ダウンロード"></a>ダウンロード</h1><p>SDフォーマッター4.0の入手先<br><a href="https://www.sdcard.org/jp/downloads/formatter_4/index.html" target="_blank" rel="external">https://www.sdcard.org/jp/downloads/formatter_4/index.html</a></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1nOdvfmFpCLnGleJ6yw-sJf4CNXo4dg6hIg" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1ncxxD4-iVVr9lag8g8EPP9fz1vHbQ_F9pw" alt=""></p>
<h1 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h1><p>ダウンロードしたファイルを解凍すると<code>setup.exe</code>があるので実行します</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1F1jxffrB_OgmTHXgH-i4cNjHE6dtIOHYkw" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1IaFW0asfFZFjTfK2Ts-KJoSo4Xo-23Lb9A" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1uAlPDzgcBkfdgwbvPkghI-KzMZMbXOGhcw" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1oVkfav_6it8Ervj1S_FhUpi2b-1qPuz6Pg" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1pY4SvLi8eVL6i845CFFYBSHNub-fxM0MIg" alt=""></p>
<h1 id="使い方"><a href="#使い方" class="headerlink" title="使い方"></a>使い方</h1><p>インストールできたら起動します</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1ydfLMAVzh6B5ivC4oKG0tsQgs0Lselwlbg" alt=""></p>
<p>SDカードを刺して「フォーマット」を選択</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1GgeB9NRR7ay_fPmgq7TCnyWVfRW7rj77vw" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1EWL1yXI8krB_TdNuHW--VOqcinCzIhx28w" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1Sfhx8x6_5o1lWbGTaCR4hcuACV8pgUJGag" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1j2suXpZ_JPMlYv5QOeV591Ax67URy1rKSg" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1geRb4D0vNYeOSfeEt1vu-pwktZCnRWI0CQ" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SD / SDHC / SDXC カードのフォーマットに対応し、メモリーカードの性能が最適になるように設計されています&lt;/p&gt;
&lt;h1 id=&quot;ダウンロード&quot;&gt;&lt;a href=&quot;#ダウンロード&quot; class=&quot;headerlink&quot; title=&quot;ダウンロード&quot;&gt;&lt;/a&gt;ダ
    
    </summary>
    
      <category term="補足" scheme="https://keijirotanabe.github.io/blog/categories/%E8%A3%9C%E8%B6%B3/"/>
    
    
      <category term="補足" scheme="https://keijirotanabe.github.io/blog/tags/%E8%A3%9C%E8%B6%B3/"/>
    
      <category term="SDカードフォーマッター" scheme="https://keijirotanabe.github.io/blog/tags/SD%E3%82%AB%E3%83%BC%E3%83%89%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%82%BF%E3%83%BC/"/>
    
  </entry>
  
  <entry>
    <title>Node.jsでHTTPサーバーを立てるまでの解説</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/09/node-js-how-to-170210/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/09/node-js-how-to-170210/</id>
    <published>2017-02-09T19:56:47.000Z</published>
    <updated>2017-02-17T14:13:34.084Z</updated>
    
    <content type="html"><![CDATA[<p>Node.jsでHTTPサーバー起動を起動して、「Hello World!」をブラウザで表示するまでを丁寧に説明</p>
<h1 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h1><ul>
<li>Windows10 Home 64bit</li>
<li>Node.js バージョン6.9.5<br>  インストール手順は<a href="/blog/2017/02/09/node-js-install-step-170210/" title="Node.jsのインストール方法">Node.jsのインストール方法</a>を参照</li>
<li>テキストエディタ → Sublime Text</li>
<li>ウェブブラウザ → Google Chrome</li>
</ul>
<h1 id="serverjsの用意"><a href="#server-jsの用意" class="headerlink" title="server.jsの用意"></a>server.jsの用意</h1><p>今回はデスクトップで作業してくので、デスクトップに<code>helloworld</code>というフォルダを用意します</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1PLamjRqWO1vPdrMig_KOYhywrpOfSOVefA" alt=""></p>
<p><code>helloworld</code>の中に<code>server.js</code>を作ります</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1YZRqdOR248eGKnQzenbofvePNXu5pjZClg" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=16YDI0dvj7Qu48yO8BlF1_GqMy9zZo3dsMg" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1HWIymM7vi0NAWakb57TvBCyf75tJ0wX5Rg" alt=""></p>
<p>テキストエディタで開きます</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1KNLWJ44l2vJFmhRQKbL0C4wjAL3jTqhIHQ" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=12yz4qAB2gLJNCzc5rZyv7bJiPrP_jbmgJw" alt=""></p>
<h1 id="基本的なhttpサーバー"><a href="#基本的なHTTPサーバー" class="headerlink" title="基本的なHTTPサーバー"></a>基本的なHTTPサーバー</h1><h2 id="全体のコード"><a href="#全体のコード" class="headerlink" title="全体のコード"></a>全体のコード</h2><figure class="highlight javascript"><figcaption><span>server.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> port = <span class="number">3000</span>;</div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.statusCode = <span class="number">200</span>;</div><div class="line">    res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>);</div><div class="line">    res.end(<span class="string">'Hello World!\n'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.listen(port, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Server running'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="コードの解説"><a href="#コードの解説" class="headerlink" title="コードの解説"></a>コードの解説</h2><ul>
<li><p><code>var http = require(&#39;http&#39;);</code><br>  httpモジュールの読み込み</p>
</li>
<li><p><code>var port = 3000;</code><br>  3000番ポートを使う</p>
</li>
<li><p><code>var server = http.createServer(コールバック関数)</code><br>  httpサーバー作成し、<code>server</code>に代入<br>  serverにアクセスがくるとコールバック関数が呼ばれる</p>
</li>
<li><p><code>res.statusCode = 200;</code><br>  ステータスコード200は成功を意味する<br>  詳しくは<a href="http://e-words.jp/p/r-httpstatus.html" target="_blank" rel="external">HTTPのステータスコード</a></p>
</li>
<li><p><code>res.setHeader(&#39;Content-Type&#39;, &#39;text/plain&#39;);</code><br>  コンテンツタイプをテキストに<br>  参考: <a href="http://qiita.com/AkihiroTakamura/items/b93fbe511465f52bffaa" target="_blank" rel="external">Content-Typeの一覧</a></p>
</li>
<li><p><code>res.end(&#39;Hello World!\n&#39;);</code><br>  すべてのヘッダー情報と本文(「Hello World」)が送信されたことをサーバーに通知</p>
</li>
<li><p><code>server.listen(port, コールバック関数)</code><br>  httpサーバーを3000番ポートで待機させた後、コールバック関数を呼ぶ</p>
</li>
<li><p><code>console.log(&#39;Server running&#39;);</code><br>  コンソールに「Server running」と表示</p>
</li>
</ul>
<p><div id="code-img"></div><br><img src="https://drive.google.com/uc?export=view&amp;id=1i76HS-CtCS5UZsgqMPoruQfb995w4zZWwQ" alt=""></p>
<p>より詳しくは<a href="https://nodejs.org/dist/latest-v6.x/docs/api/http.html" target="_blank" rel="external">HTTP | Node.js v6.9.5 Documentation</a></p>
<h1 id="書いたコードを実行"><a href="#書いたコードを実行" class="headerlink" title="書いたコードを実行"></a>書いたコードを実行</h1><p>コマンドプロンプトを起動します<br>わからない人は<a href="/blog/2017/02/11/command-prompt-start-up-170211/" title="コマンドプロンプトの起動方法">コマンドプロンプトの起動方法</a>を参考に</p>
<p>デスクトップに<code>helloworld</code>フォルダを作ったので、移動します<br><code>cd Disktop/helloworld</code>と入力して「Enter」</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1ghwQukcbWC4-2pkwl7Hja-eO6A_OKyQDjA" alt=""></p>
<p><code>server.js</code>を起動します<br>起動するには<code>node</code>コマンドを使います<br><code>node server</code>と入力して「Enter」</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1eCdgvA3BCrVLz3P8Ul9rDigwv1QU8DmaSw" alt=""></p>
<p>うまくいけば「Server running」が表示されます</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1NAinBOdRmgXwmUAiSDFjeov_Xgr-t6NzDA" alt=""></p>
<h1 id="ウェブブラウザから表示"><a href="#ウェブブラウザから表示" class="headerlink" title="ウェブブラウザから表示"></a>ウェブブラウザから表示</h1><p>Google Chromeを立ち上げて<br><code>localhost:3000</code>と入力して「Enter」</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1pW0TfVm33pxvwpy_ePpR9DkQKjKhIL4jwA" alt=""></p>
<p>「Hello World!」が表示されれば成功です</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1fl_Xsyvdwvga4xm8NtFi0X0HH063jhlFLw" alt=""></p>
<h2 id="コードを加えます"><a href="#コードを加えます" class="headerlink" title="コードを加えます"></a>コードを加えます</h2><p><a href="#code-img">上の画像</a>で<code>「localhost:3000」アクセスがあったら呼ばれる</code>というのを見ていきます</p>
<p><code>console.log(&#39;Connected&#39;);</code>を加えます</p>
<h2 id="全体のコード"><a href="#全体のコード-1" class="headerlink" title="全体のコード"></a>全体のコード</h2><figure class="highlight javascript"><figcaption><span>server.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> port = <span class="number">3000</span>;</div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Connected'</span>); <span class="comment">// &lt;- 追加</span></div><div class="line">    res.statusCode = <span class="number">200</span>;</div><div class="line">    res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>);</div><div class="line">    res.end(<span class="string">'Hello World!\n'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.listen(port, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Server running'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>コードを書き替えたので、サーバーを再起動します</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1yLpkDUdE_GPDFFbnChH8YeiiVAszv8ED6w" alt=""></p>
<p>以前、入力したキーは「↑」、「↓」で選択可</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1AwyP-YdYBL8lO75-aLof6uA7GUDapoPnAA" alt=""></p>
<p>↓の①を何回か押してみて下さい</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1jPfSC-HSuONj9tSQ2Guz2avP2PA9BqEzng" alt=""></p>
<p><code>「localhost:3000」</code>にアクセスがくると、<code>http.createServer(引数)</code>の引数に渡した関数が呼ばれます<br>これでこのコードの意味が分かると思います</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=18kTVHk736lG7GOgMyKWWsxDcVOKCJmcEww" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Node.jsでHTTPサーバー起動を起動して、「Hello World!」をブラウザで表示するまでを丁寧に説明&lt;/p&gt;
&lt;h1 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="プログラミング" scheme="https://keijirotanabe.github.io/blog/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
      <category term="Node.js" scheme="https://keijirotanabe.github.io/blog/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/Node-js/"/>
    
    
      <category term="Node.js" scheme="https://keijirotanabe.github.io/blog/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node.jsのインストール方法</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/09/node-js-install-step-170210/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/09/node-js-install-step-170210/</id>
    <published>2017-02-09T19:54:23.000Z</published>
    <updated>2017-02-17T13:59:30.669Z</updated>
    
    <content type="html"><![CDATA[<p>Node.jsのインストール方法</p>
<h1 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h1><!-- toc -->
<ul>
<li><a href="#公式サイト">公式サイト</a></li>
<li><a href="#nodejsとは">Node.jsとは</a><ul>
<li><a href="#特徴">特徴</a></li>
</ul>
</li>
<li><a href="#インストール手順">インストール手順</a><ul>
<li><a href="#windows">Windows</a><ul>
<li><a href="#ダウンロードページ">ダウンロードページ</a></li>
<li><a href="#インストール手順-1">インストール手順</a></li>
<li><a href="#インストールされたか確認">インストールされたか確認</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<!-- tocstop -->
<h1 id="公式サイト"><a href="#公式サイト" class="headerlink" title="公式サイト"></a>公式サイト</h1><p><a href="https://nodejs.org/ja/" target="_blank" rel="external">https://nodejs.org/ja/</a></p>
<h1 id="nodejsとは"><a href="#Node-jsとは" class="headerlink" title="Node.jsとは"></a>Node.jsとは</h1><h2 id="特徴"><a href="#特徴" class="headerlink" title="特徴"></a>特徴</h2><ul>
<li><strong>サーバー側で動作するJavaScript</strong><br>  通常、JavaScriptはウェブブラウザの中で実行されるが、Node.jsはサーバサイドで動作するJavaScriptの一種</li>
<li><strong><a href="http://e-words.jp/w/%E3%83%8E%E3%83%B3%E3%83%96%E3%83%AD%E3%83%83%E3%82%AD%E3%83%B3%E3%82%B0%E9%80%9A%E4%BF%A1.html" target="_blank" rel="external">ノンブロッキングI/O</a></strong><br>  送受信の完了を待たないで、他の処理を開始する通信方法</li>
<li><strong><a href="http://e-words.jp/w/%E3%82%B7%E3%83%B3%E3%82%B0%E3%83%AB%E3%82%B9%E3%83%AC%E3%83%83%E3%83%89.html" target="_blank" rel="external">シングルスレッド </a></strong><br>  並行処理などを行わずにすべての演算を逐次に処理していくこと</li>
<li><strong><a href="http://e-words.jp/w/%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%83%89%E3%83%AA%E3%83%96%E3%83%B3.html" target="_blank" rel="external">イベントドリブン </a></strong><br>  ユーザや他のプログラムが実行した操作（イベント）に対応して処理を行う、プログラムの実行形式<br>  ユーザが操作を行っていないときはプログラムは何もせず待機している</li>
</ul>
<p><strong>メリット</strong></p>
<ul>
<li>早くてリアルタイムに強い</li>
<li>多数のアクセスに強い</li>
</ul>
<h1 id="インストール手順"><a href="#インストール手順" class="headerlink" title="インストール手順"></a>インストール手順</h1><h2 id="windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>推奨版の6.9.5をインストールしていきます</p>
<h3 id="ダウンロードページ"><a href="#ダウンロードページ" class="headerlink" title="ダウンロードページ"></a>ダウンロードページ</h3><p>64bit版<br><a href="https://nodejs.org/ja/" target="_blank" rel="external">ダウンロード Windows (x64)</a></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1fD7DcYPdECz0zRVSvNQSYYr1fsItHP8PdQ" alt=""></p>
<p>32bit版はこちら<br><a href="https://nodejs.org/ja/download/" target="_blank" rel="external">ダウンロード Windows (x32)</a></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1LJc8Aamh2ATM-eooitrPMaX-Wxbl9g5Cog" alt=""></p>
<h3 id="インストール手順"><a href="#インストール手順-1" class="headerlink" title="インストール手順"></a>インストール手順</h3><p><img src="https://drive.google.com/uc?export=view&amp;id=1VBxv_EwQGnBi0U91w_qMjP7jCDt0UgVFkw" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1-B4P-Cjzab_d9oy9opfgLxr74X0XIMfu_A" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1xE9Pqh4s8WyqwBCOTC7sdOwtd4n9bKkcQQ" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1Sp5vi4oyGg3l21u2Sgmc4scA7P8ANoeLlQ" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=173QG8VkxJULhLUPXtcXKMunUCXMNIqzS-A" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1SBoK6MpadjBYBbvoLtDt07hzV3Lml19YXQ" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1a3vV4T7ZCNqHoEVHy6lODx1ZpbrYyvAk6g" alt=""></p>
<h3 id="インストールされたか確認"><a href="#インストールされたか確認" class="headerlink" title="インストールされたか確認"></a>インストールされたか確認</h3><p>コマンドプロンプトを起動します<br>わからない人は<a href="/blog/2017/02/11/command-prompt-start-up-170211/" title="コマンドプロンプトの起動方法">コマンドプロンプトの起動方法</a>を参考</p>
<p><code>node -v</code>と<code>npm -v</code>でインストールされたバージョンを確認</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1R1HZ4kMlnVACzkNNenwDI8QBzxItrMgV_Q" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Node.jsのインストール方法&lt;/p&gt;
&lt;h1 id=&quot;目次&quot;&gt;&lt;a href=&quot;#目次&quot; class=&quot;headerlink&quot; title=&quot;目次&quot;&gt;&lt;/a&gt;目次&lt;/h1&gt;&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#公式サイト&quot;&gt;公式サイト&lt;/a&gt;&lt;
    
    </summary>
    
      <category term="プログラミング" scheme="https://keijirotanabe.github.io/blog/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
      <category term="Node.js" scheme="https://keijirotanabe.github.io/blog/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/Node-js/"/>
    
    
      <category term="Node.js" scheme="https://keijirotanabe.github.io/blog/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>回路図が書けるFritzingをインストール</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/08/fritzing-install-170208/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/08/fritzing-install-170208/</id>
    <published>2017-02-08T03:42:50.000Z</published>
    <updated>2017-02-17T13:53:49.069Z</updated>
    
    <content type="html"><![CDATA[<p>回路図が書けるFritzingをインストールするまで</p>
<h1 id="公式サイト"><a href="#公式サイト" class="headerlink" title="公式サイト"></a>公式サイト</h1><p><a href="http://fritzing.org/home/" target="_blank" rel="external">http://fritzing.org/home/</a></p>
<h1 id="ダウンロード"><a href="#ダウンロード" class="headerlink" title="ダウンロード"></a>ダウンロード</h1><p>ダウンロードページ<br><a href="http://fritzing.org/download/" target="_blank" rel="external">Fritzing Download</a><br>Version 0.9.3b (2017/02/08時点)</p>
<p><code>No Donation</code>をチェックして<code>Download</code>を選択</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1cBRKilGINkBUmXxNgnYKGK7Ek5aOSPX-VA" alt=""></p>
<p><code>Windows 64bit</code>を選択<br>※環境に合わせてお選びください</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1xg5l_cbIlQeyl5JQ8QebVXvlXuPGGboYfQ" alt=""></p>
<h1 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h1><p>ファイルを解凍すると<code>fritzing.0.9.3b.64.pc</code>ができるので、適当なフォルダにおいてください<br>今回は<code>C:\fritzing.0.9.3b.64.pc</code>におきました</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1P6lUMK3uwqlGLbwC_CkDGDdaWwwAyPJNgw" alt=""></p>
<p><code>Fritzing.exe</code>で起動します<br>右クリックからショートカットを作ってデスクトップに置いておくと便利かと思います</p>
<p>初回起動画面</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1gxRZ4jqH0IvEO0Yeg7FAS__TMiFnnYZzpA" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;回路図が書けるFritzingをインストールするまで&lt;/p&gt;
&lt;h1 id=&quot;公式サイト&quot;&gt;&lt;a href=&quot;#公式サイト&quot; class=&quot;headerlink&quot; title=&quot;公式サイト&quot;&gt;&lt;/a&gt;公式サイト&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://fritzing
    
    </summary>
    
      <category term="Fritzing" scheme="https://keijirotanabe.github.io/blog/categories/Fritzing/"/>
    
    
      <category term="Fritzing" scheme="https://keijirotanabe.github.io/blog/tags/Fritzing/"/>
    
  </entry>
  
  <entry>
    <title>ESP8266をArduinoとして使う</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/08/esp8266-how-to-170208/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/08/esp8266-how-to-170208/</id>
    <published>2017-02-08T03:42:39.000Z</published>
    <updated>2017-02-17T13:51:52.261Z</updated>
    
    <content type="html"><![CDATA[<p>ESP8266(ESP-WROOM-02)をArduinoとして使う方法<br>Arduino core for ESP8266 の基本的な使い方</p>
<h1 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h1><ul>
<li><a href="#はじめに">はじめに</a><ul>
<li><a href="#配線と起動モード">配線と起動モード</a></li>
</ul>
</li>
<li><a href="#機能解説">機能解説</a><ul>
<li><a href="#デジタル-IO">デジタル IO</a><ul>
<li><a href="#デジタル出力">デジタル出力</a></li>
<li><a href="#デジタル入力">デジタル入力</a></li>
</ul>
</li>
<li><a href="#アナログ出力">アナログ出力</a></li>
<li><a href="#アナログ入力">アナログ入力</a></li>
<li><a href="#タイミングと遅延">タイミングと遅延</a></li>
<li><a href="#シリアル通信">シリアル通信</a></li>
</ul>
</li>
<li><a href="#GPIO-pin-まとめ">GPIO pin まとめ</a></li>
<li><a href="#参考">参考</a></li>
</ul>
<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><ul>
<li><p><a href="https://github.com/esp8266/Arduino/blob/master/doc/reference.md" target="_blank" rel="external">Arduino core for ESP8266 | reference</a>を参照しています</p>
</li>
<li><p><a href="http://amzn.to/2lEjWZf" target="_blank" rel="external">ESPr Developer(ESP-WROOM-02開発ボード)</a>を使用しています</p>
</li>
</ul>
<h2 id="配線と起動モード"><a href="#配線と起動モード" class="headerlink" title="配線と起動モード"></a>配線と起動モード</h2><ul>
<li><h4 id="実行モードflash-boot-mode"><a href="#実行モード-Flash-Boot-Mode" class="headerlink" title="実行モード(Flash Boot Mode)"></a>実行モード(Flash Boot Mode)</h4>  書き込んだプログラムで起動します</li>
<li><h4 id="書き込みモードuart-download-mode"><a href="#書き込みモード-UART-Download-Mode" class="headerlink" title="書き込みモード(UART Download Mode)"></a>書き込みモード(UART Download Mode)</h4>  プログラムが書き込めるようになります</li>
</ul>
<p>IO0 pinを<br>HIGH でリセット → 実行モード<br>LOW でリセット → 書き込みモード<br>になります</p>
<table>
<thead>
<tr>
<th>GPIO</th>
<th>pinの名前</th>
<th>実行モード</th>
<th>書き込みモード</th>
</tr>
</thead>
<tbody>
<tr>
<td>GPIO0</td>
<td>IO0</td>
<td>HIGH</td>
<td>LOW</td>
</tr>
<tr>
<td>GPIO2</td>
<td>IO2</td>
<td>HIGH</td>
<td>HIGH</td>
</tr>
<tr>
<td>GPIO15</td>
<td>IO15</td>
<td>LOW</td>
<td>LOW</td>
</tr>
</tbody>
</table>
<h1 id="機能解説"><a href="#機能解説" class="headerlink" title="機能解説"></a>機能解説</h1><h2 id="デジタル-io"><a href="#デジタル-IO" class="headerlink" title="デジタル IO"></a>デジタル IO</h2><ul>
<li>GPIO 0〜15 → <code>INPUT</code>、<code>OUTPUT</code>、<code>INPUT_PULLUP</code><br>  ※ただし、GPIO 6〜11はGPIOとして使用不可(↓参照)</li>
<li>GPIO 16 → <code>INPUT</code>、<code>OUTPUT</code>、<code>INPUT_PULLDOWN_16</code></li>
<li>ピン割り込みの使用 → GPIO 0〜15 <code>attachInterrupt</code>、<code>detachInterrupt</code>関数</li>
</ul>
<blockquote>
<p>デジタルピン0〜15は、INPUT、OUTPUT、INPUT_PULLUPのいずれかです。ピン16はINPUT、OUTPUT、INPUT_PULLDOWN_16のいずれかです。起動時に、ピンはINPUTとして設定されます。</p>
<p>デジタルピン6-11は、ほとんどのモジュール上のフラッシュメモリチップを接続するために使用されているため、この図には示されていません。 IOとしてこれらのピンを使用しようとすると、プログラムがクラッシュする可能性があります。</p>
<p>ピン割り込みは、attachInterrupt、detachInterrupt関数でサポートされています。割り込みは、GPIO16を除く任意のGPIOピンに接続できます。</p>
</blockquote>
<h3 id="デジタル出力"><a href="#デジタル出力" class="headerlink" title="デジタル出力"></a>デジタル出力</h3><p>IO13のLEDを点滅</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LED 13</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</div><div class="line">  pinMode(LED, OUTPUT);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">  digitalWrite(LED, HIGH);</div><div class="line">  delay(<span class="number">1000</span>);</div><div class="line">  digitalWrite(LED, LOW);</div><div class="line">  delay(<span class="number">1000</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1Y0x4Z-bRbGAJpTvv3jTW5rOk8YlKO3TjOA" alt=""></p>
<h3 id="デジタル入力"><a href="#デジタル入力" class="headerlink" title="デジタル入力"></a>デジタル入力</h3><p>IO2のスイッチを押している間、IO13のLEDが点灯</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LED 13</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SWITCH 2</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</div><div class="line">  pinMode(LED, OUTPUT);</div><div class="line">  pinMode(SWITCH, INPUT);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (digitalRead(SWITCH) == LOW) &#123;</div><div class="line">    digitalWrite(LED, HIGH);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    digitalWrite(LED, LOW);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://drive.google.com/uc?export=view&amp;id=172h7FxufZfRwncPaOKtZCJ5zmTPgzyUiZw" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1nMXCtPlT8RvrcnJltpb9-gxVlUfqe4D4cw" alt=""></p>
<h2 id="アナログ出力"><a href="#アナログ出力" class="headerlink" title="アナログ出力"></a>アナログ出力</h2><ul>
<li>GPIO 0〜16で使用可 (※GPIO 6〜11を除く)</li>
<li><code>analogWrite(pin, value)</code>でON<br>  value → <code>0～1023</code></li>
<li><code>analogWrite(pin, 0)</code>でOFF</li>
</ul>
<blockquote>
<p>analogWrite（pin、value）指定されたピンでソフトウェアPWMをイネーブルにします。 PWMはピン0〜16で使用できます。ピンのPWMをディセーブルにするには、analogWrite（pin、0）を呼び出します。 値は0からPWMRANGEまでの範囲で指定できます。デフォルトは1023です。</p>
</blockquote>
<p>IO13のLEDが徐々に明るくなるサンプルコード</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LED 13</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</div><div class="line">  pinMode(LED, OUTPUT);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;  i &lt; <span class="number">1023</span>;  i++)  &#123;</div><div class="line">    analogWrite(LED, i);</div><div class="line">    delay(<span class="number">3</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1bgkwn-lf43CNOeIShD_07Ie1bV0BK8IjIg" alt=""></p>
<h2 id="アナログ入力"><a href="#アナログ入力" class="headerlink" title="アナログ入力"></a>アナログ入力</h2><p><code>analogRead(A0)</code>で読み取り</p>
<p>※<code>ADC_MODE(ADC_VCC);</code>を関数の外に定義で、電源電圧の読み取り</p>
<ul>
<li>入力電圧範囲は0〜1.0V</li>
</ul>
<blockquote>
<p>　ADCピンに印加される外部電圧を読み取るには、analogRead（A0）を使用します。 入力電圧範囲は0〜1.0Vです。</p>
</blockquote>
<p>TOUT(A0)のAD変換値を読み取る</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> value;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</div><div class="line">  Serial.begin(<span class="number">115200</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">  value = analogRead(A0);</div><div class="line">  Serial.println(value);</div><div class="line">  delay(<span class="number">100</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>0～1023が得られるはずですが、<br>以下のようにつなげて読み取った所、<code>6～1024</code>という値が得られました</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1M6AGBwaMPKY0BM0WSEYWT2xoXCkKPPbiEQ" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1miNvToHkI67tG4Dzjz4kVIqUOfo2N4edHw" alt=""></p>
<h2 id="タイミングと遅延"><a href="#タイミングと遅延" class="headerlink" title="タイミングと遅延"></a>タイミングと遅延</h2><ul>
<li><h4 id="リセット後の経過時間取得"><a href="#リセット後の経過時間取得" class="headerlink" title="リセット後の経過時間取得"></a>リセット後の経過時間取得</h4><ul>
<li>ミリ秒 → <code>millis()</code></li>
<li>マイクロ秒 → <code>micros()</code></li>
</ul>
</li>
<li><h4 id="遅延"><a href="#遅延" class="headerlink" title="遅延"></a>遅延</h4><ul>
<li>ミリ秒 → <code>delay()</code></li>
<li>マイクロ秒 → <code>delayMicroseconds()</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>millis()およびmicros()は、それぞれリセット後に経過したミリ秒数およびマイクロ秒数を返します。</p>
<p>delay(ms)は、指定したミリ秒間スケッチを一時停止し、WiFiおよびTCP / IPタスクを実行できるようにします。 delayMicroseconds(us)は、指定されたマイクロ秒数で一時停止します。</p>
</blockquote>
<h2 id="シリアル通信"><a href="#シリアル通信" class="headerlink" title="シリアル通信"></a>シリアル通信</h2><ul>
<li><code>Serial.begin()</code>をsetup関数に定義</li>
<li><code>Serial.swap()</code>で使用するピンの組み合わせを変更<br>  GPIO1(TX) &amp; GPIO3(RX) ↔ GPIO15(TX) &amp; GPIO13(RX)</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">選択</th>
<th style="text-align:left">TX</th>
<th style="text-align:left">RX</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">default</td>
<td style="text-align:left">GPIO1(TXD)</td>
<td style="text-align:left">GPIO3(RXD)</td>
</tr>
<tr>
<td style="text-align:left"><code>Serial.swap()</code>で変更</td>
<td style="text-align:left">GPIO15(IO15)</td>
<td style="text-align:left">GPIO13(IO13)</td>
</tr>
</tbody>
</table>
<p>※GPIO(pin Name)</p>
<blockquote>
<p>シリアルはUART 0を使用し、GPIO 1（TX）ピンとGPIO 3（RX）ピンにマッピングされます。 Serial.beginの後にSerial.swap（）を呼び出すことで、SerialはGPIO 15（TX）とGPIO 13（RX）を再マッピングできます。スワップを再度呼び出すと、UART 0がGPIO 1とGPIO 3にマップされます。</p>
</blockquote>
<h1 id="gpio-pin-まとめ"><a href="#GPIO-pin-まとめ" class="headerlink" title="GPIO pin まとめ"></a>GPIO pin まとめ</h1><table>
<thead>
<tr>
<th style="text-align:center">GPIO</th>
<th style="text-align:center">pinの名前</th>
<th style="text-align:center">デジタル出力</th>
<th style="text-align:center">デジタル入力</th>
<th style="text-align:center">アナログ出力</th>
<th style="text-align:center">アナログ入力</th>
<th style="text-align:center">備考</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">GPIO0</td>
<td style="text-align:center">IO0</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">-</td>
<td style="text-align:center">起動時に使用</td>
</tr>
<tr>
<td style="text-align:center">GPIO1</td>
<td style="text-align:center">TXD</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">-</td>
<td style="text-align:center">書き込みに使用</td>
</tr>
<tr>
<td style="text-align:center">GPIO2</td>
<td style="text-align:center">IO2</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">-</td>
<td style="text-align:center">起動時に使用</td>
</tr>
<tr>
<td style="text-align:center">GPIO3</td>
<td style="text-align:center">RXD</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">-</td>
<td style="text-align:center">書き込みに使用</td>
</tr>
<tr>
<td style="text-align:center">GPIO4</td>
<td style="text-align:center">IO4</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">GPIO5</td>
<td style="text-align:center">IO5</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">GPIO12</td>
<td style="text-align:center">IO12</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">GPIO13</td>
<td style="text-align:center">IO13</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">GPIO14</td>
<td style="text-align:center">IO14</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">GPIO15</td>
<td style="text-align:center">IO15</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">-</td>
<td style="text-align:center">起動時に使用</td>
</tr>
<tr>
<td style="text-align:center">GPIO16</td>
<td style="text-align:center">IO16</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">〇　※1</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">A0</td>
<td style="text-align:center">TOUT</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">〇</td>
<td style="text-align:center">-</td>
</tr>
</tbody>
</table>
<p>※1 割り込みは不可</p>
<p><a href="http://espressif.com/sites/default/files/documentation/0c-esp-wroom-02_datasheet_en.pdf" target="_blank" rel="external">ESP-WROOM-02 | データシート</a></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1tykDSLkOUx1Kgq_c4WM1rTm5EgQhXxeptg" alt=""></p>
<p><a href="https://github.com/esp8266/Arduino/blob/master/doc/reference.md" target="_blank" rel="external">Arduino core for ESP8266 | reference</a>の図</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1-KxudMe01oMkKl6-T2R4UOabkNKCkReGJQ" alt=""></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://espressif.com/sites/default/files/documentation/0c-esp-wroom-02_datasheet_en.pdf" target="_blank" rel="external">ESP-WROOM-02 | データシート</a><br><a href="https://github.com/esp8266/Arduino#documentation" target="_blank" rel="external">Arduino core for ESP8266 | Documentation</a><br><a href="http://qiita.com/umi_kappa/items/ac3d37db44a2dcfe71fd" target="_blank" rel="external">ESP-WROOM-02 Arduino互換ボードのGPIOはこうやって使う</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ESP8266(ESP-WROOM-02)をArduinoとして使う方法&lt;br&gt;Arduino core for ESP8266 の基本的な使い方&lt;/p&gt;
&lt;h1 id=&quot;目次&quot;&gt;&lt;a href=&quot;#目次&quot; class=&quot;headerlink&quot; title=&quot;目次&quot;&gt;&lt;/a
    
    </summary>
    
      <category term="ESP8266" scheme="https://keijirotanabe.github.io/blog/categories/ESP8266/"/>
    
    
      <category term="Arduino" scheme="https://keijirotanabe.github.io/blog/tags/Arduino/"/>
    
      <category term="ESP8266" scheme="https://keijirotanabe.github.io/blog/tags/ESP8266/"/>
    
      <category term="ESP-WROOM-02" scheme="https://keijirotanabe.github.io/blog/tags/ESP-WROOM-02/"/>
    
  </entry>
  
  <entry>
    <title>ESP8266にArduinoスケッチを書き込む</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/07/esp8266-Arduino-170207/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/07/esp8266-Arduino-170207/</id>
    <published>2017-02-07T06:45:56.000Z</published>
    <updated>2017-02-17T13:46:43.921Z</updated>
    
    <content type="html"><![CDATA[<p>ESP8266(ESP-WROOM-02)にArduinoのスケッチを書き込み、<br>シリアルモニタに「Hello World」と表示させるまで</p>
<h1 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h1><ul>
<li><a href="#必要なもの">必要なもの</a></li>
<li><a href="#手順">手順</a><ul>
<li><a href="#ESP8266-core-for-Arduino-のインストール">ESP8266 core for Arduino のインストール</a></li>
<li><a href="#ボードの設定">ボードの設定</a></li>
<li><a href="#スケッチを書き込む">スケッチを書き込む</a></li>
</ul>
</li>
<li><a href="#参考">参考</a></li>
</ul>
<h1 id="必要なもの"><a href="#必要なもの" class="headerlink" title="必要なもの"></a>必要なもの</h1><ul>
<li><p>Arduino IDE<br>  ダウンロードページ<br>  <a href="https://www.arduino.cc/en/Main/Software" target="_blank" rel="external">https://www.arduino.cc/en/Main/Software</a><br>  バージョン 1.8.1　(2017/02/07時点)<br>  <a href="/blog/2017/02/07/Arduino-install-step-070207/" title="Arduino IDEのインストール">Arduino IDEのインストール</a>を参考<br>  推奨版は<code>バージョン 1.6.8</code>ですが<code>最新版バージョン 1.8.1</code>(2017/02/07時点)でも動作しました</p>
</li>
<li><p>ESP8266 core for Arduino<br>  <a href="https://github.com/esp8266/Arduino" target="_blank" rel="external">https://github.com/esp8266/Arduino</a><br>  <code>Stable version 2.3.0</code> 使用</p>
</li>
<li><p>ESP8266(ESP-WROOM-02)<br>  ここでは<a href="http://amzn.to/2lEjWZf" target="_blank" rel="external">ESPr Developer(ESP-WROOM-02開発ボード)</a>を使用しています<br>  MicroUSBを挿すだけで使えるので便利です</p>
</li>
</ul>
<h1 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h1><h2 id="esp8266-core-for-arduino-のインストール"><a href="#ESP8266-core-for-Arduino-のインストール" class="headerlink" title="ESP8266 core for Arduino のインストール"></a>ESP8266 core for Arduino のインストール</h2><p>ESP8266 core for Arduino には</p>
<ul>
<li>「Stable version」</li>
<li>「Staging version」<br>がありますが、今回は「Stable version」（安定版）をインストールします</li>
</ul>
<p><a href="https://github.com/esp8266/Arduino" target="_blank" rel="external">https://github.com/esp8266/Arduino</a> から画像の範囲をコピーします</p>
<p>めんどくさい人は<br><code>http://arduino.esp8266.com/stable/package_esp8266com_index.json</code>をコピー</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1Pzwit37rYstlEuRi63gFlt3IkYphx_qNAg" alt=""></p>
<p><code>ファイル &gt; 環境設定</code>を開いて<br>画像の範囲に<code>貼り付け（Ctrl + V）</code> → <code>OK</code></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1OiDN092PnLLiIQOrnGH_uTlR7RoxjLfEgQ" alt=""></p>
<p><code>ツール &gt; ボード &gt; ボードマネージャ</code></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1TGuZOE6YlLgvC9cBZwXVe4VSVi6uwk-EOw" alt=""></p>
<p><code>esp8266</code>で検索 → <code>インストール</code></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1w79HPaa3pTVgSRrFk_iT6ML3jJ8zTgmKzA" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=11z7iZ_UBx9sfgVLRCYnz1hc3_4QkT3LOmg" alt=""></p>
<p>完了したので<code>閉じる</code><br><img src="https://drive.google.com/uc?export=view&amp;id=1QqcPLRXzBT_SjKb43hQ6n-psnt0KHEEFBw" alt=""></p>
<p><code>Stable version 2.3.0</code>がインストールされました</p>
<h2 id="ボードの設定"><a href="#ボードの設定" class="headerlink" title="ボードの設定"></a>ボードの設定</h2><p><code>ツール &gt; ボード &gt; Generic ESP8266 Module</code>を選択</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1Nzxgj59uGrEqPmqMkxoMfT8c8bOI6lEk_A" alt=""></p>
<p>初期設定</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1HqQzfIkniPNEEdh1BgzFm-BSdhpnd6O-Yg" alt=""></p>
<p>画像の範囲を変更<br>※ シリアルポートは各自選択してください</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1mcOR3MI2NuO2qMk2IssfkCpUOrzvkI37dA" alt=""></p>
<h2 id="スケッチを書き込む"><a href="#スケッチを書き込む" class="headerlink" title="スケッチを書き込む"></a>スケッチを書き込む</h2><p><strong>書き込みモードで起動します</strong></p>
<p>IO0がLOWの状態でリセットすれば、書き込みモードで起動します。</p>
<p>※ 　↑の画像で<code>Reset Method: nodemcu</code>を選択すれば、次回から書き込みモードで起動する必要はありません</p>
<p><a href="https://www.switch-science.com/catalog/2500/" target="_blank" rel="external">https://www.switch-science.com/catalog/2500/</a>を参考に</p>
<blockquote>
<p>IO0がHIGHの状態でリセットされるとファームウェアの実行モードで起動しますが、IO0がLOWの状態でリセットされるとファームウェアの書き込みモードで起動します。</p>
</blockquote>
<p>以下のプログラムを書いて書き込みます</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">void setup() &#123;</div><div class="line">  Serial.begin(115200);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void loop() &#123;</div><div class="line">  Serial.println(&quot;Hello World&quot;);</div><div class="line">  delay(1000);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>書き込みボタンを押す</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1V8b5Ga0KeWhjIyQTElQMuOR6mNtQ-fuG_A" alt=""></p>
<p>ファイルを保存するか聞かれたので<br><code>helloworld</code>にして<code>保存</code></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1MoMGqABdLmlRS48nvYaUZuqqh2fdVlakmA" alt=""></p>
<p>書き込み完了</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=19CCSdLZcLryG7xjKnRlJtcDFDieH_97arg" alt=""></p>
<p>右上のアイコンを押す → シリアルモニタ起動<br><code>CRおよびLF</code>、<code>115200 bps</code>に設定</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1ne5ZzScrpjsBzlgzXcsMSxznUeQoB2WctQ" alt=""></p>
<p>「Hello World」と表示されれば上手くいきました</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://trac.switch-science.com/wiki/esp_dev_arduino_ide" target="_blank" rel="external">ESP-WROOM-02開発ボードをArduino IDEで開発する方法</a></li>
<li><a href="https://www.mgo-tec.com/blog-entry-ss-wroom-howto01.html" target="_blank" rel="external">ESPr Developer ( ESP-WROOM-02 開発ボード )の使い方をザッと紹介</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ESP8266(ESP-WROOM-02)にArduinoのスケッチを書き込み、&lt;br&gt;シリアルモニタに「Hello World」と表示させるまで&lt;/p&gt;
&lt;h1 id=&quot;目次&quot;&gt;&lt;a href=&quot;#目次&quot; class=&quot;headerlink&quot; title=&quot;目次&quot;&gt;&lt;/a
    
    </summary>
    
      <category term="ESP8266" scheme="https://keijirotanabe.github.io/blog/categories/ESP8266/"/>
    
    
      <category term="Arduino" scheme="https://keijirotanabe.github.io/blog/tags/Arduino/"/>
    
      <category term="ESP8266" scheme="https://keijirotanabe.github.io/blog/tags/ESP8266/"/>
    
      <category term="ESP-WROOM-02" scheme="https://keijirotanabe.github.io/blog/tags/ESP-WROOM-02/"/>
    
  </entry>
  
  <entry>
    <title>プログラミング用フォントRictyDiminishedをインストール</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/07/RictyDiminished/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/07/RictyDiminished/</id>
    <published>2017-02-07T01:16:00.000Z</published>
    <updated>2017-02-17T13:34:31.530Z</updated>
    
    <content type="html"><![CDATA[<p>見やすいプログラミング用フォントのRictyDiminishedをWindowsにインストール</p>
<h1 id="rictydiminished"><a href="#RictyDiminished" class="headerlink" title="RictyDiminished"></a>RictyDiminished</h1><p>ダウンロードページ<br><a href="https://github.com/edihbrandon/RictyDiminished" target="_blank" rel="external">https://github.com/edihbrandon/RictyDiminished</a></p>
<p><code>Download ZIP</code>を押す</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1lg0WWYAXiPPDQezkaVEDiKUziaSRPeDD1Q" alt=""></p>
<p>ダウンロードしたファイルを展開します</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1on-cdzUQMApUZunBZLfu93oBnxjcavy6GA" alt=""></p>
<p>新しくエクスプローラーを立ち上げて<br><code>C:\Windows\Fonts</code>を開きます</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1DHvQ3zfMobnd_ks9NOsplOE6IBBqn0omKA" alt=""></p>
<p>fontファイルをfontフォルダへ、以下のようにコピーします</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=19KcYLx2A7OGyTRmz0fTnuixeePPI8mF33w" alt=""></p>
<p>以上で<code>RictyDiminished</code>のインストールは完了です</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;見やすいプログラミング用フォントのRictyDiminishedをWindowsにインストール&lt;/p&gt;
&lt;h1 id=&quot;rictydiminished&quot;&gt;&lt;a href=&quot;#RictyDiminished&quot; class=&quot;headerlink&quot; title=&quot;RictyDi
    
    </summary>
    
      <category term="Font" scheme="https://keijirotanabe.github.io/blog/categories/Font/"/>
    
    
      <category term="Font" scheme="https://keijirotanabe.github.io/blog/tags/Font/"/>
    
      <category term="RictyDiminished" scheme="https://keijirotanabe.github.io/blog/tags/RictyDiminished/"/>
    
  </entry>
  
  <entry>
    <title>Arduino IDEのインストール</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/07/Arduino-install-step-070207/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/07/Arduino-install-step-070207/</id>
    <published>2017-02-07T01:15:29.000Z</published>
    <updated>2017-02-17T13:30:51.842Z</updated>
    
    <content type="html"><![CDATA[<p>Arduino IDEをインストールする手順</p>
<h1 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h1><ul>
<li><a href="#公式サイト">公式サイト</a></li>
<li><a href="#ダウンロード">ダウンロード</a></li>
<li><a href="#インストール">インストール</a></li>
<li><a href="#設定">設定</a><ul>
<li><a href="#環境設定">環境設定</a></li>
<li><a href="#起動時のウィンドウサイズを変更">起動時のウィンドウサイズを変更</a></li>
<li><a href="#フォント変更">フォント変更</a></li>
</ul>
</li>
</ul>
<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><p>Windows10 Home 64ビット</p>
<h1 id="公式サイト"><a href="#公式サイト" class="headerlink" title="公式サイト"></a>公式サイト</h1><p><a href="https://www.arduino.cc/" target="_blank" rel="external">https://www.arduino.cc/</a></p>
<h1 id="ダウンロード"><a href="#ダウンロード" class="headerlink" title="ダウンロード"></a>ダウンロード</h1><h3 id="arduino-ide-ダウンロードページ"><a href="#Arduino-IDE-ダウンロードページ" class="headerlink" title="Arduino IDE ダウンロードページ"></a>Arduino IDE ダウンロードページ</h3><p><a href="https://www.arduino.cc/en/Main/Software" target="_blank" rel="external">https://www.arduino.cc/en/Main/Software</a><br>バージョン 1.8.1　(2017/02/07時点)</p>
<p><code>Windows Installer</code> を選択<br>※ 環境に合わせて選択してください</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1HDeJmPbGo90hVrCSeWOf2OyJSdHb8l5L5g" alt=""></p>
<p>今回は寄付しないでダウンロードを選択</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1KR--988onctRpv2x_-8EpdWa4uwZfQOeFQ" alt=""></p>
<h1 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h1><p><code>arduino-1.8.1-windows.exe</code>を実行</p>
<p>なにか聞かれるので<code>はい</code>を選択する</p>
<p>以下の手順でインストール</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1j7nWpk3IcOaOUW7a0bc6W14fklIgcz-fEw" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=18HmI-1JMUDL_Iow84NJ6D7VIZl1VQ1DAaQ" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1K3h_BwG-_d-6k0oDpd3TOgwYpGA68ATQ0g" alt=""></p>
<p>途中で聞かれたらインストール<br><img src="https://drive.google.com/uc?export=view&amp;id=1QHPfJpxjYVD8GND2ZXZQ3txf-hfwGlpg4Q" alt=""></p>
<p>同じくインストール<br><img src="https://drive.google.com/uc?export=view&amp;id=13lS80uJVfuvREdk9VVGPuQx8L3yCHd_D4w" alt=""></p>
<p>終わったら<code>close</code><br><img src="https://drive.google.com/uc?export=view&amp;id=1RgTJNangGRDYmK4JfrAbG3eY95jccUgt5A" alt=""></p>
<p>起動画面</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1c8gzDNTiahKjRxr3JHWrhGPUxmiBW8XWow" alt=""></p>
<p>インストール完了</p>
<h1 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h1><p>※以降は必須ではありません</p>
<h3 id="環境設定"><a href="#環境設定" class="headerlink" title="環境設定"></a>環境設定</h3><p><code>ファイル</code> → <code>環境設定</code><br><img src="https://drive.google.com/uc?export=view&amp;id=1XGo4JUeU5j3H_L8CaOuqhhbanVp_ATYBeA" alt=""></p>
<ul>
<li>フォントサイズ: 好みの大きさ</li>
<li>行番号を表示する: ✅</li>
<li>コードの折り返しを有効に: ✅</li>
</ul>
<p>最後に<code>OK</code>を押す</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1TQBEuEm83fWT7s8VYYvgTb8BpKECPDmXDA" alt=""></p>
<h3 id="起動時のウィンドウサイズを変更"><a href="#起動時のウィンドウサイズを変更" class="headerlink" title="起動時のウィンドウサイズを変更"></a>起動時のウィンドウサイズを変更</h3><p><code>C:\Users\[ユーザー名]\AppData\Local\Arduino15</code>を押すとフォルダ<code>Arduino15</code>フォルダが開く</p>
<p><img src="https://drive.google.com/ouc?export=view&amp;?id=1BZOJ3t49-u0zuaNOmgTAtD4P4IBc1fx45Q" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1cEhH4bMEwmMXpROMoekJKMdmF-2A4FnVqw" alt=""></p>
<p>Arduino IDE を閉じる</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1CXAz08fDPgsBxWrwOW7W-6PjQsmWqFqOdQ" alt=""></p>
<p><code>Arduino15</code>フォルダの<code>preferences.txt</code>を編集</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1PvdUsSTnucgV7jGBcjgjNBbFM4QJHBZxGQ" alt=""></p>
<p>以下の箇所を変更</p>
<ul>
<li>editor.window.height.default=600</li>
<li>editor.window.width.default=500<br>(初期値)</li>
</ul>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1vPZ0qx-kThtILZYV9AbKtXJ_67paCbYtKw" alt=""></p>
<ul>
<li>editor.window.height.default=960</li>
<li>editor.window.width.default=720<br>に変更<br><code>Ctrl + S</code> で保存<br>（好みに合わせて）</li>
</ul>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1KsKtwaeSaqd0nYe9j4tdd5d5SVJSPwefKQ" alt=""></p>
<p>起動時のウィンドウサイズを変更できました</p>
<h3 id="フォント変更"><a href="#フォント変更" class="headerlink" title="フォント変更"></a>フォント変更</h3><p>フォントをRictyDiminishedに設定します</p>
<p>RictyDiminishedをインストールします<br><a href="/blog/2017/02/07/RictyDiminished/" title="プログラミング用フォントRictyDiminishedをインストール">プログラミング用フォントRictyDiminishedをインストール</a>を参考に</p>
<p><code>preferences.txt</code>を編集して</p>
<p><code>editor.font=RictyDiminished,plain,18</code>に書き換えます</p>
<p>初期設定</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1g5apo5F1Ka0DM05sSuuwgIKX87t6SQUMBQ" alt=""></p>
<p>編集後</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1BLP1QuMhDdUBXAhjhz-mGuIWyI7XCijrAw" alt=""></p>
<p>Arduino IDE を起動すると、以下のようにフォントが変わりました</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1uTWzu4jVKeM1_Dz0S4Z6T1zgp8_KDgemRA" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Arduino IDEをインストールする手順&lt;/p&gt;
&lt;h1 id=&quot;目次&quot;&gt;&lt;a href=&quot;#目次&quot; class=&quot;headerlink&quot; title=&quot;目次&quot;&gt;&lt;/a&gt;目次&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#公式サイト&quot;&gt;公式サイト&lt;/a&gt;&lt;/li&gt;
&lt;l
    
    </summary>
    
      <category term="Arduino" scheme="https://keijirotanabe.github.io/blog/categories/Arduino/"/>
    
    
      <category term="Arduino" scheme="https://keijirotanabe.github.io/blog/tags/Arduino/"/>
    
      <category term="ESP8266" scheme="https://keijirotanabe.github.io/blog/tags/ESP8266/"/>
    
  </entry>
  
  <entry>
    <title>ArduinoのESP8266をATコマンドが使えるように戻す</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/06/esp8266-at-reset-170207/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/06/esp8266-at-reset-170207/</id>
    <published>2017-02-06T17:28:52.000Z</published>
    <updated>2017-02-17T13:15:08.111Z</updated>
    
    <content type="html"><![CDATA[<p>WifiモジュールESP-WROOM-02(ESP8266)は、一度Arduinoスケッチが書き込まれるとATコマンドが使えなくなります。<br>ですが、正規のファームウェア書き直すことで、再びATコマンドが使えるようになります。</p>
<h1 id="必要なもの"><a href="#必要なもの" class="headerlink" title="必要なもの"></a>必要なもの</h1><p><strong>書き込む中身</strong><br><a href="http://www.espressif.com/en/support/download/sdks-demos" target="_blank" rel="external">ファームウェア</a>から<br><a href="http://www.espressif.com/sites/default/files/sdks/esp8266_nonos_sdk_v2.0.0_16_08_10.zip" target="_blank" rel="external">ESP8266 NONOS SDK V2.0.0 20160810</a>をダウンロードします</p>
<p><strong>書き込みに使うツール</strong><br><a href="http://www.espressif.com/en/support/download/other-tools" target="_blank" rel="external">Flash Download Tools</a>の中から<br>Windows環境は<br><a href="http://www.espressif.com/sites/default/files/tools/flash_download_tools_v3.4.4.zip" target="_blank" rel="external">Flash Download Tools V3.4.4 (ESP8266 &amp; ESP32)</a>をダウンロードします</p>
<p><strong>書き込み先(ESP8266)</strong><br>この記事では<a href="http://amzn.to/2lEjWZf" target="_blank" rel="external">ESPr Developer(ESP-WROOM-02開発ボード)</a>を使用しています</p>
<h1 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h1><p><code>ESP8266 NONOS SDK V2.0.0 20160810</code>を解凍し、以下のファイルを使用します</p>
<ul>
<li><code>blank.bin</code></li>
<li><code>esp_init_data_default.bin</code></li>
<li><code>boot_v1.6.bin</code></li>
<li><code>user1.2048.new.5.bin</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">esp8266_nonos_sdk_v2.0.0_16_08_10</div><div class="line">    |</div><div class="line">    +-- ESP8266_NONOS_SDK</div><div class="line">          |</div><div class="line">          +-- bin</div><div class="line">               |</div><div class="line">               +-- blank.bin</div><div class="line">               |</div><div class="line">               +-- boot_v1.6.bin</div><div class="line">               |</div><div class="line">               +-- esp_init_data_default.bin</div><div class="line">               |</div><div class="line">               +-- at</div><div class="line">                    |</div><div class="line">                    +-- 1024+1024</div><div class="line">                          |</div><div class="line">                          +-- user1.2048.new.5.bin</div></pre></td></tr></table></figure>
<p><strong>Flash Download Tools を起動します</strong></p>
<p><code>ESPFlashDownloadTool_v3.4.4.exe</code>を起動</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">flash_download_tools_v3.4.4</div><div class="line">    |</div><div class="line">    +--- FLASH_DOWNLOAD_TOOLS_V3.4.4</div><div class="line">            |</div><div class="line">            +--- ESPFlashDownloadTool_v3.4.4.exe</div></pre></td></tr></table></figure>
<p><code>ESP8266 DownloadTool</code>を選択<br><img src="https://drive.google.com/uc?export=view&amp;id=1ZR2YW45jrXRIZKzsZ5TMFvK7wpFjomxpKg" alt=""></p>
<p>起動画面<br><img src="https://drive.google.com/uc?export=view&amp;id=1o7CB7-pifJxs_ly8K7cShUFJ0mKxdBL6_A" alt=""></p>
<p><a href="http://www.espressif.com/en/support/download/documents" target="_blank" rel="external">ドキュメント</a>の中から<br><a href="http://www.espressif.com/sites/default/files/documentation/4a-esp8266_at_instruction_set_en.pdf" target="_blank" rel="external">ESP8266 AT Instruction Set</a>を参考にします</p>
<p>前述したファイルを以下のアドレスに書き込みます</p>
<table>
<thead>
<tr>
<th>ファイル名</th>
<th style="text-align:left">アドレス</th>
</tr>
</thead>
<tbody>
<tr>
<td>blank.bin</td>
<td style="text-align:left">0x3FB000</td>
</tr>
<tr>
<td>esp_init_data_default.bin</td>
<td style="text-align:left">0x3FC000</td>
</tr>
<tr>
<td>blank.bin</td>
<td style="text-align:left">0xFE000</td>
</tr>
<tr>
<td>blank.bin</td>
<td style="text-align:left">0x3FE000</td>
</tr>
<tr>
<td>boot_v1.6.bin</td>
<td style="text-align:left">0x00000</td>
</tr>
<tr>
<td>user1.2048.new.5.bin</td>
<td style="text-align:left">0x01000</td>
</tr>
</tbody>
</table>
<p>以下の箇所を選択してください</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1oWAtWkNHt0pwV7YTljdkcHL53DCL3jijGQ" alt=""></p>
<ul>
<li>CrystalFreq: 26M</li>
<li>SPI SPEED: 40Mhz</li>
<li>SPI MODE: QIO</li>
<li>FLASH SIZE: 32Mbit-C1</li>
<li>COM: [各自変更]</li>
<li>BAUD: 230400</li>
</ul>
<p><strong>書き込みモードで起動</strong></p>
<p>IO0がLOWの状態でリセットすれば、書き込みモードで起動します。</p>
<p><a href="https://www.switch-science.com/catalog/2500/" target="_blank" rel="external">https://www.switch-science.com/catalog/2500/</a>を参考に</p>
<blockquote>
<p>IO0がHIGHの状態でリセットされるとファームウェアの実行モードで起動しますが、IO0がLOWの状態でリセットされるとファームウェアの書き込みモードで起動します。</p>
</blockquote>
<h2 id="書き込む"><a href="#書き込む" class="headerlink" title="書き込む"></a>書き込む</h2><p><code>START</code>を押します</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1s9J3X3ea8E6aS8zjYjBfwDl0AxtqLAc4Ng" alt=""></p>
<p>完了</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1flBnSZtUpe2S6EPbdi6ACNQYuL5xjnPWBg" alt=""></p>
<h2 id="確認"><a href="#確認" class="headerlink" title="確認"></a>確認</h2><p>以下のように変更<br><img src="https://drive.google.com/uc?export=view&amp;id=1gcWS3g67ANvGgXpXzktl2cQlTLSi9lJJwg" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1dLpKi_stsNFa61lef56XOoW7YR4m2xCp_g" alt=""></p>
<p><strong>実行モードで起動するために、IO0がHIGHの状態でリセットします</strong></p>
<p><code>redy</code>と帰ってきたら<code>AT</code>と入力してEnterを押して下さい</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1FMurZk5iV7NsQhGXh4ivFK0sHRT4VOHsGQ" alt=""></p>
<p><code>OK</code>が帰ればATコマンドが使えるようになります</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WifiモジュールESP-WROOM-02(ESP8266)は、一度Arduinoスケッチが書き込まれるとATコマンドが使えなくなります。&lt;br&gt;ですが、正規のファームウェア書き直すことで、再びATコマンドが使えるようになります。&lt;/p&gt;
&lt;h1 id=&quot;必要なもの&quot;&gt;&lt;a
    
    </summary>
    
      <category term="ESP8266" scheme="https://keijirotanabe.github.io/blog/categories/ESP8266/"/>
    
    
      <category term="ESP8266" scheme="https://keijirotanabe.github.io/blog/tags/ESP8266/"/>
    
      <category term="WiFi" scheme="https://keijirotanabe.github.io/blog/tags/WiFi/"/>
    
      <category term="ESP-WROOM-02" scheme="https://keijirotanabe.github.io/blog/tags/ESP-WROOM-02/"/>
    
  </entry>
  
</feed>
