<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blog</title>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://keijirotanabe.github.io/blog/"/>
  <updated>2017-03-06T08:23:08.302Z</updated>
  <id>https://keijirotanabe.github.io/blog/</id>
  
  <author>
    <name>田邊 慶次朗</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OneBitLoaderでソフトウェアシリアルを使用した書き込みの際に使うピンを変更</title>
    <link href="https://keijirotanabe.github.io/blog/2017/03/05/one-bit-loader-change-pin-170306/"/>
    <id>https://keijirotanabe.github.io/blog/2017/03/05/one-bit-loader-change-pin-170306/</id>
    <published>2017-03-05T23:21:20.000Z</published>
    <updated>2017-03-06T08:23:08.302Z</updated>
    
    <content type="html"><![CDATA[<p>skyriverさん制作の「OneBitLoader」で、ソフトウェア通信を使用した書き込みの際、使用するピンを変更する手順をまとめました。<br>使用するPICは「PIC16F88」で、デフォルトでは「RA7」が使用されています。<br>この記事では、仮に「RB5」に変更したい、という前提で説明して行きます。</p>
<a id="more"></a>
<h1 id="cc5xとmplab-ide-v892のインストール"><a href="#「CC5X」と「MPLAB-IDE-v8-92」のインストール" class="headerlink" title="「CC5X」と「MPLAB IDE v8.92」のインストール"></a>「CC5X」と「MPLAB IDE v8.92」のインストール</h1><p>詳しくは以下を参照してください。<br>→ <a href="/blog/2017/03/05/cc5x-mplab-8-install-170306/" title="無料のCコンパイラCC5XをMPLAB IDE v8.92で使用する為の手順">無料のCコンパイラCC5XをMPLAB IDE v8.92で使用する為の手順</a></p>
<h2 id="cc5xのインストール"><a href="#CC5Xのインストール" class="headerlink" title="CC5Xのインストール"></a>CC5Xのインストール</h2><p>ダウウンロードした「cc5xfree」を「C:\Program Files」に置くだけです。</p>
<p><strong>CC5X のダウウンロード</strong><br>→ <a href="http://www.bknd.com/cc5x/downl-prof.html" target="_blank" rel="external">CC5X Free Edition</a></p>
<p>「cc5xfree.zip」を選択します。<br><img src="https://drive.google.com/uc?export=view&amp;id=14g0XNF4N4fOkY7StKtxXZJvMqJJRC6hvBg" alt=""></p>
<h2 id="mplab-ide-v892-のインストール"><a href="#MPLAB-IDE-v8-92-のインストール" class="headerlink" title="MPLAB IDE v8.92 のインストール"></a>MPLAB IDE v8.92 のインストール</h2><p><strong>MPLAB IDE v8.92 のダウンロード</strong><br>→ <a href="http://www.microchip.com/development-tools/downloads-archive" target="_blank" rel="external">MPLAB IDE Archives</a></p>
<p>「MPLAB IDE v8.92」を選択します。<br><img src="https://drive.google.com//uc?export=view&amp;id=1ODUsaq6E_a9QzP-URShnULsvZk_tyxQcuQ" alt=""></p>
<h1 id="onebitloaderのダウンロード"><a href="#「OneBitLoader」のダウンロード" class="headerlink" title="「OneBitLoader」のダウンロード"></a>「OneBitLoader」のダウンロード</h1><p>2008/12/07    Ver0.05b を使用します。</p>
<p><a href="http://www.netlaputa.ne.jp/~T-Satoh/pic/picOneBitLoader.html" target="_blank" rel="external">ブートローダ（OneBitLoader）の製作</a><br><a href="http://www.netlaputa.ne.jp/~T-Satoh/pic/picOneBitLoader.html" target="_blank" rel="external"><img src="https://drive.google.com/uc?export=view&amp;id=1g_wf0lCD1aNtb0tOZiPsK-1H2GPQ_RQ53w" alt=""></a></p>
<p>ダウンロードしたファイルを展開します。<br><img src="https://drive.google.com/uc?export=view&amp;id=1uAkJcNL8YPkyLAnWg_PfPF48LpJUOhdP8A" alt=""></p>
<p>展開したファイルにある「<code>OneBitLoader20081207XP</code>」をデスクトップに移動します。<br><img src="https://drive.google.com/uc?export=view&amp;id=1hjhaan2U-vB7tFzt3VrkEeEnOg06IGnH_w" alt=""></p>
<h1 id="mplab-ide-の設定"><a href="#MPLAB-IDE-の設定" class="headerlink" title="MPLAB IDE の設定"></a>MPLAB IDE の設定</h1><p>「Project &gt; Project Wizard…」を押します。<br><img src="https://drive.google.com/uc?export=view&amp;id=1oBbzqiAJ_1JIBYT1P49WlPx72uK4-_bY3Q" alt=""></p>
<p>「次へ」をを押します。<br><img src="https://drive.google.com/uc?export=view&amp;id=1a1dAI-TsI6Qu79xh2Ywz3n2C52zrQyL_xA" alt=""></p>
<p>「PIC16F88」を選択し、「次へ」を押します。<br><img src="https://drive.google.com/uc?export=view&amp;id=1cgDQx20m-yXKzHZadX9xHNJZm9bdxJ5_Jg" alt=""></p>
<p>「B Knudsen Data CC5X」を選択します。<br><img src="https://drive.google.com/uc?export=view&amp;id=1MNm1L12V8Wi9XZaH-3a-6GWJIJ-wZ1k9yQ" alt=""></p>
<p>「CC5X C Compiler」 を選択した状態で　「Browse…」 から、<br>「<code>C:\Program Files\cc5xfree\CC5X.EXE</code>」　を選択します。<br><img src="https://drive.google.com/uc?export=view&amp;id=1LlFKFKOYcMeYbiGIV91bSluqvp6lLRtepg" alt=""></p>
<p>「MPASM」 を選択した状態で　「Browse…」 から、<br>「<code>C:\Program Files (x86)\Microchip\MPASM Suite\MPASMWIN.exe</code>」　を選択します。<br><img src="https://drive.google.com/uc?export=view&amp;id=1eTsYH97wFzuA_SbcKoeT24FnJVqtWWIvkA" alt=""></p>
<p>「MPLINK」 を選択した状態で　「Browse…」 から、<br>「<code>C:\Program Files (x86)\Microchip\MPASM Suite\mplink.exe</code>」　を選択し、「次へ」 を押します。<br><img src="https://drive.google.com/uc?export=view&amp;id=1noVo4ldcrta4ZLvHhN4T4p-9mES3skHVRQ" alt=""></p>
<p>「Browse…」を押します。<br><img src="https://drive.google.com/uc?export=view&amp;id=1NpTL4A8LYrcLiCnA9AB7wKl9Sno_fPeNQw" alt=""></p>
<p>「<code>C:\Users\User\Desktop\OneBitLoader20081207XP\src</code>」を選択します。<br><img src="https://drive.google.com/uc?export=view&amp;id=15Pfr3rJzVTNF1_j_G0x8utieSm3JaccNrQ" alt=""></p>
<p>ファイル名を決めます。<br>ここでは、「project」とし、「保存」を押します。<br><img src="https://drive.google.com/uc?export=view&amp;id=1GdbP7P3XfbeC2UREVMGzXaVDuOGFtQXsmQ" alt=""></p>
<p>「次へ」を押します。<br><img src="https://drive.google.com/uc?export=view&amp;id=18UhEfCd0fHGoqHLgxm_987Rhzf6nHRcSLg" alt=""></p>
<p>プロジェクトで使用するファイルを選択しますが、「OneBitLoader.c」と「Serial.h」を使用します。<br>まずは、「OneBitLoader.c」を選択し、「Add &gt;&gt;」を押します。<br>すると、プロジェクトに「OneBitLoader.c」が追加されます。<br><img src="https://drive.google.com/uc?export=view&amp;id=1pCponxNZWJksLQ4O7pyo09CrO4lU_X4JeA" alt=""></p>
<p>同様の手順で、「Serial.h」も追加します。<br>追加できたら、「次へ」を押します。<br><img src="https://drive.google.com/uc?export=view&amp;id=1KTVkhfGe-1ow_SLZ0uF-B6NPp1OrMuivDQ" alt=""></p>
<p>「完了」を押します。<br><img src="https://drive.google.com/uc?export=view&amp;id=1SE-yXUTTI8vgoR2YN97lt6l50GEBEdujFA" alt=""></p>
<p>「project.mcp」というプロジェクト内に「OneBitLoader.c」と「Serial.h」が追加されているのが確認できます。<br><img src="https://drive.google.com/uc?export=view&amp;id=1C7T6UQNg-qrNOS5uWZOCAjYvlirn9yQOUA" alt=""></p>
<h1 id="ソースファイルを変更する"><a href="#ソースファイルを変更する" class="headerlink" title="ソースファイルを変更する"></a>ソースファイルを変更する</h1><h2 id="serialhの編集"><a href="#「Serial-h」の編集" class="headerlink" title="「Serial.h」の編集"></a>「Serial.h」の編集</h2><p>「Serial.h」を開き、赤枠の部分を編集します。<br><img src="https://drive.google.com/uc?export=view&amp;id=1FIpXgvwuACJGBYaet_wns0CkyYU_H8mIdg" alt=""></p>
<p>この例では、「RA7」を「RB5」にしたいので、以下のように5ヶ所に変更してください。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">bit RS232_OUTBIT @ PORTA.7;</div><div class="line">bit RS232_INPBIT  @ PORTA.7;</div><div class="line">#define SERIAL_SND_POLARITY	1</div><div class="line"></div><div class="line">#define RS232C_SET_INP TRISA.7=1;</div><div class="line">#define RS232C_SET_OUT TRISA.7=0;</div></pre></td></tr></table></figure></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1yTw1SSIb1ouooT2Ql63ec4QRyDm6HowHIA" alt=""></p>
<div style="text-align: center;">↓</div>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">bit RS232_OUTBIT @ PORTB.5;</div><div class="line">bit RS232_INPBIT  @ PORTB.5;</div><div class="line">#define SERIAL_SND_POLARITY	0</div><div class="line"></div><div class="line">#define RS232C_SET_INP TRISB.5=1;</div><div class="line">#define RS232C_SET_OUT TRISB.5=0;</div></pre></td></tr></table></figure>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1n7RuseKTg8r9Ct33g0lyDeXXO0D0RoAf_w" alt=""></p>
<p>変更後、「Ctrl」+「S」で保存します。</p>
<h2 id="build-する"><a href="#Build-する" class="headerlink" title="Build する"></a>Build する</h2><p>「Build」を押します。<br><img src="https://drive.google.com/uc?export=view&amp;id=1NyihaBcP-kR-KPTM_3n-HLwylTUQrg8mwQ" alt=""></p>
<p>すると、プロジェクトのフォルダ内に「<code>OneBitLoader.hex</code>」ができました。<br><img src="https://drive.google.com/uc?export=view&amp;id=1eXzY6n-1od9Ffa-m73-LuD5ChtAkRxep_w" alt=""></p>
<p>あとで、分かるように名前を変更します。<br>「<code>OneBitLoader.hex</code>」→「<code>PIC16F88_RB5_19200.hex</code>」<br><img src="https://drive.google.com/uc?export=view&amp;id=1ZxYCD3nqeLTH7EAU-IEez7MASK7gOOdQ6g" alt=""></p>
<h1 id="pic16f88_rb5_19200hexを書き込む"><a href="#「PIC16F88-RB5-19200-hex」を書き込む" class="headerlink" title="「PIC16F88_RB5_19200.hex」を書き込む"></a>「PIC16F88_RB5_19200.hex」を書き込む</h1><p>作成した「<code>PIC16F88_RB5_19200.hex</code>」をPICに書き込みます。</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1zUjrjAS2LXh5D98FKASK7J6t59XlH4oNdQ" alt=""></p>
<p>「PIC Kit3」と「MPLAB IPE」を使用していますが、なんでもかまいません。</p>
<p>割愛します。</p>
<h1 id="onebitloaderでプログラムの書き込み"><a href="#「OneBitLoader」でプログラムの書き込み" class="headerlink" title="「OneBitLoader」でプログラムの書き込み"></a>「OneBitLoader」でプログラムの書き込み</h1><p>「<code>OneBitLoader20081207XP</code>」内の「<code>OneBitLoader(PC).zip</code>」を展開します。<br><img src="https://drive.google.com/uc?export=view&amp;id=19YAtIS-Ktio4sj9fqr0Mcq7tUNg7IVJDbg" alt=""></p>
<p>展開したファイルの中にある「<code>OneBitLoader.exe</code>」を実行します。<br><img src="https://drive.google.com/uc?export=view&amp;id=1L43N-ayNomCxbv0HDHdl1nWhSxh4_MTE3A" alt=""></p>
<p>「詳細情報」を選択<br><img src="https://drive.google.com/uc?export=view&amp;id=13qokdAn7HHo1PmU6tMsUmxyZB5vTlSRW4g" alt=""></p>
<p>「実行」を選択<br><img src="https://drive.google.com/uc?export=view&amp;id=1q5UP7tvz0CExMTBD1tEEbeOc21rvSxMPEg" alt=""></p>
<p>「HexLoad」から書き込みたいファイルを選択<br><img src="https://drive.google.com/uc?export=view&amp;id=1TILrI6nf9t_JCcwpmk1XYnGfV5DMbuRkiQ" alt=""></p>
<p>「Device」は「16F88A7」を選択<br><img src="https://drive.google.com/uc?export=view&amp;id=1hkmNkjHbUI-iKwYjA69sOscrtQfulZHeUA" alt=""></p>
<p>使用するCOMポートを選択し、「Write」で書き込みます。<br><img src="https://drive.google.com/uc?export=view&amp;id=1T4GsujI9WhBTglVmX1qd_0CVnyuc_f29OA" alt=""></p>
<p>うまくいくと「complete!!」と表示されます。<br><img src="https://drive.google.com/uc?export=view&amp;id=1Q85LrLC4EzNMhFzWZBCbXh4TmmZG96wEPQ" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;skyriverさん制作の「OneBitLoader」で、ソフトウェア通信を使用した書き込みの際、使用するピンを変更する手順をまとめました。&lt;br&gt;使用するPICは「PIC16F88」で、デフォルトでは「RA7」が使用されています。&lt;br&gt;この記事では、仮に「RB5」に変更したい、という前提で説明して行きます。&lt;/p&gt;
    
    </summary>
    
      <category term="補足" scheme="https://keijirotanabe.github.io/blog/categories/%E8%A3%9C%E8%B6%B3/"/>
    
    
      <category term="補足" scheme="https://keijirotanabe.github.io/blog/tags/%E8%A3%9C%E8%B6%B3/"/>
    
  </entry>
  
  <entry>
    <title>無料のCコンパイラCC5XをMPLAB IDE v8.92で使用する為の手順</title>
    <link href="https://keijirotanabe.github.io/blog/2017/03/05/cc5x-mplab-8-install-170306/"/>
    <id>https://keijirotanabe.github.io/blog/2017/03/05/cc5x-mplab-8-install-170306/</id>
    <published>2017-03-05T20:48:07.000Z</published>
    <updated>2017-03-06T06:39:59.492Z</updated>
    
    <content type="html"><![CDATA[<p>無料で使えるC言語コンパイラのCC5XをMPLAB IDE v8.92から開発できるようにするまでの手順を紹介します。</p>
<a id="more"></a>
<h1 id="cc5x-のインストール"><a href="#CC5X-のインストール" class="headerlink" title="CC5X のインストール"></a>CC5X のインストール</h1><p>ダウウンロードした「cc5xfree」を「C:\Program Files」に置くだけです。<br>以下、手順を説明します。</p>
<p><strong>CC5Xのダウウンロード</strong><br>→ <a href="http://www.bknd.com/cc5x/downl-prof.html" target="_blank" rel="external">CC5X Free Edition</a></p>
<p>「cc5xfree.zip」を選択します。<br><img src="https://drive.google.com/uc?export=view&amp;id=14g0XNF4N4fOkY7StKtxXZJvMqJJRC6hvBg" alt=""></p>
<p>ダウウンロードした「cc5xfree.zip」を解凍すると「cc5xfree」ができます。<br><img src="https://drive.google.com/uc?export=view&amp;id=1TIlQa913yhalhYuUuFHqCJxmkfWtLH5dBA" alt=""></p>
<p>「cc5xfree」を「C:\Program Files」に移動します。<br><img src="https://drive.google.com/uc?export=view&amp;id=1V5G6DY_8lMz_iXsf4nlvr2P_CESfpppuuA" alt=""></p>
<p>「続行」を選択します。<br><img src="https://drive.google.com/uc?export=view&amp;id=1BkMYINKKD66QD3nCRAYlnzSB0XeJE3Tjbw" alt=""></p>
<p>以上で、CC5X のインストールは完了です。</p>
<h1 id="mplab-ide-v892-のインストール"><a href="#MPLAB-IDE-v8-92-のインストール" class="headerlink" title="MPLAB IDE v8.92 のインストール"></a>MPLAB IDE v8.92 のインストール</h1><p><strong>MPLAB IDE v8.92 のダウンロード</strong><br>→ <a href="http://www.microchip.com/development-tools/downloads-archive" target="_blank" rel="external">MPLAB IDE Archives</a></p>
<p>「MPLAB IDE v8.92」を選択します。<br><img src="https://drive.google.com//uc?export=view&amp;id=1ODUsaq6E_a9QzP-URShnULsvZk_tyxQcuQ" alt=""></p>
<p>ダウンロードしたファイルを展開します。<br><img src="https://drive.google.com//uc?export=view&amp;id=1X1w0RZ4yMVT7IP0bM_u5FA9b7mw-KoVjWw" alt=""></p>
<p>展開した中にある「setup.exe」を実行します。<br><img src="https://drive.google.com/uc?export=view&amp;id=1PISACJskF8atYe9OARHRVTsJQcUhK_en1w" alt=""></p>
<p>あとは、以下の流れで「Next」を押して行けばインストールできます。<br><img src="https://drive.google.com/uc?export=view&amp;id=153tla0quOpUFabLwNExMMl44E9YSlr7XlA" alt=""></p>
<div style="text-align: center;">↓</div>

<p><img src="https://drive.google.com/uc?export=view&amp;id=1up2QkWUzfl9YsoLA-4ErTjglaMHbU3hx3Q" alt=""></p>
<div style="text-align: center;">↓</div>

<p><img src="https://drive.google.com/uc?export=view&amp;id=1RZ_vRI3X7lSit-RxRyOLEZSSxOGMjAgMbA" alt=""></p>
<div style="text-align: center;">↓</div>

<p><img src="https://drive.google.com/uc?export=view&amp;id=1HdTA1K4qOts_sl6DZj-ykQup2l8jgN3ttA" alt=""></p>
<div style="text-align: center;">↓</div>

<p><img src="https://drive.google.com/uc?export=view&amp;id=1RtXYRTHoJ1N_5GQ56KRfjSB-bPDlz0vTmg" alt=""></p>
<div style="text-align: center;">↓</div>

<p><img src="https://drive.google.com/uc?export=view&amp;id=15mnd_DcTGXggy-183mQg9QI6onsrD7Lxsg" alt=""></p>
<div style="text-align: center;">↓</div>

<p><img src="https://drive.google.com/uc?export=view&amp;id=1qwZvK3BJKJM-1_qKQQbuwslUJuga-aBoKg" alt=""></p>
<div style="text-align: center;">↓</div>

<p><img src="https://drive.google.com/uc?export=view&amp;id=1qoJBhvpG1bA_3dyli_AvnoEOODGr94OW7g" alt=""></p>
<div style="text-align: center;">↓</div>

<p><img src="https://drive.google.com/uc?export=view&amp;id=1nniwcFXRlGeQE00Pi6EOkT8w-Vo56y7i8A" alt=""></p>
<div style="text-align: center;">↓</div>

<p><img src="https://drive.google.com/uc?export=view&amp;id=1-9F3eRyY90rQaumAyX4kC-IBfLCeLv1cjA" alt=""></p>
<p>以上で、MPLAB IDE v8.92 のインストールは完了です。</p>
<p>完了後、ウインドウが開くので閉じます。<br><img src="https://drive.google.com/uc?export=view&amp;id=1hoaQd5Di5qj5L8M97GjnOT-czKmrHEeixg" alt=""></p>
<h1 id="mplab-ide-の設定"><a href="#MPLAB-IDE-の設定" class="headerlink" title="MPLAB IDE の設定"></a>MPLAB IDE の設定</h1><p>「Project &gt; Project Wizard…」を押します。<br><img src="https://drive.google.com/uc?export=view&amp;id=1oBbzqiAJ_1JIBYT1P49WlPx72uK4-_bY3Q" alt=""></p>
<p>「次へ」をを押します。<br><img src="https://drive.google.com/uc?export=view&amp;id=1a1dAI-TsI6Qu79xh2Ywz3n2C52zrQyL_xA" alt=""></p>
<p>デバイスを選択します。<br>ここでは、「PIC16F88」を選択しています。<br>「次へ」を押します。<br><img src="https://drive.google.com/uc?export=view&amp;id=1cgDQx20m-yXKzHZadX9xHNJZm9bdxJ5_Jg" alt=""></p>
<p>「B Knudsen Data CC5X」を選択します。<br><img src="https://drive.google.com/uc?export=view&amp;id=1MNm1L12V8Wi9XZaH-3a-6GWJIJ-wZ1k9yQ" alt=""></p>
<p>「CC5X C Compiler」 を選択した状態で　「Browse…」 から、<br>「<code>C:\Program Files\cc5xfree\CC5X.EXE</code>」　を選択します。<br><img src="https://drive.google.com/uc?export=view&amp;id=1LlFKFKOYcMeYbiGIV91bSluqvp6lLRtepg" alt=""></p>
<p>「MPASM」 を選択した状態で　「Browse…」 から、<br>「<code>C:\Program Files (x86)\Microchip\MPASM Suite\MPASMWIN.exe</code>」　を選択します。<br><img src="https://drive.google.com/uc?export=view&amp;id=1eTsYH97wFzuA_SbcKoeT24FnJVqtWWIvkA" alt=""></p>
<p>「MPLINK」 を選択した状態で　「Browse…」 から、<br>「<code>C:\Program Files (x86)\Microchip\MPASM Suite\mplink.exe</code>」　を選択し、「次へ」 を押します。<br><img src="https://drive.google.com/uc?export=view&amp;id=1noVo4ldcrta4ZLvHhN4T4p-9mES3skHVRQ" alt=""></p>
<p>「Browse…」を押します。<br><img src="https://drive.google.com/uc?export=view&amp;id=1NpTL4A8LYrcLiCnA9AB7wKl9Sno_fPeNQw" alt=""></p>
<p>プロジェクト名と保存先を指定します。<br>「<code>C:\Users\User\Desktop\project\project</code>」としました。<br>「次へ」 を押します。<br><img src="https://drive.google.com/uc?export=view&amp;id=1lnXMV9E7Updo42LSHsAH2FznzhiJLebsOQ" alt=""></p>
<p>プロジェクトに追加するファイルを選択できます。<br>空のプロジェクトを作るので何も追加せず、「次へ」 を押します。<br><img src="https://drive.google.com/uc?export=view&amp;id=1JQXU-ZtNGmCSDg-d-kwThqLwsjNwpI-VWg" alt=""></p>
<p>「完了」を押します。<br><img src="https://drive.google.com/uc?export=view&amp;id=1NVINiD59tYqYtjbdkUYMHPTXJygjSIMoHQ" alt=""></p>
<p>空のプロジェクトができます。<br><img src="https://drive.google.com/uc?export=view&amp;id=1HaL72qznUpAmQRyXeGwPvSnTAmlaQpLBAg" alt=""></p>
<p>あとは、ソースファイルを追加し、自由にプログラムを書いてください。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;無料で使えるC言語コンパイラのCC5XをMPLAB IDE v8.92から開発できるようにするまでの手順を紹介します。&lt;/p&gt;
    
    </summary>
    
      <category term="補足" scheme="https://keijirotanabe.github.io/blog/categories/%E8%A3%9C%E8%B6%B3/"/>
    
    
      <category term="補足" scheme="https://keijirotanabe.github.io/blog/tags/%E8%A3%9C%E8%B6%B3/"/>
    
  </entry>
  
  <entry>
    <title>Raspberry Piでモニターなど周辺を使用せずセットアップする方法</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/26/raspberry-pi-set-without-using-monitor-170227/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/26/raspberry-pi-set-without-using-monitor-170227/</id>
    <published>2017-02-26T21:48:22.000Z</published>
    <updated>2017-02-28T09:07:08.524Z</updated>
    
    <content type="html"><![CDATA[<p>Raspberry Piでモニターなど周辺を使用せずセットアップする方法を解説します。</p>
<ul>
<li>Raspberry Pi 3、または2でも手順は同じです。</li>
<li>CUI版の「RASPBIAN JESSIE LITE」で進めていきますが、GUI環境のある「Raspbian Jessie with PIXEL」でも、同じやり方でできます。</li>
</ul>
<a id="more"></a>
<h1 id="使用する環境"><a href="#使用する環境" class="headerlink" title="使用する環境"></a>使用する環境</h1><ul>
<li>Windows10 Home 64bit</li>
<li>Raspberry Pi 3 Model B Element14版</li>
<li>Raspbian Jessie LITE</li>
</ul>
<h1 id="必要なもの"><a href="#必要なもの" class="headerlink" title="必要なもの"></a>必要なもの</h1><ul>
<li><strong>Raspberry Pi 3 本体</strong><br>  → <a href="http://amzn.to/2lEbclX" target="_blank" rel="external">Raspberry Pi 3 Model B Element14版</a></li>
<li><strong>microSD (8G以上)</strong><br>  SD と Raspberry Pi には相性があるようです<br>  → <a href="http://elinux.org/RPi_SD_cards" target="_blank" rel="external">RPi SD cards</a></li>
<li><strong>電源 MicroUSB経由 (2.5A推奨)</strong><br>  ここでは2.4Aのを使っています</li>
</ul>
<h1 id="raspbianの入手"><a href="#Raspbianの入手" class="headerlink" title="Raspbianの入手"></a>Raspbianの入手</h1><p>GUI環境は使わないため、「RASPBIAN JESSIE LITE」をダウンロードします。</p>
<p>ダウンロード先<br><a href="https://www.raspberrypi.org/downloads/raspbian/" target="_blank" rel="external">Download Raspbian for Raspberry Pi</a></p>
<p>「RASPBIAN JESSIE LITE」の「Download ZIP」を選択します。<br><img src="https://drive.google.com/uc?export=view&amp;id=12QKm6EmUlM152SUq2OhNo8X_c5cA1ZE1hw" alt=""></p>
<h1 id="sdカードのフォーマット"><a href="#SDカードのフォーマット" class="headerlink" title="SDカードのフォーマット"></a>SDカードのフォーマット</h1><p>「SDカードフォーマッター」でSDカードをフォーマットします。</p>
<p>詳しくは<a href="/blog/2017/02/10/sd-formatter-4-170210/" title="SDカードフォーマッターの使い方">SDカードフォーマッターの使い方</a>を参考</p>
<p>ダウンロード先<br><a href="https://www.sdcard.org/jp/downloads/formatter_4/index.html" target="_blank" rel="external">https://www.sdcard.org/jp/downloads/formatter_4/index.html</a></p>
<p>「論理サイズ調整」を「ON」にします。<br><img src="https://drive.google.com/uc?export=view&amp;id=1Qo8Qb7h8JOr056CytZClhIDN0lA4hOg1lQ" alt=""></p>
<p>「フォーマット」 → 「OK」 でフォーマット開始<br><img src="https://drive.google.com/uc?export=view&amp;id=109XqbqoQFWxxNzt85Pe46zqaIp1cR4RlkQ" alt=""></p>
<hr>
<h1 id="sdカードへ書き込み"><a href="#SDカードへ書き込み" class="headerlink" title="SDカードへ書き込み"></a>SDカードへ書き込み</h1><p>RaspbianをSDカードに書き込むには、「Win32DiskImager」を使います。</p>
<p>詳しくは<a href="/blog/2017/02/10/win32-disk-imager-170211/" title="Win32DiskImagerの使い方">Win32DiskImagerの使い方</a></p>
<p>ダウンロード先<br><a href="https://ja.osdn.net/projects/sfnet_win32diskimager/" target="_blank" rel="external">https://ja.osdn.net/projects/sfnet_win32diskimager/</a></p>
<p>手順は</p>
<ol>
<li>先ほどダウンロードした、「<code>2017-01-11-raspbian-jessie-lite.img</code>」の読み込み</li>
<li>書き込み先のSDを選択 [F]</li>
<li>「Write」を押す</li>
<li>「Confirm overwrite」のウィンドウが開くので「Yes」を押す</li>
</ol>
<p><img src="https://drive.google.com/uc?export=view&amp;id=17b86e3koiJTc5V_I4VsUbs2ulpttDf6ZVw" alt=""></p>
<p>終了したら「OK」を選択</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1uZtWrf7larpH5v0lKEqN8N1tGF60v9TrFQ" alt=""></p>
<h1 id="sshをonにする"><a href="#SSHをONにする" class="headerlink" title="SSHをONにする"></a>SSHをONにする</h1><p>SSHをONにするには、イメージを書き込んだSDのフォルダ内に「<code>ssh</code>」という空のファイルを作ります。<br>拡張子は何もつけてはいけません。</p>
<p>右クリック → 新規作成 → テキストドキュメント　→　「ssh」</p>
<p><code>boot(F:) &gt; ssh</code><br><img src="https://drive.google.com/uc?export=view&amp;id=1bQglvuTIjQMDHc7anktV6MjVy3fQ1nPRAA" alt=""></p>
<h1 id="wifiの設定"><a href="#WiFiの設定" class="headerlink" title="WiFiの設定"></a>WiFiの設定</h1><p>WiFiの設定をします。<br>※　ＬＡＮケーブルでつなぐ場合は読み飛ばしてください。</p>
<p>SDのフォルダ内に「<code>wpa_supplicant.conf</code>」というファイルを作ります。<br>その中に ↓ のように設定してください。</p>
<p><code>boot(F:) &gt; wpa_supplicant.conf</code></p>
<figure class="highlight bash"><figcaption><span>wpa_supplicant.conf</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">network=&#123;</div><div class="line">	ssid=<span class="string">"SSID"</span></div><div class="line">	psk=<span class="string">"PASSWORD"</span></div><div class="line">	key_mgmt=WPA-PSK</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>wpa_supplicant.conf</code>ファイルを作成<br><img src="https://drive.google.com/uc?export=view&amp;id=1Tssd55tWDEwdkY5MEfhcDlD0QYxugB5nrg" alt=""></p>
<p>↑ のコードを貼り付ける。<br><img src="https://drive.google.com/uc?export=view&amp;id=1uq8EoVjXjSltLj9nQspp98KSGRbQ3O0BDQ" alt=""></p>
<p>SSIDとパスワードを設定して保存します。</p>
<hr>
<h1 id="sshクライアントから接続"><a href="#SSHクライアントから接続" class="headerlink" title="SSHクライアントから接続"></a>SSHクライアントから接続</h1><h2 id="bonjourをインストール"><a href="#Bonjourをインストール" class="headerlink" title="Bonjourをインストール"></a>Bonjourをインストール</h2><p>IPアドレスがわからなので、ホスト名でアクセスできる「Avahi」を使用します。<br>「Raspbian Jessie LITE」には、初めからAvahiがインストールされてるので、Raspberry Pi では特に作業は必要ありません。</p>
<p>接続するPCには、Bonjourをインストールします。</p>
<p>BonjourはiTunesにも使われてますので、iTunesをインストールされているなら、この作業は飛ばしてください。</p>
<p>ダウンロード<br><a href="https://support.apple.com/kb/DL999?locale=ja_JP" target="_blank" rel="external">ダウンロード - Bonjour Print Services (Windows)</a></p>
<p>インストールすると3つアプリケーションが追加される。<br><img src="https://drive.google.com/uc?export=view&amp;id=19l0aviJX9iDnPyLcmuxYNd8z350BYS0g6Q" alt=""></p>
<h2 id="tera-termから接続"><a href="#Tera-Termから接続" class="headerlink" title="Tera Termから接続"></a>Tera Termから接続</h2><p>SSHクライアントは、Tera Term を使用します。</p>
<p>ダウンロード先<br><a href="https://ja.osdn.net/projects/ttssh2/releases/66795" target="_blank" rel="external">https://ja.osdn.net/projects/ttssh2/releases/66795</a></p>
<p>ホスト名は<code>raspberrypi.local</code>です。<br><img src="https://drive.google.com/uc?export=view&amp;id=1vnin7_jQr0325kENXNRU6mYTpRiv2z8UzA" alt=""></p>
<p>ユーザー名とパスワードは初期設定では以下のようになっています。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ユーザー名: pi</div><div class="line">パスワード: raspberry</div></pre></td></tr></table></figure>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1dDUfOa0YLKFStvXDKF2CeNmk0Rp89PY-5Q" alt=""></p>
<p>ログインできました。<br><img src="https://drive.google.com/uc?export=view&amp;id=1-zH2AkIbWZslKvWIcFixRJdhx_v7X7TvZw" alt=""></p>
<hr>
<h1 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h1><p>設定メニューを表示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo raspi-config</div></pre></td></tr></table></figure></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1l7A53QUjgPoi1xzyS9Q0a9Q2sqychedGBA" alt=""></p>
<p>キーボードの　↑、↓、←、→、Enter で操作します。</p>
<h2 id="パスワードの変更"><a href="#パスワードの変更" class="headerlink" title="パスワードの変更"></a>パスワードの変更</h2><p>「Change User Password」を選択<br><img src="https://drive.google.com/uc?export=view&amp;id=1E0tQ-X_Q3xAOXo5D6nH0ixG1gDuXJL3QaQ" alt=""></p>
<p>2回、変更したいパスワードを入力します。<br><img src="https://drive.google.com/uc?export=view&amp;id=1-1phcV0SpzCs4IAqPb0eQtCkvKqd1gNvLw" alt=""></p>
<h2 id="ロケールとタイムゾーンの変更"><a href="#ロケールとタイムゾーンの変更" class="headerlink" title="ロケールとタイムゾーンの変更"></a>ロケールとタイムゾーンの変更</h2><p>まずは、ロケールを変更します。</p>
<p>「Localisation Options」を選択<br><img src="https://drive.google.com/uc?export=view&amp;id=1FP1l4j8Y2erG4COI0SHyjrK9afg17IzwDA" alt=""></p>
<p>「Change Locale」を選択<br><img src="https://drive.google.com/uc?export=view&amp;id=1hAKOcSP3suUmx0XYuAkbJTR8_BPdsxm3XQ" alt=""></p>
<p>「ja_JP.EUC-JP EUC-JP」と「ja_JP.UTF-8 UTF-8」の所で、「スペースキー」でチェックし、「Enter」で選択<br><img src="https://drive.google.com/uc?export=view&amp;id=1lZ8JN187BOGaROqsF3sW7_DK7mX7XNIspw" alt=""></p>
<p>「ja_JP.UTF-8」を選択<br><img src="https://drive.google.com/uc?export=view&amp;id=1zIHpMJ-lJLta7uqoxyTKnTLa47KqLcXRtQ" alt=""></p>
<p>次に、タイムゾーンを変更します。</p>
<p>「Change Timezone」を選択<br><img src="https://drive.google.com/uc?export=view&amp;id=10vh4dmph_FkMGyJjj_3GsoK3DQ8clQH0nA" alt=""></p>
<p>「Asia」を選択<br><img src="https://drive.google.com/uc?export=view&amp;id=1hZ8HoT6U4CQNb3w4j0URgcMZN9DBCsohFA" alt=""></p>
<p>「Tokyo」を選択<br><img src="https://drive.google.com/uc?export=view&amp;id=1U0trc3VZHmUu2ZkMda3qvAHBllG2fCtODw" alt=""></p>
<hr>
<h1 id="パッケージのアップデート"><a href="#パッケージのアップデート" class="headerlink" title="パッケージのアップデート"></a>パッケージのアップデート</h1><p>パッケージリストの更新</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div></pre></td></tr></table></figure>
<p>インストールされたパッケージを最新バージョンにアップグレード<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo dist-upgrade</div></pre></td></tr></table></figure></p>
<h1 id="イメージのバックアップ"><a href="#イメージのバックアップ" class="headerlink" title="イメージのバックアップ"></a>イメージのバックアップ</h1><p>電源をOFFします。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo poweroff</div></pre></td></tr></table></figure></p>
<p>電源が切れたら、SDをPCに挿し、「Win32DiskImager」を起動します。</p>
<p>今回は、デスクトップに「2017-02-28-raspbian-jessie-lite-backup.img」で保存します。<br>ファイルアイコンから保存先と保存名を選択後、「Read」を押します。<br><img src="https://drive.google.com/uc?export=view&amp;id=1CXzNa1QLnyHp2ty3r3ylDTQt6E5KmC-mLw" alt=""></p>
<p>完了しました。<br><img src="https://drive.google.com/uc?export=view&amp;id=1WLiFIPEO7xyDHfuymrZTtmcJ9es3RJI9Rg" alt=""></p>
<p>これで、不具合がでた時などに、バックアップしたファイルを書き直せば、同じ環境を再現できるようになります。</p>
<p>なお、このやり方の場合、コピー先のSDの容量がコピー元の容量以上<br>16GB → 16GB<br>16GB → 32GB　など<br>でないと書き込めません。</p>
<p>また、同じ容量表記でも微妙に異なることがあり、書き込めないことがあります。</p>
<p>16GB → 16GB<br>16GB → 8GB<br>のようにしたい場合、パーティションソフトでバックアップのサイズを小さくしなければなりません。<br>それについては、後に紹介します。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Raspberry Piでモニターなど周辺を使用せずセットアップする方法を解説します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Raspberry Pi 3、または2でも手順は同じです。&lt;/li&gt;
&lt;li&gt;CUI版の「RASPBIAN JESSIE LITE」で進めていきますが、GUI環境のある「Raspbian Jessie with PIXEL」でも、同じやり方でできます。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Raspberry Pi" scheme="https://keijirotanabe.github.io/blog/categories/Raspberry-Pi/"/>
    
    
      <category term="Raspberry Pi" scheme="https://keijirotanabe.github.io/blog/tags/Raspberry-Pi/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/22/hello-world/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/22/hello-world/</id>
    <published>2017-02-22T06:03:07.935Z</published>
    <updated>2017-02-22T06:03:07.935Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="quick-start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Cloud9からHexoを使ってGutHub Pagesにブログを公開する手順</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/22/Cloud9%E3%81%A8HEXO%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6GutHub%20Pages%E3%81%AB%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B%E6%89%8B%E9%A0%86/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/22/Cloud9とHEXOを使ってGutHub Pagesにブログを公開する手順/</id>
    <published>2017-02-22T04:47:46.766Z</published>
    <updated>2017-02-22T04:47:46.766Z</updated>
    
    <content type="html"><![CDATA[<p>Cloud9にHexoをインストールし作成したブログをGitHub Pagesに公開するやり方をメモ</p>
<h1 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h1><ul>
<li>Clude9とGitHubの登録</li>
<li>Clude9でblogを作成</li>
<li>GitHubにリポジトリを作成</li>
<li>SSHの設定</li>
<li>GitHub Pages にデプロイする</li>
</ul>
<a id="more"></a>
<h1 id="clude9とgithubの登録"><a href="#Clude9とGitHubの登録" class="headerlink" title="Clude9とGitHubの登録"></a>Clude9とGitHubの登録</h1><p><strong>GitHub</strong><br><a href="https://github.com/" target="_blank" rel="external">https://github.com/</a></p>
<p><a href="https://github.com/" target="_blank" rel="external"><img src="https://drive.google.com/uc?export=view&amp;id=1qI4Rq_0GTsfPTsOaXRfQJYA1XPRlmdhBbQ" alt=""></a></p>
<p><strong>Cloud9</strong><br><a href="https://c9.io/" target="_blank" rel="external">https://c9.io/</a></p>
<p><a href="https://c9.io/" target="_blank" rel="external"><img src="https://drive.google.com/uc?export=view&amp;id=1C9nw64zvruq--nyFzx-JyYpA1YJuQBg6aQ" alt=""></a></p>
<h1 id="clude9でblogを作成"><a href="#Clude9でblogを作成" class="headerlink" title="Clude9でblogを作成"></a>Clude9でblogを作成</h1><p>作業用プロジェクトの作成手順</p>
<ol>
<li>create a new workspace</li>
<li>Workspace name: blog_work</li>
<li>Choose a template -&gt; Node.js</li>
<li>Create workspace</li>
</ol>
<p>blog_workという名前のプロジェクトができます。</p>
<p>初めにあるファイルはすべて削除します。</p>
<p>以下でnodeとnpmのバージョンを確認<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">~/workspace $ node -v</div><div class="line">v4.6.1</div><div class="line">~/workspace $ npm -v</div><div class="line">2.15.9</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="hexoのインストール"><a href="#Hexoのインストール" class="headerlink" title="Hexoのインストール"></a>Hexoのインストール</h1><p><a href="https://hexo.io/" target="_blank" rel="external">Hexo公式サイト</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">~/workspace $ npm install hexo-cli -g</div><div class="line">~/workspace $ hexo init blog</div><div class="line">~/workspace $ cd blog</div><div class="line">~/workspace/blog $ npm install</div><div class="line">~/workspace/blog $ hexo server -p 8080</div></pre></td></tr></table></figure>
<p>ターミナルから <a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a>　-&gt; Open </p>
<h2 id="sshの設定"><a href="#SSHの設定" class="headerlink" title="SSHの設定"></a>SSHの設定</h2><p><strong>Clude9の場合</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cat ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure>
<p>で公開鍵が出力されるので、コピーする</p>
<p><strong>Clude9以外の場合</strong><br>.sshディレクトリの作成</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/workspace/blog $ mkdir ~/.ssh</div></pre></td></tr></table></figure>
<p>鍵を生成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">~/workspace/blog $ ssh-keygen -t rsa</div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter file in which to save the key (/Users/(username)/.ssh/id_rsa):</div><div class="line">Enter passphrase (empty for no passphrase):</div><div class="line">Enter same passphrase again:</div></pre></td></tr></table></figure></p>
<p>何か聞かれるので3回エンター</p>
<p>鍵の中身をクリップボードへコピー<br>xselのインストール</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/workspace/blog $ sudo apt-get install xsel</div></pre></td></tr></table></figure>
<p>クリップボードへコピーするコマンド</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">~/workspace/blog $ cat ./id_rsa.pub | xsel --clipboard --input</div><div class="line"></div><div class="line"># Mac or Windows</div><div class="line">$ pbcopy &lt; ~/.ssh/id_rsa.pub  (Mac)</div><div class="line">$ clip &lt; ~/.ssh/id_rsa.pub    (Windows)</div></pre></td></tr></table></figure>
<h1 id="公開鍵をgithubに登録"><a href="#公開鍵をGitHubに登録" class="headerlink" title="公開鍵をGitHubに登録"></a>公開鍵をGitHubに登録</h1><p><a href="https://github.com/settings/ssh" target="_blank" rel="external">公開鍵をGitHubに登録</a>で公開鍵を設定。</p>
<ol>
<li>New SSH key</li>
<li>Titlte : cloud9-ssh-rsa</li>
<li>Key : 鍵の中身をコピペ (Ctrl + V)</li>
<li>Add SSH key</li>
</ol>
<p>接続確認</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">~/workspace/blog $ ssh -T git@github.com</div><div class="line">Hi &lt;アカウント名&gt; You&apos;ve successfully authenticated, but GitHub does not provide shell access.</div></pre></td></tr></table></figure>
<p>と返れば成功</p>
<h2 id="githubにリポジトリを作成"><a href="#GitHubにリポジトリを作成" class="headerlink" title="GitHubにリポジトリを作成"></a>GitHubにリポジトリを作成</h2><p><strong>手順</strong></p>
<ol>
<li>Start a project</li>
<li>Repository name: blog</li>
<li>Create repository</li>
</ol>
<p>SSH文字列をコピー</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git@github.com:keijirotanabe/blog.git</div></pre></td></tr></table></figure>
<p>こういうやつ</p>
<h2 id="github-pages-にデプロイする"><a href="#GitHub-Pages-にデプロイする" class="headerlink" title="GitHub Pages にデプロイする"></a>GitHub Pages にデプロイする</h2><p> GitHub Pages へデプロイするには ‘hexo-deployer-git’ という Hexo のプラグインをインストールする必要があるので、</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>でインストール</p>
<h2 id="gitの設定"><a href="#gitの設定" class="headerlink" title="gitの設定"></a>gitの設定</h2><p>バージョン確認</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git --version</div><div class="line">git version 2.10.2</div></pre></td></tr></table></figure>
<p>インストールされてなければ以下で、インストール</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install git-core</div></pre></td></tr></table></figure>
<p>名前とメールアドレスの設定</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;Keijiro Tanabe&quot;</div><div class="line">$ git config --global user.email &quot;ayt7gysnyx@gmail.com&quot;</div></pre></td></tr></table></figure>
<p>設定できたか確認</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ git config -l</div><div class="line">user.name=Keijiro Tanabe</div><div class="line">user.email=ayt7gysnyx@gmail.com</div><div class="line">core.editor=nano</div><div class="line">core.whitespace=off</div><div class="line">core.excludesfile=~/.gitignore</div><div class="line">advice.statusuoption=false</div><div class="line">color.ui=true</div><div class="line">push.default=current</div></pre></td></tr></table></figure>
<h2 id="_configyml-の編集"><a href="#config-yml-の編集" class="headerlink" title="_config.yml の編集"></a>_config.yml の編集</h2><p><a href="https://hexo.io/docs/deployment.html#Git" target="_blank" rel="external">Deployment | Hexo</a>を参考に<code>_config.yml</code>ファイルを編集していく</p>
<p>url: <a href="https://[アカウント名].github.io/blog/" target="_blank" rel="external">https://[アカウント名].github.io/blog/</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">url: https://keijirotanabe.github.io/blog/</div><div class="line">root: /blog/</div><div class="line"></div><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type:　git</div><div class="line">  repo: git@github.com:keijirotanabe/blog.git　(さっきコピーしたやつ)</div><div class="line">  branch: gh-pages</div></pre></td></tr></table></figure>
<h2 id="デプロイ"><a href="#デプロイ" class="headerlink" title="デプロイ"></a>デプロイ</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/workspace/blog $ hexo deploy -g</div></pre></td></tr></table></figure>
<p><a href="https://keijirotanabe.github.io/blog/">https://keijirotanabe.github.io/blog/</a><br><a href="https://[アカウント名].github.io/blog/" target="_blank" rel="external">https://[アカウント名].github.io/blog/</a></p>
<p>といったurlにアクセス</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://am1tanaka.hatenablog.com/entry/2017/01/23/011105" target="_blank" rel="external">HexoのインストールとGitHub Pageへデプロイ</a><br><a href="http://qiita.com/shizuma/items/2b2f873a0034839e47ce" target="_blank" rel="external">gitHubでssh接続する手順~公開鍵・秘密鍵の生成から~</a></p>
<p><strong>メモ</strong></p>
<ul>
<li>Cloud9背景黒<br>Preferences -&gt; THEMES -&gt; Classic Theme</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Cloud9にHexoをインストールし作成したブログをGitHub Pagesに公開するやり方をメモ&lt;/p&gt;
&lt;h1 id=&quot;手順&quot;&gt;&lt;a href=&quot;#手順&quot; class=&quot;headerlink&quot; title=&quot;手順&quot;&gt;&lt;/a&gt;手順&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Clude9とGitHubの登録&lt;/li&gt;
&lt;li&gt;Clude9でblogを作成&lt;/li&gt;
&lt;li&gt;GitHubにリポジトリを作成&lt;/li&gt;
&lt;li&gt;SSHの設定&lt;/li&gt;
&lt;li&gt;GitHub Pages にデプロイする&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://keijirotanabe.github.io/blog/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://keijirotanabe.github.io/blog/tags/Hexo/"/>
    
      <category term="Cloud9" scheme="https://keijirotanabe.github.io/blog/tags/Cloud9/"/>
    
      <category term="GutHub" scheme="https://keijirotanabe.github.io/blog/tags/GutHub/"/>
    
  </entry>
  
  <entry>
    <title>仮想COMポートから遠くのESP8266とTCP通信する</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/18/esp8266-virtural-serial-port-170218/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/18/esp8266-virtural-serial-port-170218/</id>
    <published>2017-02-18T03:43:27.000Z</published>
    <updated>2017-02-22T06:02:38.459Z</updated>
    
    <content type="html"><![CDATA[<p>PCに仮想COMポートソフトをインストールし、従来のRS232C通信のようにやりとりします。<br>これにより、COMポートからWiFi経由で、遠くのESP8266と通信できるようなります。</p>
<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><h2 id="使用する環境"><a href="#使用する環境" class="headerlink" title="使用する環境"></a>使用する環境</h2><ul>
<li><p><strong>Arduino IDE を使用するのでインストールしておきます</strong><br>  → <a href="/blog/2017/02/07/Arduino-install-step-070207/" title="Arduino IDEのインストール">Arduino IDEのインストール</a>を参考</p>
</li>
<li><p><strong>ATコマンドを使える状態にしておいてください</strong><br>  一度でもArduinoのスケッチを書き込むとATコマンドが使えなくなるので、再びATコマンドが使えるようにするにはファームウェアを書き直す必要があります<br>  → <a href="/blog/2017/02/06/esp8266-at-reset-170207/" title="ArduinoのESP8266をATコマンドが使えるように戻す">ArduinoのESP8266をATコマンドが使えるように戻す</a>を参考</p>
</li>
</ul>
<a id="more"></a>
<hr>
<h1 id="esp8266の設定"><a href="#ESP8266の設定" class="headerlink" title="ESP8266の設定"></a>ESP8266の設定</h1><h2 id="ステーションモードに設定"><a href="#ステーションモードに設定" class="headerlink" title="ステーションモードに設定"></a>ステーションモードに設定</h2><p>最初にESP8266をステーションモードにしておきます。</p>
<p><strong>WiFiモードには３つあります。</strong></p>
<ol>
<li>ステーションモード<br> →周囲にあるアクセスポイント(AP)に接続します。</li>
<li>ソフトAPモード<br> →本モジュールがアクセスポイント(AP)になります。</li>
<li>ステーションモード＋APモード<br> →上記の１と２の両方を実行します。</li>
</ol>
<p>↓ 現在のWiFiモードを確認できます。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AT+CWMODE?</div></pre></td></tr></table></figure></p>
<p>ステーションモードにするには<code>AT+CWMODE=1</code>とします。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">AT+CWMODE=1</div><div class="line"># 同様に</div><div class="line"># AT+CWMODE=2 ← ソフトAPモード</div><div class="line"># AT+CWMODE=3 ← ステーションモード＋APモード</div></pre></td></tr></table></figure></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=14zxqGYUo9T_X-RrJuOBWC9WucwO4pdkxEQ" alt=""></p>
<p>ステーションモードに設定できました。</p>
<hr>
<h2 id="アクセスポイントに接続"><a href="#アクセスポイントに接続" class="headerlink" title="アクセスポイントに接続"></a>アクセスポイントに接続</h2><p>続いて、アクセスポイントに接続します。<br>接続するコマンドは↓です。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AT+CWJAP=&quot;SSID&quot;,&quot;パスワード&quot;</div></pre></td></tr></table></figure></p>
<p>↓接続先を確認できます。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AT+CWJAP?</div></pre></td></tr></table></figure></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1xvK-DspOBGh-qesbLHc_2uPa2HKwOWypdA" alt=""></p>
<p>アクセスポイントに接続されました。<br>ちなみに、切断したい場合は↓のコマンドです。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AT+CWQAP</div></pre></td></tr></table></figure>
<hr>
<h1 id="hw-vsp3-のインストール"><a href="#HW-VSP3-のインストール" class="headerlink" title="HW VSP3 のインストール"></a>HW VSP3 のインストール</h1><h2 id="ダウンロード"><a href="#ダウンロード" class="headerlink" title="ダウンロード"></a>ダウンロード</h2><p>ダウンロード先<br><a href="http://www.hw-group.com/products/hw_vsp/index_en.html" target="_blank" rel="external">http://www.hw-group.com/products/hw_vsp/index_en.html</a></p>
<p><a href="http://www.hw-group.com/products/hw_vsp/index_en.html" target="_blank" rel="external"><img src="https://drive.google.com/uc?export=view&amp;id=120TcZ0AWCZik1mZDB9muv9DGlsx7c5et5g" alt="ダウンロード場所"></a></p>
<p>めんどくさい人は<a href="http://new.hwg.cz/files/download/sw/version/hw-vsp3-single_3-1-2.exe" target="_blank" rel="external">ここからダウンロード</a></p>
<hr>
<h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><p>ダウンロードした<code>hw-vsp3-single_3-1-2.exe</code>を実行し、以下の流れでインストールします。</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1Og1b3ELC3YLovdk3D8ThK6sOiiBKoEzEBg" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1fB0rMhf_I-xT1YokK-LAw7QnN0ulMMxb1Q" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1rLg8aQ9iRJRtGi8dBusAGP457f1MTdUWYA" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1sOa6iH55P7CpUCTrp91cGSwc5LX8d6n_rg" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1vEmNI2qH71D760sjD-H0cW9p-IGUbZi5mw" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1JRHdX7G4ziQdKUF_ySSJnjoGPFL9rB-1Hw" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=13p-uSc8idumA3wkkG00Hlz9Aetlx5h_Zfg" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1oTL_B0D2hOt8FsQt-qpCdPYlzJRpe31pPw" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1xsH1rA6GGtpQ7L20AIQRNdWwL6cOVsw3Kw" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1abbOxY0PvJHc69mwr7NHMLiDUt3u9k_Q6w" alt=""></p>
<p>インストールが完了しました。</p>
<hr>
<h1 id="hw-vsp3でtcpサーバーを立てる"><a href="#HW-VSP3でTCPサーバーを立てる" class="headerlink" title="HW VSP3でTCPサーバーを立てる"></a>HW VSP3でTCPサーバーを立てる</h1><p>HW VSP3 を起動します。</p>
<p>「Login」を選択<br><img src="https://drive.google.com/uc?export=view&amp;id=1IIqxN_9T0vmmZ9MKsWoNU7zJy08udSE3PA" alt=""></p>
<p>「OK」を選択<br><img src="https://drive.google.com/uc?export=view&amp;id=1n4Lye-FcMsHASuZM7JwQXIkj1jYw8iXj1Q" alt=""></p>
<p>「Settings」タブを選択<br><img src="https://drive.google.com/uc?export=view&amp;id=1T7bUyJBZzJHlxNtbiUrYracLZtCNMuqzwg" alt=""></p>
<p>チェックを「TCP Server Mode」だけにします。<br><img src="https://drive.google.com/uc?export=view&amp;id=1oLeMjgVt4Ya5NfOJzfbvpNGewf97gOFlmg" alt=""></p>
<p>「Virtual Serial Port」タブを選択<br>「Port Name」を「COM10」に選択（使ってなければ何でもよい）<br>「IP Address」は「0.0.0.0」のまま<br>「Port」を「8089」に選択（<a href="http://e-words.jp/w/%E3%82%A6%E3%82%A7%E3%83%AB%E3%83%8E%E3%82%A6%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%88.html" target="_blank" rel="external"><em>ウェルノウンポート</em></a>でなければ何でもよい）<br><img src="https://drive.google.com/uc?export=view&amp;id=1SOOTL-FaikxIG5-cUib_ajiDUULuXJX-Yg" alt=""></p>
<p>「Create COM」で仮想COMが作られます。</p>
<p>「デバイスマネージャー」を確認すると、「Virtual Serial Port(Eltima Softwate)」ができ、展開すると「COM10」が作られていることが分かります。<br><img src="https://drive.google.com/uc?export=view&amp;id=19RdbOdnzE-RP4sv-lnbo2vCZ-phhM64tiw" alt=""></p>
<hr>
<h1 id="pcのipアドレスを確認"><a href="#PCのIPアドレスを確認" class="headerlink" title="PCのIPアドレスを確認"></a>PCのIPアドレスを確認</h1><p>HW VSP3を実行中のＰＣはTCPサーバーになったので、ESP8266から接続します。</p>
<p>PCのIPアドレスを調べます。<br>１と２どちらの方法でも構いません。</p>
<p><strong>1.コマンドプロンプトに「<code>ipconfig</code>」と打つ</strong><br><img src="https://drive.google.com/uc?export=view&amp;id=1YQEch7m2RF0NGhN4leROeZwvyMWeJDfcHA" alt=""></p>
<p><strong>2.ネットワーク接続の詳細をみる</strong><br>コントロールパネル &gt; ネットワークとインターネット &gt; ネットワークと共有センターを開く<br><img src="https://drive.google.com/uc?export=view&amp;id=1DQDqdqIV_qeGy0wOE4BeBze6bR1mLxDfmA" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1wJTLgs0hbDYeQ-UJdalYVYebWUWsnqn8LQ" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1x5smFrjt5tbnP4XiQg7PkkEn7RoBF1EdbQ" alt=""></p>
<p>PCのIPアドレスは<code>192.168.11.4</code>でした。</p>
<hr>
<h1 id="esp8266で接続する"><a href="#ESP8266で接続する" class="headerlink" title="ESP8266で接続する"></a>ESP8266で接続する</h1><h2 id="アクセスポイントに接続"><a href="#アクセスポイントに接続-1" class="headerlink" title="アクセスポイントに接続"></a>アクセスポイントに接続</h2><p>TCP/IPまたはUDPへの接続設定＆接続開始するコマンドは↓です。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AT+CIPSTART=&quot;プロトコル&quot;,&quot;IPアドレス&quot;,ポート番号</div></pre></td></tr></table></figure></p>
<p>プロトコル: TCP<br>IPアドレス: 192.168.11.4　（各自、違います）<br>ポート番号: 8089　（↑で設定したやつ）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AT+CIPSTART=&quot;TCP&quot;,&quot;192.168.11.4&quot;,8089</div></pre></td></tr></table></figure></p>
<p>接続すると、CONNECT と OK が返ります。</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1fAxmJMy2f6S3RckhYfyMLmvC_2hAN9rIrA" alt=""></p>
<p>コネクションが確立しました。</p>
<p>コネクションを切断するには↓です。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AT+CIPCLOSE</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="tcpサーバーを開く"><a href="#TCPサーバーを開く" class="headerlink" title="TCPサーバーを開く"></a>TCPサーバーを開く</h2><p>PCからCOM10を開くと通信が開始されます。</p>
<p>Arduino IDE をもう一つ起動します。<br>「COM10」を選択して、シリアルモニタを起動してください。<br><img src="https://drive.google.com/uc?export=view&amp;id=14eGQGgtgM6vlnHLz2zyOgcD4tPSlzisbdQ" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1nWdET3w5EKSyJaO6OYgOCvp3Ser2Mh6MNA" alt=""></p>
<hr>
<h2 id="esp8266から送信"><a href="#ESP8266から送信" class="headerlink" title="ESP8266から送信"></a>ESP8266から送信</h2><p>ESP8266から、TCPサーバーへ「Hello」と送ってみます。</p>
<p>送信サイズを選択<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AT+CIPSEND=5      // 5バイト送信</div></pre></td></tr></table></figure></p>
<p>「Hello」を送信<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello</div></pre></td></tr></table></figure></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1GjduqgZz_zaidAUWLGwnefdfPX0I-8Ahsw" alt=""></p>
<hr>
<h2 id="tcpサーバーから送信"><a href="#TCPサーバーから送信" class="headerlink" title="TCPサーバーから送信"></a>TCPサーバーから送信</h2><p>次はTCPサーバーから、「ESP8266」と送ってみます。</p>
<p>送信画面<br><img src="https://drive.google.com/uc?export=view&amp;id=1Uwle6glLxPsgGKSvmY1QlFhVqRxSH6w65A" alt=""></p>
<p>受信画面<br><img src="https://drive.google.com/uc?export=view&amp;id=1fT6NVF_Ydm3nTpciqHS-hqY4X2fwAJLt0Q" alt=""></p>
<hr>
<h2 id="相互に通信"><a href="#相互に通信" class="headerlink" title="相互に通信"></a>相互に通信</h2><p>ESP8266からシームレスな通信ができるように、「トランスペアレントモード」にします。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">AT+CIPMODE=1</div><div class="line"></div><div class="line"># AT+CIPMODE=0  // ATコマンドモード</div></pre></td></tr></table></figure>
<p>つづいて↓を入力します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AT+CIPSEND</div></pre></td></tr></table></figure></p>
<p>「&gt;」が返るとトランスペアレントモードに移行します。</p>
<p>両方のターミナルに適当な文字を打つと、相手側のウィンドウに表示されます。</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1TJKPLNOoUI2st7sT0NfVWTKgBgsEUlayRA" alt=""></p>
<hr>
<p>トランスペアレントモードから抜けるには、「+++」を入力します。<br>ですが、制御コードがつくと「+++」を文字列として相手に送信してしまいます。</p>
<p>↓のように「改行なし」にした状態で、「+++」を送信してください。<br><img src="https://drive.google.com/uc?export=view&amp;id=1vTWx38y6v4OtF-I2DyR8oP_gSVp-yI5tfQ" alt=""></p>
<p>「AT」と打って「OK」が返れば、トランスペアレントモードから抜けました。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">AT</div><div class="line"></div><div class="line">OK</div></pre></td></tr></table></figure></p>
<p>再び、トランスペアレントモードに入るには↓です。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AT+CIPSEND</div></pre></td></tr></table></figure></p>
<p>また、↓のように送信サイズを指定して送信するには、<code>AT+CIPMODE=0</code>に設定を戻してください。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">AT+CIPSEND=5      // 5バイト送信</div><div class="line">&gt; Hello</div></pre></td></tr></table></figure>
<hr>
<h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>仮想COMポートとトランスペアレントモードを組み合わせることで、RS232C有線で接続しているかのようにUSRT通信を無線化できました。</p>
<hr>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://www.microtechnica.tv/support/manual/espwroom02jp_man.pdf" target="_blank" rel="external">Wi-Fi-UARTシリアルモジュール - マイクロテクニカ</a></li>
<li><a href="http://nonnoise.github.io/ESP-WROOM-02/ATcommand.html" target="_blank" rel="external">ATコマンド集</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PCに仮想COMポートソフトをインストールし、従来のRS232C通信のようにやりとりします。&lt;br&gt;これにより、COMポートからWiFi経由で、遠くのESP8266と通信できるようなります。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;h2 id=&quot;使用する環境&quot;&gt;&lt;a href=&quot;#使用する環境&quot; class=&quot;headerlink&quot; title=&quot;使用する環境&quot;&gt;&lt;/a&gt;使用する環境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Arduino IDE を使用するのでインストールしておきます&lt;/strong&gt;&lt;br&gt;  → &lt;a href=&quot;/blog/2017/02/07/Arduino-install-step-070207/&quot; title=&quot;Arduino IDEのインストール&quot;&gt;Arduino IDEのインストール&lt;/a&gt;を参考&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ATコマンドを使える状態にしておいてください&lt;/strong&gt;&lt;br&gt;  一度でもArduinoのスケッチを書き込むとATコマンドが使えなくなるので、再びATコマンドが使えるようにするにはファームウェアを書き直す必要があります&lt;br&gt;  → &lt;a href=&quot;/blog/2017/02/06/esp8266-at-reset-170207/&quot; title=&quot;ArduinoのESP8266をATコマンドが使えるように戻す&quot;&gt;ArduinoのESP8266をATコマンドが使えるように戻す&lt;/a&gt;を参考&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="ESP8266" scheme="https://keijirotanabe.github.io/blog/categories/ESP8266/"/>
    
    
      <category term="ESP8266" scheme="https://keijirotanabe.github.io/blog/tags/ESP8266/"/>
    
      <category term="ESP-WROOM-02" scheme="https://keijirotanabe.github.io/blog/tags/ESP-WROOM-02/"/>
    
  </entry>
  
  <entry>
    <title>ESP8266でATコマンドを使ってみる</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/17/esp8266-at-command-170218/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/17/esp8266-at-command-170218/</id>
    <published>2017-02-17T22:02:23.000Z</published>
    <updated>2017-02-22T05:53:07.983Z</updated>
    
    <content type="html"><![CDATA[<p>ESP8266でATコマンドを使ってみる</p>
<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><h2 id="使用する環境"><a href="#使用する環境" class="headerlink" title="使用する環境"></a>使用する環境</h2><ul>
<li><p><strong>Arduino IDE を使用するのでインストールしておきます</strong><br>  → <a href="/blog/2017/02/07/Arduino-install-step-070207/" title="Arduino IDEのインストール">Arduino IDEのインストール</a>を参考</p>
</li>
<li><p>ESPr Developer(ESP-WROOM-02開発ボード)を使用します<br>  → <a href="http://amzn.to/2m7sk2X" target="_blank" rel="external">ESPr Developer（ESP-WROOM-02開発ボード）</a></p>
</li>
<li><p><strong>ATコマンドを使える状態にしておいてください</strong><br>  一度でもArduinoのスケッチを書き込むとATコマンドが使えなくなるので、再びATコマンドが使えるようにするにはファームウェアを書き直す必要があります<br>  → <a href="/blog/2017/02/06/esp8266-at-reset-170207/" title="ArduinoのESP8266をATコマンドが使えるように戻す">ArduinoのESP8266をATコマンドが使えるように戻す</a>を参考</p>
</li>
</ul>
<a id="more"></a>
<h2 id="esp8266の起動モードについて"><a href="#ESP8266の起動モードについて" class="headerlink" title="ESP8266の起動モードについて"></a>ESP8266の起動モードについて</h2><ul>
<li><p><strong>実行モード(Flash Boot Mode)</strong><br>  書かれているプログラムを起動し、実行します</p>
</li>
<li><p><strong>書き込みモード(UART Download Mode)</strong><br>  プログラムを書き帰るときに使用します</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>GPIO</th>
<th>pinの名前</th>
<th>実行モード</th>
<th>書き込みモード</th>
</tr>
</thead>
<tbody>
<tr>
<td>GPIO0</td>
<td>IO0</td>
<td>HIGH</td>
<td>LOW</td>
</tr>
<tr>
<td>GPIO2</td>
<td>IO2</td>
<td>HIGH</td>
<td>HIGH</td>
</tr>
<tr>
<td>GPIO15</td>
<td>IO15</td>
<td>LOW</td>
<td>LOW</td>
</tr>
</tbody>
</table>
<p>IO0 pinの違いで起動モードが変化します<br>HIGH でリセット → 実行モード<br>LOW でリセット → 書き込みモード</p>
<hr>
<h1 id="使い方"><a href="#使い方" class="headerlink" title="使い方"></a>使い方</h1><p>シリアルモニタ起動画面</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1O1usSlNI3l5APYgjialov1GF0Dre8nt9TQ" alt=""></p>
<h2 id="基本atコマンド"><a href="#基本ATコマンド" class="headerlink" title="基本ATコマンド"></a>基本ATコマンド</h2><p><strong>AT</strong><br>起動時のテストに使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AT</div></pre></td></tr></table></figure>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1R1aPEepygpjwDGv4Gl_4XJXNJunD22bimw" alt=""></p>
<hr>
<p><strong>AT+RST</strong><br>モジュールを再起動するために使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AT+RST</div></pre></td></tr></table></figure>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1PgXxzWedx44tpaIJB0D1bJhkYeHf7N6Xvg" alt=""></p>
<hr>
<p><strong>AT+GMR</strong><br>インストールされているATコマンドファームウェアのバージョンとそのSDKをチェックするために使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AT+GMR</div></pre></td></tr></table></figure>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1N2oQt25ceu1xSvk9zbFv6OAF4zA9wUBQ7Q" alt=""></p>
<hr>
<p><strong>AT+GSLP</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">AT+GSLP=&lt;時間&gt;      // &lt;時間&gt;の単位はmsです</div><div class="line"></div><div class="line">例: AT+GSLP=1000</div></pre></td></tr></table></figure>
<p>OKとでたあと「AT」と入力しても反応がなくなりました<br>1000ms以上たっても反応していないみたいなので、復帰のさせかたがよくわからない</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1svrHv2oWUiwG4Ii5urbM5Lmj5y_1f0qweg" alt=""></p>
<hr>
<p><strong>ATE</strong><br>入力されたコマンドをエコーする</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">例: ATE0    // エコーオフ</div><div class="line">    ATE1    // エコーをオンにする</div></pre></td></tr></table></figure>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1nBV-X1T0pgf2NTkjQnU2VUKbm991bEOxHA" alt=""></p>
<hr>
<p><strong>AT+RESTORE</strong><br>工場出荷時の設定に戻します<br>フラッシュに保存されているすべてのパラメータはリセットされます</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AT+RESTORE</div></pre></td></tr></table></figure>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1gjOaDdubtvRv5YR5vGQnWkhHidbu9nHiug" alt=""></p>
<hr>
<p><strong>AT+UART</strong><br>UART構成を設定し、フラッシュに保存されます。<br>※このコマンドは非推奨です。フラッシュへの保存あり、なしに応じて↓のコマンドを使用することが、推奨されています。</p>
<ul>
<li><strong>AT+UART_CUR</strong><br>  UART構成を設定し、フラッシュに保存されません。</li>
<li><strong>AT+UART_DEF</strong><br>  UART構成を設定し、フラッシュに保存されます。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">AT+UART_CUR=&lt;ボーレート&gt;&lt;データビット&gt;&lt;ストップビット&gt;&lt;パリティ&gt;&lt;フロー制御&gt;</div><div class="line">AT+UART_DEF=&lt;ボーレート&gt;&lt;データビット&gt;&lt;ストップビット&gt;&lt;パリティ&gt;&lt;フロー制御&gt;</div><div class="line"></div><div class="line">例: AT+UART_CUR=9600,8,1,0,0</div><div class="line">    AT+UART_DEF=9600,8,1,0,0</div></pre></td></tr></table></figure>
<hr>
<p><strong>AT+SLEEP</strong><br>スリープモードを設定でき、ステーションモードでのみ使用できます<br>デフォルトはモデムスリープモードです</p>
<hr>
<h2 id="基本atコマンド一覧"><a href="#基本ATコマンド一覧" class="headerlink" title="基本ATコマンド一覧"></a>基本ATコマンド一覧</h2><table>
<thead>
<tr>
<th>コマンド</th>
<th>説明</th>
</tr>
</thead>
<tbody>
<tr>
<td>AT</td>
<td>起動時のテスト</td>
</tr>
<tr>
<td>AT+RST</td>
<td>再起動</td>
</tr>
<tr>
<td>AT+GMR</td>
<td>バージョン情報を表示</td>
</tr>
<tr>
<td>AT+GSLP</td>
<td>ディープスリープモードに入る</td>
</tr>
<tr>
<td>ATE</td>
<td>ATコマンドはエコーか?</td>
</tr>
<tr>
<td>AT+RESTORE</td>
<td>工場出荷時リセット</td>
</tr>
<tr>
<td>AT+UART</td>
<td>UART設定</td>
</tr>
<tr>
<td>AT+UART_CUR</td>
<td>UARTの現在の設定</td>
</tr>
<tr>
<td>AT+UART_DEF</td>
<td>UARTのデフォルト設定、フラッシュ保存</td>
</tr>
<tr>
<td>AT+SLEEP</td>
<td>スリープモード</td>
</tr>
<tr>
<td>AT+WAKEUPGPIO</td>
<td>ライトスリープモードからESP8266を起動させるGPIOを設定する</td>
</tr>
<tr>
<td>AT+RFPOWER</td>
<td>RF TX Powerの最大値を設定する</td>
</tr>
<tr>
<td>AT+RFVDD</td>
<td>RF TX電源をVDD33に従って設定してください</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="wifi-atコマンド一覧"><a href="#WiFi-ATコマンド一覧" class="headerlink" title="WiFi ATコマンド一覧"></a>WiFi ATコマンド一覧</h2><p>追加予定</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://espressif.com/sites/default/files/documentation/4a-esp8266_at_instruction_set_en.pdf" target="_blank" rel="external">ESP8266 AT Instruction Set Version 2.0.0</a></li>
<li><a href="http://nonnoise.github.io/ESP-WROOM-02/ATcommand.html" target="_blank" rel="external">ATコマンド集</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ESP8266でATコマンドを使ってみる&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;h2 id=&quot;使用する環境&quot;&gt;&lt;a href=&quot;#使用する環境&quot; class=&quot;headerlink&quot; title=&quot;使用する環境&quot;&gt;&lt;/a&gt;使用する環境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Arduino IDE を使用するのでインストールしておきます&lt;/strong&gt;&lt;br&gt;  → &lt;a href=&quot;/blog/2017/02/07/Arduino-install-step-070207/&quot; title=&quot;Arduino IDEのインストール&quot;&gt;Arduino IDEのインストール&lt;/a&gt;を参考&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ESPr Developer(ESP-WROOM-02開発ボード)を使用します&lt;br&gt;  → &lt;a href=&quot;http://amzn.to/2m7sk2X&quot;&gt;ESPr Developer（ESP-WROOM-02開発ボード）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ATコマンドを使える状態にしておいてください&lt;/strong&gt;&lt;br&gt;  一度でもArduinoのスケッチを書き込むとATコマンドが使えなくなるので、再びATコマンドが使えるようにするにはファームウェアを書き直す必要があります&lt;br&gt;  → &lt;a href=&quot;/blog/2017/02/06/esp8266-at-reset-170207/&quot; title=&quot;ArduinoのESP8266をATコマンドが使えるように戻す&quot;&gt;ArduinoのESP8266をATコマンドが使えるように戻す&lt;/a&gt;を参考&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="ESP8266" scheme="https://keijirotanabe.github.io/blog/categories/ESP8266/"/>
    
    
      <category term="ESP8266" scheme="https://keijirotanabe.github.io/blog/tags/ESP8266/"/>
    
      <category term="ESP-WROOM-02" scheme="https://keijirotanabe.github.io/blog/tags/ESP-WROOM-02/"/>
    
  </entry>
  
  <entry>
    <title>Googleフォトに置いてあるブログ用の画像が表示されなくなった</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/17/google-photo-not-show-170217/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/17/google-photo-not-show-170217/</id>
    <published>2017-02-17T03:27:09.000Z</published>
    <updated>2017-02-22T05:36:39.992Z</updated>
    
    <content type="html"><![CDATA[<p>ブログ用の画像をGoogleフォトから呼び出していたが、表示されなくなったので解決策をメモ</p>
<a id="more"></a>
<h1 id="問題の状態"><a href="#問題の状態" class="headerlink" title="問題の状態"></a>問題の状態</h1><p><img src="http://drive.google.com/uc?export=view&id=1dK6nMPhUOt0FNuN-aItNhM-9SH9Ip17ERA"></p>
<p><img src="http://drive.google.com/uc?export=view&id=1hhXQfcusUMsgiaeBLWdURkvHNtZHjcCuJg"></p>
<h1 id="解決策"><a href="#解決策" class="headerlink" title="解決策"></a>解決策</h1><p>imgタグ<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&quot;http://drive.google.com/uc?export=view&amp;id=&lt;画像ID&gt;&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>Markdown<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![](src=&quot;http://drive.google.com/uc?export=view&amp;id=&lt;画像ID&gt;&quot;)&gt;</div></pre></td></tr></table></figure></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://www.weed.nagoya/entry/2016/06/08/191000" target="_blank" rel="external">Googleフォトの写真や動画をWebページに埋め込むには（追記あり）</a></li>
<li><a href="http://tharadaa8.blogspot.jp/2016/03/google.html" target="_blank" rel="external">Google フォトの画像をホームページに貼る方法 </a></li>
<li><a href="https://gist.github.com/mattsuDev/5ed37be6d659e05eadd1" target="_blank" rel="external">Googleドライブの画像をMarkdownの中に挿入する方法.md</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ブログ用の画像をGoogleフォトから呼び出していたが、表示されなくなったので解決策をメモ&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexoのテーマicarusでサイト内検索を追加する</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/15/hexo-search-add-170216/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/15/hexo-search-add-170216/</id>
    <published>2017-02-15T19:01:51.000Z</published>
    <updated>2017-02-22T06:04:14.451Z</updated>
    
    <content type="html"><![CDATA[<p>Hexoのテーマicarusでサイト内検索を追加するのにつまづいたのでメモ</p>
<a id="more"></a>
<h1 id="_configymlの設定"><a href="#config-ymlの設定" class="headerlink" title="_config.ymlの設定"></a>_config.ymlの設定</h1><p>themes &gt; icarus &gt; _config.yml を編集</p>
<figure class="highlight yml"><figcaption><span>config.yml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">search:</span> </div><div class="line"><span class="attr">    insight:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>としたあと、</p>
<p><code>hexo-generator-json-content</code>をインストール</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-json-content --save</div></pre></td></tr></table></figure>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1lc9S7cgsX1Ar8c3NM6qC7mDX-b_qDY_x-Q" alt=""></p>
<p>これで、追加されるはず、、、</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s -p 8080 --draft</div></pre></td></tr></table></figure>
<p>が、サーバーを起動したらエラーが発生</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1t6sPhfi5FS_1S4RRDqETvD_xZKLTaMToMA" alt=""></p>
<h1 id="解決策"><a href="#解決策" class="headerlink" title="解決策"></a>解決策</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -S hexo-generator-json-content@1 --save</div></pre></td></tr></table></figure>
<p>とし、サーバーを起動</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=19j1bRjuvcde1neN4nhaEWZL4DhL3ZxUukg" alt=""></p>
<p>これで起動しました</p>
<p>サイト内検索もうまく追加されました</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1YH_mttOCgwKheERyWoikf4ftiKIk5NA6HA" alt=""></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://blog.yangcvo.me/2014/06/16/Blog/Hexo/hexo%E6%89%93%E5%8C%85%E6%8F%90%E7%A4%BA%E9%94%99%E8%AF%AF%EF%BC%9AERROR%20Plugin%20load%20failed:hexo-generator-json-content/" target="_blank" rel="external">hexo打包提示错误:ERROR Plugin load failed:hexo-generator-json-content</a></li>
<li><a href="https://github.com/hexojs/hexo/issues/1080" target="_blank" rel="external">Hexo插件无法运行/安装,hexo g提示ReferenceError: hexo is not defined</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexoのテーマicarusでサイト内検索を追加するのにつまづいたのでメモ&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://keijirotanabe.github.io/blog/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://keijirotanabe.github.io/blog/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>HexoにDisqusでコメント機能を追加する手順</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/15/hexo-disqus-add-comment-170215/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/15/hexo-disqus-add-comment-170215/</id>
    <published>2017-02-15T13:03:55.000Z</published>
    <updated>2017-02-22T07:26:06.527Z</updated>
    
    <content type="html"><![CDATA[<p>HexoにDisqusでコメント機能を追加する手順をまとめました</p>
<h1 id="disqus-公式サイト"><a href="#Disqus-公式サイト" class="headerlink" title="Disqus 公式サイト"></a>Disqus 公式サイト</h1><p><a href="https://disqus.com/" target="_blank" rel="external">https://disqus.com/</a></p>
<a id="more"></a>
<h1 id="disqusに登録"><a href="#Disqusに登録" class="headerlink" title="Disqusに登録"></a>Disqusに登録</h1><p>「GET STARTED」を選択</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1va5z1-WkTBBtmV8TAfJa9154qLIbFhe_aQ" alt=""></p>
<p>今回はGoogleアカウントで登録します</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=14LJWLsQ_k_Y8Go4AYFl0pPNb3SGyJ14kAw" alt=""></p>
<p>別ウィンドウが開くので入力</p>
<p><img src="https://drive.google.com/open?id=1m0Kd3lwAc9K9Wyyt0hQzGodn5z42Ehns1g" alt=""></p>
<p>「I want to install Disqus on my site」を選択</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1hc9G0zxQtmK1GrrTQro7KZisEWJRy_bcWg" alt=""></p>
<p>3ヶ所入力後、「Create Site」を選択</p>
<p><img src="https://drive.google.com/open?id=1oVOJx03vQHQjSfEAqFdtid_W8eIFW17e8Q" alt=""></p>
<p>「Got it. Let’s get started!」を選択</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=13p41WKHypFca6Y1wsX6RsT7C11R_ZZrrHw" alt=""></p>
<p>Hexoはないので、次へ</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1chqNIi5VH8Ns4Z1yWxPsRVnf4NuSIVBdyg" alt=""></p>
<p>使用しているテンプレートにコメントがない場合はscriptを追加してください<br>※このブログで使用している<code>icarus</code>にはコメントがあるので省略します</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1ZQCCgm1YBTP0GemokEWxVvo-yoGxnBnzew" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1pQkHj_0IWbOFyJW6USZgPTQq5TYWDVdWBg" alt=""></p>
<p>サイトのURLを入力し、「Complete Setup」を選択</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1KRzRXoR5IJ32KGAsu3RBFB3G-qbO4gJXPg" alt=""></p>
<p>Admin &gt; Settings &gt; blog &gt; General<br>「shortname」をコピー</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1WtOPXmbiel5bxqyndwx8DVqrMH3Q5boSvg" alt=""></p>
<p>shortnameを_config.ymlに記述<br><code>themes &gt; icarus &gt; _config.yml</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">comment:</div><div class="line">    disqus: [shortname]</div><div class="line">    duoshuo: [shortname]</div></pre></td></tr></table></figure>
<h1 id="関係のないコメントを消す"><a href="#関係のないコメントを消す" class="headerlink" title="関係のないコメントを消す"></a>関係のないコメントを消す</h1><p><img src="https://drive.google.com/uc?export=view&amp;id=1NTinMUraLb6IrSJJ4BumbhvPAAjY-qrxuQ" alt=""></p>
<p>Admin &gt; Settings &gt; blog &gt; General<br>Discoveryのチェックを外す</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1StdFmpbskoAaxzu6x72FZa2Za8IYYc-rhg" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1zIpit_OA8t7pFcEg1PS5mFkbPAWiKEATJg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HexoにDisqusでコメント機能を追加する手順をまとめました&lt;/p&gt;
&lt;h1 id=&quot;Disqus-公式サイト&quot;&gt;&lt;a href=&quot;#Disqus-公式サイト&quot; class=&quot;headerlink&quot; title=&quot;Disqus 公式サイト&quot;&gt;&lt;/a&gt;Disqus 公式サイト&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://disqus.com/&quot;&gt;https://disqus.com/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://keijirotanabe.github.io/blog/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://keijirotanabe.github.io/blog/tags/Hexo/"/>
    
      <category term="Disqus" scheme="https://keijirotanabe.github.io/blog/tags/Disqus/"/>
    
  </entry>
  
  <entry>
    <title>HEXOで目次を自動で作成してくれるhexo-tocをインストール</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/14/hexo-toc-install-170215/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/14/hexo-toc-install-170215/</id>
    <published>2017-02-14T18:59:49.000Z</published>
    <updated>2017-02-22T07:13:53.440Z</updated>
    
    <content type="html"><![CDATA[<p>Hexoで目次を自動で作成してくれる<code>hexo-toc</code>を使うための手順をまとめました</p>
<p><img src="https://drive.google.com/uc?export=view&id=1x4xI-vlOBWh6eCNJcSQrq6G5tfo2zmy9Yg" style="width: 320px; height: 200px;"></p>
<a id="more"></a>
<h1 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h1><!-- toc -->
<ul>
<li><a href="#ブルーの目次">ブルーの目次</a><ul>
<li><a href="#オプションの説明">オプションの説明</a></li>
<li><a href="#記事から呼び出す">記事から呼び出す</a></li>
</ul>
</li>
<li><a href="#オレンジの目次">オレンジの目次</a></li>
</ul>
<!-- tocstop -->
<h1 id="ブルーの目次"><a href="#ブルーの目次" class="headerlink" title="ブルーの目次"></a>ブルーの目次</h1><p>hexo-toc GitHubページ<br><a href="https://github.com/bubkoo/hexo-toc" target="_blank" rel="external">https://github.com/bubkoo/hexo-toc</a></p>
<p>インストールコマンド<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-toc --save</div></pre></td></tr></table></figure></p>
<p><code>themes/icarus/_config.yml</code>に以下を追加</p>
<p><code>icarus</code>は使用しているテンプレート名です</p>
<figure class="highlight yml"><figcaption><span>config.yml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attr">toc:</span></div><div class="line"><span class="attr">  maxdepth:</span> <span class="number">3</span></div><div class="line"><span class="attr">  class:</span> toc</div><div class="line"><span class="attr">  slugify:</span> transliteration</div><div class="line"><span class="attr">  anchor:</span></div><div class="line"><span class="attr">    position:</span> after</div><div class="line"><span class="attr">    symbol:</span> <span class="string">'#'</span></div><div class="line"><span class="attr">    style:</span> header-anchor</div></pre></td></tr></table></figure>
<h2 id="オプションの説明"><a href="#オプションの説明" class="headerlink" title="オプションの説明"></a>オプションの説明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">maxdepth ：最大深度以下の見出しを使用します。</div><div class="line">class ：tocのCSSクラス。 （ デフォルトはfalse ）</div><div class="line">slugify ：使用したい機能を選択します。 現在、 uslug （ デフォルト ）と音訳をサポートしています。</div><div class="line">anchor ：各見出しにアンカーを付けるかどうか。 （ デフォルトはfalse ）</div><div class="line"></div><div class="line">    position ：アンカーは、タイトルのbefore 、タイトルのafter 、またはタイトルのafter before置く必要があります。 （ デフォルトはafter ）。</div><div class="line">    symbol ：あなたがアンカーにしたいシンボル。 （ デフォルトは# ）。</div><div class="line">    style ：アンカーのCSSクラスです（ デフォルトはheader-anchor ）。</div></pre></td></tr></table></figure>
<h2 id="記事から呼び出す"><a href="#記事から呼び出す" class="headerlink" title="記事から呼び出す"></a>記事から呼び出す</h2><p>呼び出したい箇所で以下を追加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 目次</div><div class="line">&lt;!-- toc --&gt;</div></pre></td></tr></table></figure>
<h1 id="オレンジの目次"><a href="#オレンジの目次" class="headerlink" title="オレンジの目次"></a>オレンジの目次</h1><p>呼び出したい記事で以下を追加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">toc: true</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexoで目次を自動で作成してくれる&lt;code&gt;hexo-toc&lt;/code&gt;を使うための手順をまとめました&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://drive.google.com/uc?export=view&amp;id=1x4xI-vlOBWh6eCNJcSQrq6G5tfo2zmy9Yg&quot; style=&quot;width: 320px; height: 200px;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://keijirotanabe.github.io/blog/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://keijirotanabe.github.io/blog/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>有機ＥＬキャラクタディスプレイモジュールをESP8266(ESP-WROOM-02)で使う</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/14/esp8266-oled-how-to-use-170214/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/14/esp8266-oled-how-to-use-170214/</id>
    <published>2017-02-14T02:20:26.000Z</published>
    <updated>2017-02-22T05:51:53.035Z</updated>
    
    <content type="html"><![CDATA[<p>有機ＥＬキャラクタディスプレイモジュールをESP8266(ESP-WROOM-02)でmikroCのLcd Library風に使う</p>
<p>これみたいに使う<br>mikroC PRO for PIC &gt; Lcd Library<br>→ <a href="https://download.mikroe.com/documents/compilers/mikroc/pic/help/lcd_library.htm" target="_blank" rel="external">https://download.mikroe.com/documents/compilers/mikroc/pic/help/lcd_library.htm</a></p>
<h1 id="使うもの"><a href="#使うもの" class="headerlink" title="使うもの"></a>使うもの</h1><ul>
<li><p>有機ＥＬキャラクタディスプレイモジュール　１６ｘ２行　白色<br>  → <a href="http://akizukidenshi.com/catalog/g/gP-08277/" target="_blank" rel="external">http://akizukidenshi.com/catalog/g/gP-08277/</a></p>
<p>  １６文字×２行の有機ＥＬ（ＯＬＥＤ）ディスプレイです。<br>  マイコン等で制御することで内部に登録済みの任意の文字を表示させることが出来ます。<br>  液晶と違い、文字が光りますので暗い場所での視認性が良好です。また視野角が広いです。<br>  特長<br>  ・コントラストが高く視認性に優れます。<br>  ・視野角が広いです。<br>  ・３．３Ｖ単一電源動作です。<br>  ・Ｉ２Ｃインタフェースです。</p>
</li>
<li><p>自作したライブラリ<br>  → <a href="https://github.com/keijirotanabe/Arduino-Oled-like-mikroC" target="_blank" rel="external">https://github.com/keijirotanabe/Arduino-Oled-like-mikroC</a></p>
</li>
<li><p>ESP8266(ESP-WROOM-02)<br>  → <a href="http://amzn.to/2lEjWZf" target="_blank" rel="external">ESPr Developer(ESP-WROOM-02開発ボード)</a></p>
</li>
</ul>
<a id="more"></a>
<h1 id="配線"><a href="#配線" class="headerlink" title="配線"></a>配線</h1><p>有機ＥＬキャラクタディスプレイモジュール１６ｘ２行のピン配列</p>
<table>
<thead>
<tr>
<th>OLED(pin番号)</th>
<th>ESP8266</th>
<th>説明</th>
</tr>
</thead>
<tbody>
<tr>
<td>VSS(1)</td>
<td>GND</td>
<td>電源グランド</td>
</tr>
<tr>
<td>VDD(2)</td>
<td>3.3V</td>
<td>電源＋</td>
</tr>
<tr>
<td>/CS(3)</td>
<td>GND</td>
<td>必ずVSSに接続</td>
</tr>
<tr>
<td>SA0(4)</td>
<td>GND</td>
<td>スレーブアドレス L→0x3C or H→0x3D</td>
</tr>
<tr>
<td>SCL(7)</td>
<td>IO5</td>
<td>I2C クロック, 4.7kΩでプルアップ</td>
</tr>
<tr>
<td>SDA in(8)</td>
<td>IO4</td>
<td>I2C データ入力, 4.7kΩでプルアップ</td>
</tr>
<tr>
<td>SDA out(9)</td>
<td>IO4</td>
<td>I2C データ出力, 4.7kΩでプルアップ</td>
</tr>
</tbody>
</table>
<p><img src="https://drive.google.com/uc?export=view&amp;id=17mySfVa9fu4iWWfJjy2Y0t-Yq-1GsIG-yw" alt=""></p>
<h1 id="自作ライブラリをインポート"><a href="#自作ライブラリをインポート" class="headerlink" title="自作ライブラリをインポート"></a>自作ライブラリをインポート</h1><p>ダウンロード<br><a href="https://github.com/keijirotanabe/Arduino-Oled-like-mikroC" target="_blank" rel="external">https://github.com/keijirotanabe/Arduino-Oled-like-mikroC</a></p>
<p><img src="https://drive.google.com/open?iduc?export=view&amp;=1vUmlVC0P72gGBLtSEBrOrjQobLDVjlYtdQ" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1i_D46L3-Rqy1uT1LLVhueqX3-ur-POc-Pw" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1EZWVlAnKrQAnB3u3mXNwEUXm3MwVB58bDA" alt=""></p>
<h1 id="使い方"><a href="#使い方" class="headerlink" title="使い方"></a>使い方</h1><h2 id="自作ライブラリのインクルード"><a href="#自作ライブラリのインクルード" class="headerlink" title="自作ライブラリのインクルード"></a>自作ライブラリのインクルード</h2><p><img src="https://drive.google.com/uc?export=view&amp;id=156JIV4yJNkWwYwScXRt5pM2wvge5htzEOA" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1swTveb7JfZN8F3bCw-0t9CPeckGKmo5cKg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#include &lt;Wire.h&gt;</div><div class="line">#include &lt;Arduino-Oled-like-mikroC.h&gt;</div></pre></td></tr></table></figure>
<p>直接、記述してもかまいません</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=17cnWMq2aIrESh6n8SSmzezAosexl8XVgYA" alt=""></p>
<h2 id="関数一覧"><a href="#関数一覧" class="headerlink" title="関数一覧"></a>関数一覧</h2><table>
<thead>
<tr>
<th>コマンド</th>
<th>目的</th>
<th>サンプルコード</th>
</tr>
</thead>
<tbody>
<tr>
<td>Oled_Init</td>
<td>初期化</td>
<td>Oled_Init()</td>
</tr>
<tr>
<td>Oled_Cmd</td>
<td>コマンド書き込み(↓の表を引数にとる)</td>
<td>Oled_Cmd(ClearDisplay)</td>
</tr>
<tr>
<td>Oled_Out</td>
<td>位置を指定して、文字列を表示</td>
<td>Oled_Out(1, 1, “Hello World!”)</td>
</tr>
<tr>
<td>Oled_Out_Cp</td>
<td>カーソルのある位置に文字列を表示</td>
<td>Oled_Out_Cp(“Hello World!”)</td>
</tr>
<tr>
<td>Oled_Chr</td>
<td>位置を指定して、１文字を表示</td>
<td>Oled_Out(2, 1, ‘A’)</td>
</tr>
<tr>
<td>Oled_Chr_Cp</td>
<td>カーソルのある位置に１文字を表示</td>
<td>Oled_Chr_Cp(‘A’)</td>
</tr>
<tr>
<td>Oled_Set_Cursor</td>
<td>カーソルの位置を変更</td>
<td>Oled_Set_Cursor(2, 1)</td>
</tr>
<tr>
<td>Oled_Set_Contrast</td>
<td>コントラストを変更</td>
<td>Oled_Set_Contrast(0x7F)</td>
</tr>
<tr>
<td>Oled_Max_Contrast</td>
<td>コントラスト最大</td>
<td>Oled_Max_Contrast()</td>
</tr>
<tr>
<td>Oled_Min_Contrast</td>
<td>コントラスト最小</td>
<td>Oled_Min_Contrast()</td>
</tr>
</tbody>
</table>
<h2 id="oled_cmd関数のコマンド一覧"><a href="#Oled-Cmd関数のコマンド一覧" class="headerlink" title="Oled_Cmd関数のコマンド一覧"></a>Oled_Cmd関数のコマンド一覧</h2><p><code>Oled_Cmd(コマンド)</code></p>
<table>
<thead>
<tr>
<th>コマンド</th>
<th>目的</th>
</tr>
</thead>
<tbody>
<tr>
<td>ClearDisplay</td>
<td>表示をクリアする</td>
</tr>
<tr>
<td>ReturnHome</td>
<td>カーソルをホームポジションに戻し、シフト表示を元の位置に戻します</td>
</tr>
<tr>
<td>DisplayON</td>
<td>液晶ディスプレイをオンにする</td>
</tr>
<tr>
<td>DisplayOFF</td>
<td>液晶ディスプレイをオフにする</td>
</tr>
<tr>
<td>CursorON</td>
<td>カーソルをオフにする</td>
</tr>
<tr>
<td>CursorOFF</td>
<td>カーソルをオンにする</td>
</tr>
<tr>
<td>BlinkON</td>
<td>カーソルを点滅させる</td>
</tr>
<tr>
<td>BlinkOFF</td>
<td>カーソルを点滅さない</td>
</tr>
<tr>
<td>ShiftLeft</td>
<td>表示RAMデータを変更せずに表示を左にシフト</td>
</tr>
<tr>
<td>ShiftRight</td>
<td>表示RAMデータを変更せずに表示を右にシフト</td>
</tr>
<tr>
<td>CursorLeft</td>
<td>表示RAMデータを変更せずにカーソルを左に移動</td>
</tr>
<tr>
<td>CursorRight</td>
<td>表示RAMデータを変更せずにカーソルを右に移動</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有機ＥＬキャラクタディスプレイモジュールをESP8266(ESP-WROOM-02)でmikroCのLcd Library風に使う&lt;/p&gt;
&lt;p&gt;これみたいに使う&lt;br&gt;mikroC PRO for PIC &amp;gt; Lcd Library&lt;br&gt;→ &lt;a href=&quot;https://download.mikroe.com/documents/compilers/mikroc/pic/help/lcd_library.htm&quot;&gt;https://download.mikroe.com/documents/compilers/mikroc/pic/help/lcd_library.htm&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;使うもの&quot;&gt;&lt;a href=&quot;#使うもの&quot; class=&quot;headerlink&quot; title=&quot;使うもの&quot;&gt;&lt;/a&gt;使うもの&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;有機ＥＬキャラクタディスプレイモジュール　１６ｘ２行　白色&lt;br&gt;  → &lt;a href=&quot;http://akizukidenshi.com/catalog/g/gP-08277/&quot;&gt;http://akizukidenshi.com/catalog/g/gP-08277/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  １６文字×２行の有機ＥＬ（ＯＬＥＤ）ディスプレイです。&lt;br&gt;  マイコン等で制御することで内部に登録済みの任意の文字を表示させることが出来ます。&lt;br&gt;  液晶と違い、文字が光りますので暗い場所での視認性が良好です。また視野角が広いです。&lt;br&gt;  特長&lt;br&gt;  ・コントラストが高く視認性に優れます。&lt;br&gt;  ・視野角が広いです。&lt;br&gt;  ・３．３Ｖ単一電源動作です。&lt;br&gt;  ・Ｉ２Ｃインタフェースです。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自作したライブラリ&lt;br&gt;  → &lt;a href=&quot;https://github.com/keijirotanabe/Arduino-Oled-like-mikroC&quot;&gt;https://github.com/keijirotanabe/Arduino-Oled-like-mikroC&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ESP8266(ESP-WROOM-02)&lt;br&gt;  → &lt;a href=&quot;http://amzn.to/2lEjWZf&quot;&gt;ESPr Developer(ESP-WROOM-02開発ボード)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="ESP8266" scheme="https://keijirotanabe.github.io/blog/categories/ESP8266/"/>
    
    
      <category term="Arduino" scheme="https://keijirotanabe.github.io/blog/tags/Arduino/"/>
    
      <category term="ESP8266" scheme="https://keijirotanabe.github.io/blog/tags/ESP8266/"/>
    
      <category term="ESP-WROOM-02" scheme="https://keijirotanabe.github.io/blog/tags/ESP-WROOM-02/"/>
    
  </entry>
  
  <entry>
    <title>Raspberry Pi 3のはじめかた</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/11/raspberry-pi-3-starting-step-170210/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/11/raspberry-pi-3-starting-step-170210/</id>
    <published>2017-02-11T01:49:17.000Z</published>
    <updated>2017-02-22T01:49:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Raspberry Pi 3 にRaspbianをインストールして使えるようにするまでのやり方を解説します。</p>
<h1 id="公式サイト"><a href="#公式サイト" class="headerlink" title="公式サイト"></a>公式サイト</h1><p><a href="https://www.raspberrypi.org/" target="_blank" rel="external">https://www.raspberrypi.org/</a></p>
<a id="more"></a>
<h1 id="使用する環境"><a href="#使用する環境" class="headerlink" title="使用する環境"></a>使用する環境</h1><ul>
<li>Windows10 Home 64bit</li>
<li>Raspberry Pi 3 Model B Element14版</li>
<li>Raspbian Jessie with PIXEL</li>
</ul>
<h1 id="必要なもの"><a href="#必要なもの" class="headerlink" title="必要なもの"></a>必要なもの</h1><ul>
<li><a href="http://amzn.to/2lEbclX" target="_blank" rel="external">Raspberry Pi 3 本体</a></li>
<li><a href="http://amzn.to/2lCQFgQ" target="_blank" rel="external">microSD (8G以上)</a><br>  ↓によると SD と Raspberry Pi には相性があるようです<br>  参考: <a href="http://elinux.org/RPi_SD_cards" target="_blank" rel="external">http://elinux.org/RPi_SD_cards</a></li>
<li>マウス</li>
<li>キーボード</li>
<li>モニター<br>  HDMI出力ができるもの</li>
<li><a href="http://amzn.to/2lCwSxS" target="_blank" rel="external">HDMIケーブル</a></li>
<li>電源 MicroUSB経由 (2.5A推奨)<br>  ここでは2.4Aのを使っています</li>
</ul>
<h1 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h1><p>その前に、これは覚えておいてください。</p>
<p>電源ON → 電源ケーブルを挿す<br>電源OFF → <code>sudo poweroff</code></p>
<p>手順を説明します。</p>
<h2 id="まずはsdをフォーマットする"><a href="#まずはSDをフォーマットする" class="headerlink" title="まずはSDをフォーマットする"></a>まずはSDをフォーマットする</h2><p>「SDカードフォーマッター」でSDカードをフォーマット(初期化)します。</p>
<p>ダウンロード先<br><a href="https://www.sdcard.org/jp/downloads/formatter_4/index.html" target="_blank" rel="external">https://www.sdcard.org/jp/downloads/formatter_4/index.html</a></p>
<p>詳しくは<a href="/blog/2017/02/10/sd-formatter-4-170210/" title="SDカードフォーマッターの使い方">SDカードフォーマッターの使い方</a></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1GgeB9NRR7ay_fPmgq7TCnyWVfRW7rj77vw" alt=""></p>
<h2 id="raspbianの用意"><a href="#「Raspbian」の用意" class="headerlink" title="「Raspbian」の用意"></a>「Raspbian」の用意</h2><p>ダウンロード先<br><a href="https://www.raspberrypi.org/downloads/raspbian/" target="_blank" rel="external">https://www.raspberrypi.org/downloads/raspbian/</a></p>
<p><a href="https://ja.wikipedia.org/wiki/%E3%82%B0%E3%83%A9%E3%83%95%E3%82%A3%E3%82%AB%E3%83%AB%E3%83%A6%E3%83%BC%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9" target="_blank" rel="external">GUI</a>版と<a href="https://ja.wikipedia.org/wiki/%E3%82%AD%E3%83%A3%E3%83%A9%E3%82%AF%E3%82%BF%E3%83%A6%E3%83%BC%E3%82%B6%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9" target="_blank" rel="external">CUI</a>版がありますが、今回はGUI版をダウンロードします</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1QQFN6hUVbepusPA4KWaFNoxs98gJjvtuDg" alt=""></p>
<h2 id="raspbianをsdカードに書き込む"><a href="#「Raspbian」をSDカードに書き込む" class="headerlink" title="「Raspbian」をSDカードに書き込む"></a>「Raspbian」をSDカードに書き込む</h2><p>RaspbianをSDカードに書き込むには、「Win32DiskImager」を使います</p>
<p>ダウンロード先<br><a href="https://ja.osdn.net/projects/sfnet_win32diskimager/" target="_blank" rel="external">https://ja.osdn.net/projects/sfnet_win32diskimager/</a></p>
<p>詳しくは<a href="/blog/2017/02/10/win32-disk-imager-170211/" title="Win32DiskImagerの使い方">Win32DiskImagerの使い方</a></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=13i_NbuaDH3Zm23eWO-Co4XUVrWFRYUginA" alt=""></p>
<h2 id="raspberry-piを起動させる"><a href="#Raspberry-Piを起動させる" class="headerlink" title="Raspberry Piを起動させる"></a>Raspberry Piを起動させる</h2><p>SDカードを挿します</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=11L3dyOtXZHnyF5xg0RCflTg1IAsSLyG9QQ" alt=""></p>
<p>周辺を接続</p>
<p>電源は最後に挿します</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1W20IzqR0yYaeRf2yIjEFEQuuh6edsnFwPA" alt=""></p>
<p>起動しました</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=15ma3VA1HoxASlmKmTK5MwivQzPA0cgY4QA" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1X41JEXx4yrqbLue40LipiQKNaDYFWtL9ig" alt=""></p>
<h1 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h1><h2 id="まずはwifiに接続"><a href="#まずはWiFiに接続" class="headerlink" title="まずはWiFiに接続"></a>まずはWiFiに接続</h2><p>Raspberry Pi 3には標準でWiFiがついています。</p>
<p>また、Raspberry Pi 2以前では、WiFi機能がないのでWiFiドングルが必要です。</p>
<p>接続方法</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1Vkfp61Tm3_FAKnSj4UFTJzI0258j0Cmjxw" alt=""></p>
<h2 id="windowsからsshで接続"><a href="#WindowsからSSHで接続" class="headerlink" title="WindowsからSSHで接続"></a>WindowsからSSHで接続</h2><h3 id="sshの設定をonに"><a href="#SSHの設定をONに" class="headerlink" title="SSHの設定をONに"></a>SSHの設定をONに</h3><p>Preferences &gt; Raspberry Pi Configuration</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1CIRtA4GOYdc2PoxeLV9AOozEsHQfFN5hnw" alt=""></p>
<p>Interfaces &gt; SSH: Enabled &gt; OK</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1l4UxAIftx905yjlwk6P_G8c8xn1los1dBA" alt=""></p>
<h3 id="ipアドレスの確認"><a href="#IPアドレスの確認" class="headerlink" title="IPアドレスの確認"></a>IPアドレスの確認</h3><p>ターミナルを起動します</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=181_m267p5vAkcAPf9QmLvUMcwG0GwtQA4g" alt=""></p>
<p>以下のコマンドを入力</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ifconfig</div></pre></td></tr></table></figure>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1YNAYM2sDXEzVWJzuY_SnodE97B-Q_KkHWw" alt=""></p>
<p>調べたIPアドレスはメモしておいてください</p>
<h3 id="tera-termで接続"><a href="#Tera-Termで接続" class="headerlink" title="Tera Termで接続"></a>Tera Termで接続</h3><p>Tera Term をインストール</p>
<p>ダウンロード先<br><a href="https://ja.osdn.net/projects/ttssh2/releases/66795" target="_blank" rel="external">https://ja.osdn.net/projects/ttssh2/releases/66795</a></p>
<p>↑で調べたIPアドレスを入力して「OK」</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1oe0UyaNKhDXEDopxGegU9MLL2Cvcdtvz0A" alt=""></p>
<p>セキュリティ警告「続行」</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1cEllQmrJ_wxH66clLhZACmKRRqTE2-5e1A" alt=""></p>
<p>ユーザー名とパスワードを入力して「OK」</p>
<p>なお、デフォルトの設定は</p>
<table>
<thead>
<tr>
<th>ユーザー名</th>
<th>パスワード</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>pi</code></td>
<td><code>raspberry</code></td>
</tr>
</tbody>
</table>
<p>となっています</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1l5i3woXAm1ni7fILsodWZtioGnHHmu_4eQ" alt=""></p>
<p>ログイン画面</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1nBtigO3cC7ZwggO2Wh1u_Z8ip_uM2IVWUA" alt=""></p>
<h2 id="パッケージの更新"><a href="#パッケージの更新" class="headerlink" title="パッケージの更新"></a>パッケージの更新</h2><p>リポジトリのアップデート</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div></pre></td></tr></table></figure>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1zf53jRe9r8FMox7E5W1bh5FttMGOJ946Yw" alt=""></p>
<p>つづいて ↓ のコマンドでパッケージのアップデート<br>※時間がかかるので注意してください</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get upgrade</div></pre></td></tr></table></figure>
<p>途中で聞かれたら「y」を入力して「Enter」</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1G6YSp2wW9WDmDaPYBptNW9mj_46WdJ1wig" alt=""></p>
<p>途中で聞かれたら「q」を入力</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1Mf2V-2lkgkJPsr1UlBZPf9RaxbhQSq4lwA" alt=""></p>
<p>終了するまで、1時間くらいかかりました</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1-8u-BdknqrpuJozNJ3EP50b0p7GhW0oNIQ" alt=""></p>
<h2 id="日本語化する"><a href="#日本語化する" class="headerlink" title="日本語化する"></a>日本語化する</h2><h3 id="ロケールとタイムゾーンの変更"><a href="#ロケールとタイムゾーンの変更" class="headerlink" title="ロケールとタイムゾーンの変更"></a>ロケールとタイムゾーンの変更</h3><p><img src="https://drive.google.com/uc?export=view&amp;id=1QjGRf3S-rlQCqx5zmjOPgn14kqbNH4w1oQ" alt="Preferences &gt; Raspberry Pi Configuration"></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1JnGaTBueF_J6fkff5074YYAkCrnKXDm09w" alt="「Locale」の設定"></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1ri-uVzt2pwYg7VdVtzREJVnaYW2_kS5-nQ" alt="画像のように変更して「OK」"></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1daKXtEEBZ25cxhpt8Uc3fWW0mv15ul0uSw" alt="「Timezone」の設定"></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1EOjZ_TUIS0y6UURiiwJKulH9CHXS6Q3BHw" alt="画像のように変更して「OK」"></p>
<p>「OK」を押して再起動してください。<br><img src="https://drive.google.com/uc?export=view&amp;id=1f8vluuz_H33zYBzvAxyJV3UVuqayAGFfIg" alt="「OK」を押す"></p>
<h3 id="日本語入力できるようにする"><a href="#日本語入力できるようにする" class="headerlink" title="日本語入力できるようにする"></a>日本語入力できるようにする</h3><p>日本語IMEをインストールします。<br>今回は、<code>ibus-mozc</code>を使います。</p>
<p>↓ でインストール<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install ibus-mozc</div></pre></td></tr></table></figure></p>
<p>これで、日本語入力ができるようになりました。<br><img src="https://drive.google.com/uc?export=view&amp;id=138XyZD0k7j1xMBpCj2qfaNXRTgB7u9gCvA" alt=""></p>
<h2 id="リモートデスクトップでpcから操作できるようにする"><a href="#リモートデスクトップでPCから操作できるようにする" class="headerlink" title="リモートデスクトップでPCから操作できるようにする"></a>リモートデスクトップでPCから操作できるようにする</h2><p>詳しくは<br><a href="/blog/2017/02/11/raspberry-pi-remote-disktop-170211/" title="Raspberry Pi 3をリモートデスクトップで操作できるようにする">Raspberry Pi 3をリモートデスクトップで操作できるようにする</a></p>
<p>↓ をインストール<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install tightvncserver</div><div class="line">sudo apt-get install xrdp</div></pre></td></tr></table></figure></p>
<p>↓ キーボードの設定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cd /etc/xrdp/</div><div class="line">sudo wget http://w.vmeta.jp/temp/km-0411.ini</div><div class="line">sudo ln -s km-0411.ini km-e0010411.ini</div><div class="line">sudo ln -s km-0411.ini km-e0200411.ini</div><div class="line">sudo ln -s km-0411.ini km-e0210411.ini</div><div class="line">sudo service xrdp restart</div></pre></td></tr></table></figure></p>
<p>先ほど調べたIPアドレスへ接続します</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1JivpnB-rSjfyaR41wTZPEY3XY6Mf5NSizQ" alt=""></p>
<p>ユーザー名とパスワードを入力して「OK」</p>
<ul>
<li>ユーザー名: <code>pi</code></li>
<li>パスワード: <code>raspberry</code></li>
</ul>
<p><img src="https://drive.google.com/uc?export=view&amp;id=15zzAlYBj_STR_9K3jF9FnV4bzs89SfiewA" alt=""></p>
<p>以下の画面が表示されます</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1MkjO2qzvWyDQW49oPPvA_08qupB-nz4FXg" alt=""></p>
<h2 id="avahiでホスト名でアクセスできるようにする"><a href="#Avahiでホスト名でアクセスできるようにする" class="headerlink" title="Avahiでホスト名でアクセスできるようにする"></a>Avahiでホスト名でアクセスできるようにする</h2><p>Tera Termや、リモートデスクトップからログインするするには、IPアドレス分からないといけません。<br>ですが、IPアドレスは変わるので、変わる度に調べるのはめんどうです。<br>IPアドレスを固定するか、Avahiでホスト名でアクセスできると便利です。</p>
<p>「Raspbian Jessie with PIXEL」には、初めからAvahiがインストールされていました。</p>
<p>Avahiがインストールされているかは↓のコマンドで調べられます。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dpkg -l avahi-daemon</div></pre></td></tr></table></figure></p>
<p><code>0.6.31-5</code>がインストールされていました。</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1CxnQTL0Y9BqjeEvpEhYzhPqLFEF9vhFMAw" alt=""></p>
<p>入ってなければ、↓のコマンドでインストールできます。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install avahi-daemon</div></pre></td></tr></table></figure></p>
<p>接続するPCには、Bonjourをインストールします。</p>
<p>BonjourはiTunesにも使われてますので、iTunesをインストールされているなら、このステップは飛ばしてください。</p>
<p>ダウンロード<br><a href="https://support.apple.com/kb/DL999?locale=ja_JP" target="_blank" rel="external">https://support.apple.com/kb/DL999?locale=ja_JP</a></p>
<p>必要なのはBonjourですので、プリンタウィザードはあとでアンインストールして構いません。</p>
<p>あとは、<code>raspberrypi.local</code>で接続します。<br><img src="https://drive.google.com/uc?export=view&amp;id=182GdDVhM64v-IFmTVUVR_QNl-shxxq7B0A" alt=""></p>
<p><code>raspberrypi</code>がホスト名です。<br>接続するには、ホスト名のあとに、<code>.local</code>をつけます。</p>
<p>ホスト名は↓のコマンドで確認できます。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /etc/hostname</div></pre></td></tr></table></figure></p>
<p>ホスト名を変更するには<code>hostname</code>ファイルをvimなどで変更してください。</p>
<h1 id="設定したデータのバックアップをとる"><a href="#設定したデータのバックアップをとる" class="headerlink" title="設定したデータのバックアップをとる"></a>設定したデータのバックアップをとる</h1><p>まず、Raspberry Piの電源を切りますが、電源スイッチはついていません。<br>↓のコマンドで電源OFFします。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo poweroff</div></pre></td></tr></table></figure></p>
<p>電源が切れたら、SDをPCに接続してください。</p>
<p>管理者権限で、Win32DiskImagerを起動します。<br>ファイルマークを押してください。</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1lXkAXkNax4dZgaXUAZ8UqSY4WkdBTfr1UA" alt=""></p>
<p>今回は、デスクトップに「2017-02-22-raspbian-back.img」で保存します。</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1Tmh_Re7xTEDZJtCdsc7JnHB3Xe-ASjWbrQ" alt=""></p>
<p>SDの「Device」を確認し、「Read」を選択</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1je3k2avHFfIhFNl-BBmIRIlCjhI0DvdBLg" alt=""></p>
<p>完了しました。</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1GMOavxhp151C0tKWbrMmtCIp_dGPtVSkqQ" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Raspberry Pi 3 にRaspbianをインストールして使えるようにするまでのやり方を解説します。&lt;/p&gt;
&lt;h1 id=&quot;公式サイト&quot;&gt;&lt;a href=&quot;#公式サイト&quot; class=&quot;headerlink&quot; title=&quot;公式サイト&quot;&gt;&lt;/a&gt;公式サイト&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.raspberrypi.org/&quot;&gt;https://www.raspberrypi.org/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Raspberry Pi" scheme="https://keijirotanabe.github.io/blog/categories/Raspberry-Pi/"/>
    
    
      <category term="Raspberry Pi" scheme="https://keijirotanabe.github.io/blog/tags/Raspberry-Pi/"/>
    
      <category term="Raspberry Pi 3" scheme="https://keijirotanabe.github.io/blog/tags/Raspberry-Pi-3/"/>
    
  </entry>
  
  <entry>
    <title>コマンドプロンプトの起動方法</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/11/command-prompt-start-up-170211/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/11/command-prompt-start-up-170211/</id>
    <published>2017-02-11T01:41:44.000Z</published>
    <updated>2017-02-22T04:57:43.853Z</updated>
    
    <content type="html"><![CDATA[<p>コマンドプロンプトの起動方法をメモ</p>
<a id="more"></a>
<h2 id="共通"><a href="#共通" class="headerlink" title="共通"></a>共通</h2><p><code>「Windowsキー」+「R」</code>→ 「ファイル名を指定して実行」<br><img src="https://drive.google.com/uc?export=view&amp;id=13HzI-FXlK_DjVfxrvsx0elkA6FCRku4r3Q" alt=""></p>
<h2 id="windows10"><a href="#Windows10" class="headerlink" title="Windows10"></a>Windows10</h2><p><img src="https://drive.google.com/uc?export=view&amp;id=1lqIziTSacsemYDvQFlPPVFOt3DX70GkEvQ" alt=""><br><img src="https://drive.google.com/uc?export=view&amp;id=1Z13RVoI1iTPrjPikK4XWTJ4QKazEke7Ilg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;コマンドプロンプトの起動方法をメモ&lt;/p&gt;
    
    </summary>
    
      <category term="補足" scheme="https://keijirotanabe.github.io/blog/categories/%E8%A3%9C%E8%B6%B3/"/>
    
    
      <category term="補足" scheme="https://keijirotanabe.github.io/blog/tags/%E8%A3%9C%E8%B6%B3/"/>
    
  </entry>
  
  <entry>
    <title>Raspberry Pi 3をリモートデスクトップで操作できるようにする</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/11/raspberry-pi-remote-disktop-170211/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/11/raspberry-pi-remote-disktop-170211/</id>
    <published>2017-02-11T00:52:02.000Z</published>
    <updated>2017-02-20T00:52:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>Raspberry Piにxrdpをインストールして、Windowsのリモートデスクトップ機能から操作できるようにする</p>
<a id="more"></a>
<h1 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h1><ul>
<li>Windows10 Home 64bit</li>
<li><a href="http://amzn.to/2kkapVB" target="_blank" rel="external">Raspberry Pi 3 Model B (Element14)</a></li>
<li><a href="https://www.raspberrypi.org/downloads/raspbian/" target="_blank" rel="external">Raspbian Jessie with PIXEL</a></li>
<li><a href="https://ja.osdn.net/projects/ttssh2/" target="_blank" rel="external">Tera Term バージョン 4.9.2</a></li>
</ul>
<h1 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h1><h2 id="tightvncserverのインストール"><a href="#tightvncserverのインストール" class="headerlink" title="tightvncserverのインストール"></a>tightvncserverのインストール</h2><p><code>xrdp</code>というパッケージをインストールしますが、先に<code>tightvncserver</code>をインストールする必要があります</p>
<p>以下のコマンドでインストール</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install tightvncserver</div></pre></td></tr></table></figure>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1OfVJs_YsNRNNqFWkc-Nn7OODLoRBwccj-g" alt=""></p>
<p>途中で聞かれたら「y」を入力して「Enter」</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1IAx9J2isbGfqOnnirQRQBAQxgEXSm6hwGA" alt=""></p>
<h2 id="xrdpのインストール"><a href="#xrdpのインストール" class="headerlink" title="xrdpのインストール"></a>xrdpのインストール</h2><p>以下のコマンドでインストール</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install xrdp</div></pre></td></tr></table></figure>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1mL9HCFhjcHJR1RULJOjo3-CyUVpGw1ucWg" alt=""></p>
<p>途中で聞かれたら「y」を入力して「Enter」</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1-poJb57CuLr99JmSxZwIe1ecD0aQqIcLuA" alt=""></p>
<h1 id="キーボードの設定"><a href="#キーボードの設定" class="headerlink" title="キーボードの設定"></a>キーボードの設定</h1><p>日本語のキーボードと入力が対応していないので、修正が必要です。<br>USキーボードかつ、英語しか使わないのなら、この設定は必要ありません。</p>
<p>↓のコマンドを順に入力します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cd /etc/xrdp/</div><div class="line">sudo wget http://w.vmeta.jp/temp/km-0411.ini</div><div class="line">sudo ln -s km-0411.ini km-e0010411.ini</div><div class="line">sudo ln -s km-0411.ini km-e0200411.ini</div><div class="line">sudo ln -s km-0411.ini km-e0210411.ini</div><div class="line">sudo service xrdp restart</div></pre></td></tr></table></figure></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=16WwBHcDlAyNi00RUwuR1BdQApad2xaeWAw" alt=""></p>
<h1 id="ipアドレスの確認"><a href="#IPアドレスの確認" class="headerlink" title="IPアドレスの確認"></a>IPアドレスの確認</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ifconfig</div></pre></td></tr></table></figure>
<p>ここでは<code>192.168.11.15</code>を使用します<br>※各自、異なります</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1emvG8aYEIkQUshGsWwpjDKRCjmigAY1ZIw" alt=""></p>
<h1 id="リモートデスクトップの起動"><a href="#リモートデスクトップの起動" class="headerlink" title="リモートデスクトップの起動"></a>リモートデスクトップの起動</h1><p>リモートデスクトップを起動させます</p>
<p>「リモートデスクトップ」で検索して起動します</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=11ow4JS4CPAtXGyzSfjx0C0X5Lcf6RZo_uQ" alt=""></p>
<p>先ほど調べたIPアドレス(<code>192.168.11.15</code>)へ接続します</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1JivpnB-rSjfyaR41wTZPEY3XY6Mf5NSizQ" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1tsWbpnp92i7HXapNFjNhD7Vy3JPym4sUew" alt=""></p>
<p>ユーザー名とパスワードを入力して「OK」</p>
<p>なお、デフォルトの設定は</p>
<table>
<thead>
<tr>
<th>ユーザー名</th>
<th>パスワード</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>pi</code></td>
<td><code>raspberry</code></td>
</tr>
</tbody>
</table>
<p>になっています</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1ArwATK2qxzO9DGWLrPRQwiQk1s7k_gUZAQ" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=15zzAlYBj_STR_9K3jF9FnV4bzs89SfiewA" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1ScEthT_0mpRbiWSGZ1Md4nyhCHBj4iCfSw" alt=""></p>
<p>以下の画面が表示されます</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1MkjO2qzvWyDQW49oPPvA_08qupB-nz4FXg" alt=""></p>
<p>以上です</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Raspberry Piにxrdpをインストールして、Windowsのリモートデスクトップ機能から操作できるようにする&lt;/p&gt;
    
    </summary>
    
      <category term="Raspberry Pi" scheme="https://keijirotanabe.github.io/blog/categories/Raspberry-Pi/"/>
    
    
      <category term="Raspberry Pi" scheme="https://keijirotanabe.github.io/blog/tags/Raspberry-Pi/"/>
    
      <category term="Raspberry Pi 3" scheme="https://keijirotanabe.github.io/blog/tags/Raspberry-Pi-3/"/>
    
  </entry>
  
  <entry>
    <title>Win32DiskImagerの使い方</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/10/win32-disk-imager-170211/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/10/win32-disk-imager-170211/</id>
    <published>2017-02-10T19:56:35.000Z</published>
    <updated>2017-02-22T05:53:50.667Z</updated>
    
    <content type="html"><![CDATA[<p>SDカードやUSBメモリーにイメージファイルを書き出せるソフトWin32DiskImagerを説明します</p>
<a id="more"></a>
<h1 id="ダウンロード"><a href="#ダウンロード" class="headerlink" title="ダウンロード"></a>ダウンロード</h1><p>ダウンロード先<br><a href="https://ja.osdn.net/projects/sfnet_win32diskimager/" target="_blank" rel="external">https://ja.osdn.net/projects/sfnet_win32diskimager/</a></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=11ER1WD8myfqGQybhjdVZeqPoyPRo_DrzHQ" alt=""></p>
<h1 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h1><p>ダウンロードした<code>Win32DiskImager-0.9.5-install.exe</code>を実行します</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1RokPOlizLE7k-drsR47wBJg9pNUxDGXz7g" alt=""></p>
<p>以下の流れでインストール</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1iIuEz6ycx1TQw9MJUIccr-QqDVr7CjahtQ" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1n4wSFMt4arIvzwPpXMsZQPswuTvlsHnVCw" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1zE4ugaVtyFwtWJnJJPU0PFM7_PdtOLwUWw" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1qUHuJwjLprV_yQR3SmgitWuOJypgpPxTPA" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1iPjV-q3LRiC41AOqFKjmW5OA2lqIIktSYw" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1hN0SdhwwcCqV5EFD61WP7rrPqBC-wfhwtA" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=15v4ESCCZaq-9xbfsUUmONdCDM0nhoA8Gyg" alt=""></p>
<h1 id="使い方"><a href="#使い方" class="headerlink" title="使い方"></a>使い方</h1><h2 id="起動"><a href="#起動" class="headerlink" title="起動"></a>起動</h2><p>管理者として実行<br>何か聞かれたら「はい」を選択</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1oWBxULK7z2R06EFJWHDAiH1F0hS_Y-IFUg" alt=""></p>
<p>起動画面</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1AxiZABJ9EAfHE-s0TfFN3f39_C8TFOyOHg" alt=""></p>
<h2 id="ファイルを選択"><a href="#ファイルを選択" class="headerlink" title="ファイルを選択"></a>ファイルを選択</h2><p>書き込みたいファイルを選択します<br>※ここでは<code>2017-01-11-raspbian-jessie.img</code>を選択</p>
<p>ファイルのマークを選択</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1sECDXXLPVBp2efTf2JYu1TnW4k-U4ZXoJw" alt=""></p>
<p>ファイルを開く</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1TPvVXcX5_6W-vLOgOQkRQ8NrD2u-FmpJzQ" alt=""></p>
<p>選択できました</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1sbOB49cVcWmCN1txwe38W5Bw6GpmUUOPSw" alt=""></p>
<h2 id="書き込み先を選択"><a href="#書き込み先を選択" class="headerlink" title="書き込み先を選択"></a>書き込み先を選択</h2><p>書き込み先のSDカードまたは、USBメモリーを選択します</p>
<p>(F:)に書き込みたいので、[F]を選択</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1G8Mat1XZMi7r_Eft9mp-pAHBbZTRzivM-A" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1Cd7TBKtbf5YRhiW-k_-lWkpeBfvF2hDfuw" alt=""></p>
<p>※大抵、初めから選択されています</p>
<h2 id="書き込み開始"><a href="#書き込み開始" class="headerlink" title="書き込み開始"></a>書き込み開始</h2><p>「Write」を選択</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=13i_NbuaDH3Zm23eWO-Co4XUVrWFRYUginA" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1-XKsBF6mmjNIrXtpRuGK1mkloymOmvkVNQ" alt=""></p>
<p>書き込み中<br>終わるまで待ちます</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1s0esPsazCSLHKCMNK8wGQ3kmOsDkSAH3yw" alt=""></p>
<p>終わりました</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=10vXPlSIFYAWabhB-O5fG7l8As0ghDRgcHA" alt=""></p>
<p>使い方は以上です</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SDカードやUSBメモリーにイメージファイルを書き出せるソフトWin32DiskImagerを説明します&lt;/p&gt;
    
    </summary>
    
      <category term="補足" scheme="https://keijirotanabe.github.io/blog/categories/%E8%A3%9C%E8%B6%B3/"/>
    
    
      <category term="補足" scheme="https://keijirotanabe.github.io/blog/tags/%E8%A3%9C%E8%B6%B3/"/>
    
      <category term="Win32DiskImager" scheme="https://keijirotanabe.github.io/blog/tags/Win32DiskImager/"/>
    
  </entry>
  
  <entry>
    <title>SDカードフォーマッターの使い方</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/10/sd-formatter-4-170210/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/10/sd-formatter-4-170210/</id>
    <published>2017-02-10T06:13:41.000Z</published>
    <updated>2017-02-22T05:53:44.079Z</updated>
    
    <content type="html"><![CDATA[<p>SDカードフォーマッターの使い方を説明<br>SDカードフォーマッターは、SD / SDHC / SDXC カードのフォーマットに対応し、メモリーカードの性能が最適になるように設計されています。</p>
<a id="more"></a>
<h1 id="ダウンロード"><a href="#ダウンロード" class="headerlink" title="ダウンロード"></a>ダウンロード</h1><p>SDフォーマッター4.0の入手先<br><a href="https://www.sdcard.org/jp/downloads/formatter_4/index.html" target="_blank" rel="external">https://www.sdcard.org/jp/downloads/formatter_4/index.html</a></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1nOdvfmFpCLnGleJ6yw-sJf4CNXo4dg6hIg" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1ncxxD4-iVVr9lag8g8EPP9fz1vHbQ_F9pw" alt=""></p>
<h1 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h1><p>ダウンロードしたファイルを解凍すると<code>setup.exe</code>があるので実行します</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1F1jxffrB_OgmTHXgH-i4cNjHE6dtIOHYkw" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1IaFW0asfFZFjTfK2Ts-KJoSo4Xo-23Lb9A" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1uAlPDzgcBkfdgwbvPkghI-KzMZMbXOGhcw" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1oVkfav_6it8Ervj1S_FhUpi2b-1qPuz6Pg" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1pY4SvLi8eVL6i845CFFYBSHNub-fxM0MIg" alt=""></p>
<h1 id="使い方"><a href="#使い方" class="headerlink" title="使い方"></a>使い方</h1><p>インストールできたら起動します</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1ydfLMAVzh6B5ivC4oKG0tsQgs0Lselwlbg" alt=""></p>
<p>SDカードを刺して「フォーマット」を選択</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1GgeB9NRR7ay_fPmgq7TCnyWVfRW7rj77vw" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1EWL1yXI8krB_TdNuHW--VOqcinCzIhx28w" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1Sfhx8x6_5o1lWbGTaCR4hcuACV8pgUJGag" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1j2suXpZ_JPMlYv5QOeV591Ax67URy1rKSg" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1geRb4D0vNYeOSfeEt1vu-pwktZCnRWI0CQ" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SDカードフォーマッターの使い方を説明&lt;br&gt;SDカードフォーマッターは、SD / SDHC / SDXC カードのフォーマットに対応し、メモリーカードの性能が最適になるように設計されています。&lt;/p&gt;
    
    </summary>
    
      <category term="補足" scheme="https://keijirotanabe.github.io/blog/categories/%E8%A3%9C%E8%B6%B3/"/>
    
    
      <category term="補足" scheme="https://keijirotanabe.github.io/blog/tags/%E8%A3%9C%E8%B6%B3/"/>
    
      <category term="SDカードフォーマッター" scheme="https://keijirotanabe.github.io/blog/tags/SD%E3%82%AB%E3%83%BC%E3%83%89%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%82%BF%E3%83%BC/"/>
    
  </entry>
  
  <entry>
    <title>Node.jsでHTTPサーバーを立てるまでの解説</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/09/node-js-how-to-170210/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/09/node-js-how-to-170210/</id>
    <published>2017-02-09T19:56:47.000Z</published>
    <updated>2017-02-22T05:47:16.967Z</updated>
    
    <content type="html"><![CDATA[<p>Node.jsでHTTPサーバー起動を起動して、「Hello World!」をブラウザで表示するまでを丁寧に説明</p>
<h1 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h1><ul>
<li>Windows10 Home 64bit</li>
<li>Node.js バージョン6.9.5<br>  インストール手順は<a href="/blog/2017/02/09/node-js-install-step-170210/" title="Node.jsのインストール方法">Node.jsのインストール方法</a>を参照</li>
<li>テキストエディタ → Sublime Text</li>
<li>ウェブブラウザ → Google Chrome</li>
</ul>
<a id="more"></a>
<h1 id="serverjsの用意"><a href="#server-jsの用意" class="headerlink" title="server.jsの用意"></a>server.jsの用意</h1><p>今回はデスクトップで作業してくので、デスクトップに<code>helloworld</code>というフォルダを用意します</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1PLamjRqWO1vPdrMig_KOYhywrpOfSOVefA" alt=""></p>
<p><code>helloworld</code>の中に<code>server.js</code>を作ります</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1YZRqdOR248eGKnQzenbofvePNXu5pjZClg" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=16YDI0dvj7Qu48yO8BlF1_GqMy9zZo3dsMg" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1HWIymM7vi0NAWakb57TvBCyf75tJ0wX5Rg" alt=""></p>
<p>テキストエディタで開きます</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1KNLWJ44l2vJFmhRQKbL0C4wjAL3jTqhIHQ" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=12yz4qAB2gLJNCzc5rZyv7bJiPrP_jbmgJw" alt=""></p>
<h1 id="基本的なhttpサーバー"><a href="#基本的なHTTPサーバー" class="headerlink" title="基本的なHTTPサーバー"></a>基本的なHTTPサーバー</h1><h2 id="全体のコード"><a href="#全体のコード" class="headerlink" title="全体のコード"></a>全体のコード</h2><figure class="highlight javascript"><figcaption><span>server.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> port = <span class="number">3000</span>;</div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.statusCode = <span class="number">200</span>;</div><div class="line">    res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>);</div><div class="line">    res.end(<span class="string">'Hello World!\n'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.listen(port, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Server running'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="コードの解説"><a href="#コードの解説" class="headerlink" title="コードの解説"></a>コードの解説</h2><ul>
<li><p><code>var http = require(&#39;http&#39;);</code><br>  httpモジュールの読み込み</p>
</li>
<li><p><code>var port = 3000;</code><br>  3000番ポートを使う</p>
</li>
<li><p><code>var server = http.createServer(コールバック関数)</code><br>  httpサーバー作成し、<code>server</code>に代入<br>  serverにアクセスがくるとコールバック関数が呼ばれる</p>
</li>
<li><p><code>res.statusCode = 200;</code><br>  ステータスコード200は成功を意味する<br>  詳しくは<a href="http://e-words.jp/p/r-httpstatus.html" target="_blank" rel="external">HTTPのステータスコード</a></p>
</li>
<li><p><code>res.setHeader(&#39;Content-Type&#39;, &#39;text/plain&#39;);</code><br>  コンテンツタイプをテキストに<br>  参考: <a href="http://qiita.com/AkihiroTakamura/items/b93fbe511465f52bffaa" target="_blank" rel="external">Content-Typeの一覧</a></p>
</li>
<li><p><code>res.end(&#39;Hello World!\n&#39;);</code><br>  すべてのヘッダー情報と本文(「Hello World」)が送信されたことをサーバーに通知</p>
</li>
<li><p><code>server.listen(port, コールバック関数)</code><br>  httpサーバーを3000番ポートで待機させた後、コールバック関数を呼ぶ</p>
</li>
<li><p><code>console.log(&#39;Server running&#39;);</code><br>  コンソールに「Server running」と表示</p>
</li>
</ul>
<p><div id="code-img"></div><br><img src="https://drive.google.com/uc?export=view&amp;id=1i76HS-CtCS5UZsgqMPoruQfb995w4zZWwQ" alt=""></p>
<p>より詳しくは<a href="https://nodejs.org/dist/latest-v6.x/docs/api/http.html" target="_blank" rel="external">HTTP | Node.js v6.9.5 Documentation</a></p>
<h1 id="書いたコードを実行"><a href="#書いたコードを実行" class="headerlink" title="書いたコードを実行"></a>書いたコードを実行</h1><p>コマンドプロンプトを起動します<br>わからない人は<a href="/blog/2017/02/11/command-prompt-start-up-170211/" title="コマンドプロンプトの起動方法">コマンドプロンプトの起動方法</a>を参考に</p>
<p>デスクトップに<code>helloworld</code>フォルダを作ったので、移動します<br><code>cd Disktop/helloworld</code>と入力して「Enter」</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1ghwQukcbWC4-2pkwl7Hja-eO6A_OKyQDjA" alt=""></p>
<p><code>server.js</code>を起動します<br>起動するには<code>node</code>コマンドを使います<br><code>node server</code>と入力して「Enter」</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1eCdgvA3BCrVLz3P8Ul9rDigwv1QU8DmaSw" alt=""></p>
<p>うまくいけば「Server running」が表示されます</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1NAinBOdRmgXwmUAiSDFjeov_Xgr-t6NzDA" alt=""></p>
<h1 id="ウェブブラウザから表示"><a href="#ウェブブラウザから表示" class="headerlink" title="ウェブブラウザから表示"></a>ウェブブラウザから表示</h1><p>Google Chromeを立ち上げて<br><code>localhost:3000</code>と入力して「Enter」</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1pW0TfVm33pxvwpy_ePpR9DkQKjKhIL4jwA" alt=""></p>
<p>「Hello World!」が表示されれば成功です</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1fl_Xsyvdwvga4xm8NtFi0X0HH063jhlFLw" alt=""></p>
<h2 id="コードを加えます"><a href="#コードを加えます" class="headerlink" title="コードを加えます"></a>コードを加えます</h2><p><a href="#code-img">上の画像</a>で<code>「localhost:3000」アクセスがあったら呼ばれる</code>というのを見ていきます</p>
<p><code>console.log(&#39;Connected&#39;);</code>を加えます</p>
<h2 id="全体のコード"><a href="#全体のコード-1" class="headerlink" title="全体のコード"></a>全体のコード</h2><figure class="highlight javascript"><figcaption><span>server.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> port = <span class="number">3000</span>;</div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Connected'</span>); <span class="comment">// &lt;- 追加</span></div><div class="line">    res.statusCode = <span class="number">200</span>;</div><div class="line">    res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>);</div><div class="line">    res.end(<span class="string">'Hello World!\n'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.listen(port, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Server running'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>コードを書き替えたので、サーバーを再起動します</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1yLpkDUdE_GPDFFbnChH8YeiiVAszv8ED6w" alt=""></p>
<p>以前、入力したキーは「↑」、「↓」で選択可</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1AwyP-YdYBL8lO75-aLof6uA7GUDapoPnAA" alt=""></p>
<p>↓の①を何回か押してみて下さい</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1jPfSC-HSuONj9tSQ2Guz2avP2PA9BqEzng" alt=""></p>
<p><code>「localhost:3000」</code>にアクセスがくると、<code>http.createServer(引数)</code>の引数に渡した関数が呼ばれます<br>これでこのコードの意味が分かると思います</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=18kTVHk736lG7GOgMyKWWsxDcVOKCJmcEww" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Node.jsでHTTPサーバー起動を起動して、「Hello World!」をブラウザで表示するまでを丁寧に説明&lt;/p&gt;
&lt;h1 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Windows10 Home 64bit&lt;/li&gt;
&lt;li&gt;Node.js バージョン6.9.5&lt;br&gt;  インストール手順は&lt;a href=&quot;/blog/2017/02/09/node-js-install-step-170210/&quot; title=&quot;Node.jsのインストール方法&quot;&gt;Node.jsのインストール方法&lt;/a&gt;を参照&lt;/li&gt;
&lt;li&gt;テキストエディタ → Sublime Text&lt;/li&gt;
&lt;li&gt;ウェブブラウザ → Google Chrome&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="プログラミング" scheme="https://keijirotanabe.github.io/blog/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
      <category term="Node.js" scheme="https://keijirotanabe.github.io/blog/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/Node-js/"/>
    
    
      <category term="Node.js" scheme="https://keijirotanabe.github.io/blog/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node.jsのインストール方法</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/09/node-js-install-step-170210/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/09/node-js-install-step-170210/</id>
    <published>2017-02-09T19:54:23.000Z</published>
    <updated>2017-02-22T05:47:17.871Z</updated>
    
    <content type="html"><![CDATA[<p>Node.jsのインストール方法の解説</p>
<h1 id="公式サイト"><a href="#公式サイト" class="headerlink" title="公式サイト"></a>公式サイト</h1><p><a href="https://nodejs.org/ja/" target="_blank" rel="external">https://nodejs.org/ja/</a></p>
<a id="more"></a>
<h1 id="nodejsとは"><a href="#Node-jsとは" class="headerlink" title="Node.jsとは"></a>Node.jsとは</h1><h2 id="特徴"><a href="#特徴" class="headerlink" title="特徴"></a>特徴</h2><ul>
<li><strong>サーバー側で動作するJavaScript</strong><br>  通常、JavaScriptはウェブブラウザの中で実行されるが、Node.jsはサーバサイドで動作するJavaScriptの一種</li>
<li><strong><a href="http://e-words.jp/w/%E3%83%8E%E3%83%B3%E3%83%96%E3%83%AD%E3%83%83%E3%82%AD%E3%83%B3%E3%82%B0%E9%80%9A%E4%BF%A1.html" target="_blank" rel="external">ノンブロッキングI/O</a></strong><br>  送受信の完了を待たないで、他の処理を開始する通信方法</li>
<li><strong><a href="http://e-words.jp/w/%E3%82%B7%E3%83%B3%E3%82%B0%E3%83%AB%E3%82%B9%E3%83%AC%E3%83%83%E3%83%89.html" target="_blank" rel="external">シングルスレッド </a></strong><br>  並行処理などを行わずにすべての演算を逐次に処理していくこと</li>
<li><strong><a href="http://e-words.jp/w/%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%83%89%E3%83%AA%E3%83%96%E3%83%B3.html" target="_blank" rel="external">イベントドリブン </a></strong><br>  ユーザや他のプログラムが実行した操作（イベント）に対応して処理を行う、プログラムの実行形式<br>  ユーザが操作を行っていないときはプログラムは何もせず待機している</li>
</ul>
<p><strong>メリット</strong></p>
<ul>
<li>早くてリアルタイムに強い</li>
<li>多数のアクセスに強い</li>
</ul>
<h1 id="インストール手順"><a href="#インストール手順" class="headerlink" title="インストール手順"></a>インストール手順</h1><h2 id="windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>推奨版の6.9.5をインストールしていきます</p>
<h3 id="ダウンロードページ"><a href="#ダウンロードページ" class="headerlink" title="ダウンロードページ"></a>ダウンロードページ</h3><p>64bit版<br><a href="https://nodejs.org/ja/" target="_blank" rel="external">ダウンロード Windows (x64)</a></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1fD7DcYPdECz0zRVSvNQSYYr1fsItHP8PdQ" alt=""></p>
<p>32bit版はこちら<br><a href="https://nodejs.org/ja/download/" target="_blank" rel="external">ダウンロード Windows (x32)</a></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1LJc8Aamh2ATM-eooitrPMaX-Wxbl9g5Cog" alt=""></p>
<h3 id="インストール手順"><a href="#インストール手順-1" class="headerlink" title="インストール手順"></a>インストール手順</h3><p><img src="https://drive.google.com/uc?export=view&amp;id=1VBxv_EwQGnBi0U91w_qMjP7jCDt0UgVFkw" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1-B4P-Cjzab_d9oy9opfgLxr74X0XIMfu_A" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1xE9Pqh4s8WyqwBCOTC7sdOwtd4n9bKkcQQ" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1Sp5vi4oyGg3l21u2Sgmc4scA7P8ANoeLlQ" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=173QG8VkxJULhLUPXtcXKMunUCXMNIqzS-A" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1SBoK6MpadjBYBbvoLtDt07hzV3Lml19YXQ" alt=""></p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1a3vV4T7ZCNqHoEVHy6lODx1ZpbrYyvAk6g" alt=""></p>
<h3 id="インストールされたか確認"><a href="#インストールされたか確認" class="headerlink" title="インストールされたか確認"></a>インストールされたか確認</h3><p>コマンドプロンプトを起動します<br>わからない人は<a href="/blog/2017/02/11/command-prompt-start-up-170211/" title="コマンドプロンプトの起動方法">コマンドプロンプトの起動方法</a>を参考</p>
<p><code>node -v</code>と<code>npm -v</code>でインストールされたバージョンを確認</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1R1HZ4kMlnVACzkNNenwDI8QBzxItrMgV_Q" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Node.jsのインストール方法の解説&lt;/p&gt;
&lt;h1 id=&quot;公式サイト&quot;&gt;&lt;a href=&quot;#公式サイト&quot; class=&quot;headerlink&quot; title=&quot;公式サイト&quot;&gt;&lt;/a&gt;公式サイト&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://nodejs.org/ja/&quot;&gt;https://nodejs.org/ja/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="プログラミング" scheme="https://keijirotanabe.github.io/blog/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
      <category term="Node.js" scheme="https://keijirotanabe.github.io/blog/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/Node-js/"/>
    
    
      <category term="Node.js" scheme="https://keijirotanabe.github.io/blog/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>回路図が書けるFritzingをインストール</title>
    <link href="https://keijirotanabe.github.io/blog/2017/02/08/fritzing-install-170208/"/>
    <id>https://keijirotanabe.github.io/blog/2017/02/08/fritzing-install-170208/</id>
    <published>2017-02-08T03:42:50.000Z</published>
    <updated>2017-02-22T05:53:21.027Z</updated>
    
    <content type="html"><![CDATA[<p>回路図が書けるFritzingをインストールするまで</p>
<h1 id="公式サイト"><a href="#公式サイト" class="headerlink" title="公式サイト"></a>公式サイト</h1><p><a href="http://fritzing.org/home/" target="_blank" rel="external">http://fritzing.org/home/</a></p>
<h1 id="ダウンロード"><a href="#ダウンロード" class="headerlink" title="ダウンロード"></a>ダウンロード</h1><p>ダウンロードページ<br><a href="http://fritzing.org/download/" target="_blank" rel="external">Fritzing Download</a><br>Version 0.9.3b (2017/02/08時点)</p>
<a id="more"></a>
<p><code>No Donation</code>をチェックして<code>Download</code>を選択</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1cBRKilGINkBUmXxNgnYKGK7Ek5aOSPX-VA" alt=""></p>
<p><code>Windows 64bit</code>を選択<br>※環境に合わせてお選びください</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1xg5l_cbIlQeyl5JQ8QebVXvlXuPGGboYfQ" alt=""></p>
<h1 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h1><p>ファイルを解凍すると<code>fritzing.0.9.3b.64.pc</code>ができるので、適当なフォルダにおいてください<br>今回は<code>C:\fritzing.0.9.3b.64.pc</code>におきました</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1P6lUMK3uwqlGLbwC_CkDGDdaWwwAyPJNgw" alt=""></p>
<p><code>Fritzing.exe</code>で起動します<br>右クリックからショートカットを作ってデスクトップに置いておくと便利かと思います</p>
<p>初回起動画面</p>
<p><img src="https://drive.google.com/uc?export=view&amp;id=1gxRZ4jqH0IvEO0Yeg7FAS__TMiFnnYZzpA" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;回路図が書けるFritzingをインストールするまで&lt;/p&gt;
&lt;h1 id=&quot;公式サイト&quot;&gt;&lt;a href=&quot;#公式サイト&quot; class=&quot;headerlink&quot; title=&quot;公式サイト&quot;&gt;&lt;/a&gt;公式サイト&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://fritzing.org/home/&quot;&gt;http://fritzing.org/home/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;ダウンロード&quot;&gt;&lt;a href=&quot;#ダウンロード&quot; class=&quot;headerlink&quot; title=&quot;ダウンロード&quot;&gt;&lt;/a&gt;ダウンロード&lt;/h1&gt;&lt;p&gt;ダウンロードページ&lt;br&gt;&lt;a href=&quot;http://fritzing.org/download/&quot;&gt;Fritzing Download&lt;/a&gt;&lt;br&gt;Version 0.9.3b (2017/02/08時点)&lt;/p&gt;
    
    </summary>
    
      <category term="Fritzing" scheme="https://keijirotanabe.github.io/blog/categories/Fritzing/"/>
    
    
      <category term="Fritzing" scheme="https://keijirotanabe.github.io/blog/tags/Fritzing/"/>
    
  </entry>
  
</feed>
