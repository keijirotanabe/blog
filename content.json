{"meta":{"title":"blog","subtitle":null,"description":"忘れないようにメモします","author":"田邊 慶次朗","url":"https://keijirotanabe.github.io/blog"},"pages":[{"title":"index Page","date":"2017-02-16T02:26:49.200Z","updated":"2017-02-16T02:26:49.200Z","comments":true,"path":"index/index.html","permalink":"https://keijirotanabe.github.io/blog/index/index.html","excerpt":"","text":"固定ページです","raw":null,"content":null}],"posts":[{"title":"Raspberry Piでモニターなど周辺を使用せずセットアップする方法","slug":"raspberry-pi-set-without-using-monitor-170227","date":"2017-02-26T21:48:22.000Z","updated":"2017-02-28T09:07:08.524Z","comments":true,"path":"2017/02/26/raspberry-pi-set-without-using-monitor-170227/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/26/raspberry-pi-set-without-using-monitor-170227/","excerpt":"Raspberry Piでモニターなど周辺を使用せずセットアップする方法を解説します。\n\nRaspberry Pi 3、または2でも手順は同じです。\nCUI版の「RASPBIAN JESSIE LITE」で進めていきますが、GUI環境のある「Raspbian Jessie with PIXEL」でも、同じやり方でできます。\n","text":"Raspberry Piでモニターなど周辺を使用せずセットアップする方法を解説します。 Raspberry Pi 3、または2でも手順は同じです。 CUI版の「RASPBIAN JESSIE LITE」で進めていきますが、GUI環境のある「Raspbian Jessie with PIXEL」でも、同じやり方でできます。 使用する環境 Windows10 Home 64bit Raspberry Pi 3 Model B Element14版 Raspbian Jessie LITE 必要なもの Raspberry Pi 3 本体 → Raspberry Pi 3 Model B Element14版 microSD (8G以上) SD と Raspberry Pi には相性があるようです → RPi SD cards 電源 MicroUSB経由 (2.5A推奨) ここでは2.4Aのを使っています Raspbianの入手GUI環境は使わないため、「RASPBIAN JESSIE LITE」をダウンロードします。 ダウンロード先Download Raspbian for Raspberry Pi 「RASPBIAN JESSIE LITE」の「Download ZIP」を選択します。 SDカードのフォーマット「SDカードフォーマッター」でSDカードをフォーマットします。 詳しくはSDカードフォーマッターの使い方を参考 ダウンロード先https://www.sdcard.org/jp/downloads/formatter_4/index.html 「論理サイズ調整」を「ON」にします。 「フォーマット」 → 「OK」 でフォーマット開始 SDカードへ書き込みRaspbianをSDカードに書き込むには、「Win32DiskImager」を使います。 詳しくはWin32DiskImagerの使い方 ダウンロード先https://ja.osdn.net/projects/sfnet_win32diskimager/ 手順は 先ほどダウンロードした、「2017-01-11-raspbian-jessie-lite.img」の読み込み 書き込み先のSDを選択 [F] 「Write」を押す 「Confirm overwrite」のウィンドウが開くので「Yes」を押す 終了したら「OK」を選択 SSHをONにするSSHをONにするには、イメージを書き込んだSDのフォルダ内に「ssh」という空のファイルを作ります。拡張子は何もつけてはいけません。 右クリック → 新規作成 → テキストドキュメント → 「ssh」 boot(F:) &gt; ssh WiFiの設定WiFiの設定をします。※ ＬＡＮケーブルでつなぐ場合は読み飛ばしてください。 SDのフォルダ内に「wpa_supplicant.conf」というファイルを作ります。その中に ↓ のように設定してください。 boot(F:) &gt; wpa_supplicant.conf wpa_supplicant.conf12345network=&#123; ssid=\"SSID\" psk=\"PASSWORD\" key_mgmt=WPA-PSK&#125; wpa_supplicant.confファイルを作成 ↑ のコードを貼り付ける。 SSIDとパスワードを設定して保存します。 SSHクライアントから接続BonjourをインストールIPアドレスがわからなので、ホスト名でアクセスできる「Avahi」を使用します。「Raspbian Jessie LITE」には、初めからAvahiがインストールされてるので、Raspberry Pi では特に作業は必要ありません。 接続するPCには、Bonjourをインストールします。 BonjourはiTunesにも使われてますので、iTunesをインストールされているなら、この作業は飛ばしてください。 ダウンロードダウンロード - Bonjour Print Services (Windows) インストールすると3つアプリケーションが追加される。 Tera Termから接続SSHクライアントは、Tera Term を使用します。 ダウンロード先https://ja.osdn.net/projects/ttssh2/releases/66795 ホスト名はraspberrypi.localです。 ユーザー名とパスワードは初期設定では以下のようになっています。 12ユーザー名: piパスワード: raspberry ログインできました。 設定設定メニューを表示1sudo raspi-config キーボードの ↑、↓、←、→、Enter で操作します。 パスワードの変更「Change User Password」を選択 2回、変更したいパスワードを入力します。 ロケールとタイムゾーンの変更まずは、ロケールを変更します。 「Localisation Options」を選択 「Change Locale」を選択 「ja_JP.EUC-JP EUC-JP」と「ja_JP.UTF-8 UTF-8」の所で、「スペースキー」でチェックし、「Enter」で選択 「ja_JP.UTF-8」を選択 次に、タイムゾーンを変更します。 「Change Timezone」を選択 「Asia」を選択 「Tokyo」を選択 パッケージのアップデートパッケージリストの更新 1sudo apt-get update インストールされたパッケージを最新バージョンにアップグレード1sudo dist-upgrade イメージのバックアップ電源をOFFします。1sudo poweroff 電源が切れたら、SDをPCに挿し、「Win32DiskImager」を起動します。 今回は、デスクトップに「2017-02-28-raspbian-jessie-lite-backup.img」で保存します。ファイルアイコンから保存先と保存名を選択後、「Read」を押します。 完了しました。 これで、不具合がでた時などに、バックアップしたファイルを書き直せば、同じ環境を再現できるようになります。 なお、このやり方の場合、コピー先のSDの容量がコピー元の容量以上16GB → 16GB16GB → 32GB などでないと書き込めません。 また、同じ容量表記でも微妙に異なることがあり、書き込めないことがあります。 16GB → 16GB16GB → 8GBのようにしたい場合、パーティションソフトでバックアップのサイズを小さくしなければなりません。それについては、後に紹介します。","raw":null,"content":null,"categories":[{"name":"Raspberry Pi","slug":"Raspberry-Pi","permalink":"https://keijirotanabe.github.io/blog/categories/Raspberry-Pi/"}],"tags":[{"name":"Raspberry Pi","slug":"Raspberry-Pi","permalink":"https://keijirotanabe.github.io/blog/tags/Raspberry-Pi/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-02-22T06:03:07.935Z","updated":"2017-02-22T06:03:07.935Z","comments":true,"path":"2017/02/22/hello-world/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/22/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","raw":null,"content":null,"categories":[],"tags":[]},{"title":"Cloud9からHexoを使ってGutHub Pagesにブログを公開する手順","slug":"Cloud9とHEXOを使ってGutHub Pagesにブログを公開する手順","date":"2017-02-22T04:47:46.766Z","updated":"2017-02-22T04:47:46.766Z","comments":true,"path":"2017/02/22/Cloud9とHEXOを使ってGutHub Pagesにブログを公開する手順/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/22/Cloud9とHEXOを使ってGutHub Pagesにブログを公開する手順/","excerpt":"Cloud9にHexoをインストールし作成したブログをGitHub Pagesに公開するやり方をメモ\n手順\nClude9とGitHubの登録\nClude9でblogを作成\nGitHubにリポジトリを作成\nSSHの設定\nGitHub Pages にデプロイする\n","text":"Cloud9にHexoをインストールし作成したブログをGitHub Pagesに公開するやり方をメモ 手順 Clude9とGitHubの登録 Clude9でblogを作成 GitHubにリポジトリを作成 SSHの設定 GitHub Pages にデプロイする Clude9とGitHubの登録GitHubhttps://github.com/ Cloud9https://c9.io/ Clude9でblogを作成作業用プロジェクトの作成手順 create a new workspace Workspace name: blog_work Choose a template -&gt; Node.js Create workspace blog_workという名前のプロジェクトができます。 初めにあるファイルはすべて削除します。 以下でnodeとnpmのバージョンを確認1234~/workspace $ node -vv4.6.1~/workspace $ npm -v2.15.9 HexoのインストールHexo公式サイト 12345~/workspace $ npm install hexo-cli -g~/workspace $ hexo init blog~/workspace $ cd blog~/workspace/blog $ npm install~/workspace/blog $ hexo server -p 8080 ターミナルから http://localhost:8080/ -&gt; Open SSHの設定Clude9の場合 1$ cat ~/.ssh/id_rsa.pub で公開鍵が出力されるので、コピーする Clude9以外の場合.sshディレクトリの作成 1~/workspace/blog $ mkdir ~/.ssh 鍵を生成12345~/workspace/blog $ ssh-keygen -t rsaGenerating public/private rsa key pair.Enter file in which to save the key (/Users/(username)/.ssh/id_rsa):Enter passphrase (empty for no passphrase):Enter same passphrase again: 何か聞かれるので3回エンター 鍵の中身をクリップボードへコピーxselのインストール 1~/workspace/blog $ sudo apt-get install xsel クリップボードへコピーするコマンド 12345~/workspace/blog $ cat ./id_rsa.pub | xsel --clipboard --input# Mac or Windows$ pbcopy &lt; ~/.ssh/id_rsa.pub (Mac)$ clip &lt; ~/.ssh/id_rsa.pub (Windows) 公開鍵をGitHubに登録公開鍵をGitHubに登録で公開鍵を設定。 New SSH key Titlte : cloud9-ssh-rsa Key : 鍵の中身をコピペ (Ctrl + V) Add SSH key 接続確認 12~/workspace/blog $ ssh -T git@github.comHi &lt;アカウント名&gt; You&apos;ve successfully authenticated, but GitHub does not provide shell access. と返れば成功 GitHubにリポジトリを作成手順 Start a project Repository name: blog Create repository SSH文字列をコピー 1git@github.com:keijirotanabe/blog.git こういうやつ GitHub Pages にデプロイする GitHub Pages へデプロイするには ‘hexo-deployer-git’ という Hexo のプラグインをインストールする必要があるので、 1$ npm install hexo-deployer-git --save でインストール gitの設定バージョン確認 12$ git --versiongit version 2.10.2 インストールされてなければ以下で、インストール 1$ sudo apt-get install git-core 名前とメールアドレスの設定 12$ git config --global user.name &quot;Keijiro Tanabe&quot;$ git config --global user.email &quot;ayt7gysnyx@gmail.com&quot; 設定できたか確認 123456789$ git config -luser.name=Keijiro Tanabeuser.email=ayt7gysnyx@gmail.comcore.editor=nanocore.whitespace=offcore.excludesfile=~/.gitignoreadvice.statusuoption=falsecolor.ui=truepush.default=current _config.yml の編集Deployment | Hexoを参考に_config.ymlファイルを編集していく url: https://[アカウント名].github.io/blog/ 123456789url: https://keijirotanabe.github.io/blog/root: /blog/# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:keijirotanabe/blog.git (さっきコピーしたやつ) branch: gh-pages デプロイ1~/workspace/blog $ hexo deploy -g https://keijirotanabe.github.io/blog/https://[アカウント名].github.io/blog/ といったurlにアクセス 参考HexoのインストールとGitHub PageへデプロイgitHubでssh接続する手順~公開鍵・秘密鍵の生成から~ メモ Cloud9背景黒Preferences -&gt; THEMES -&gt; Classic Theme","raw":null,"content":null,"categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://keijirotanabe.github.io/blog/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://keijirotanabe.github.io/blog/tags/Hexo/"},{"name":"Cloud9","slug":"Cloud9","permalink":"https://keijirotanabe.github.io/blog/tags/Cloud9/"},{"name":"GutHub","slug":"GutHub","permalink":"https://keijirotanabe.github.io/blog/tags/GutHub/"}]},{"title":"仮想COMポートから遠くのESP8266とTCP通信する","slug":"esp8266-virtural-serial-port-170218","date":"2017-02-18T03:43:27.000Z","updated":"2017-02-22T06:02:38.459Z","comments":true,"path":"2017/02/18/esp8266-virtural-serial-port-170218/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/18/esp8266-virtural-serial-port-170218/","excerpt":"PCに仮想COMポートソフトをインストールし、従来のRS232C通信のようにやりとりします。これにより、COMポートからWiFi経由で、遠くのESP8266と通信できるようなります。\nはじめに使用する環境\nArduino IDE を使用するのでインストールしておきます  → Arduino IDEのインストールを参考\n\nATコマンドを使える状態にしておいてください  一度でもArduinoのスケッチを書き込むとATコマンドが使えなくなるので、再びATコマンドが使えるようにするにはファームウェアを書き直す必要があります  → ArduinoのESP8266をATコマンドが使えるように戻すを参考\n\n","text":"PCに仮想COMポートソフトをインストールし、従来のRS232C通信のようにやりとりします。これにより、COMポートからWiFi経由で、遠くのESP8266と通信できるようなります。 はじめに使用する環境 Arduino IDE を使用するのでインストールしておきます → Arduino IDEのインストールを参考 ATコマンドを使える状態にしておいてください 一度でもArduinoのスケッチを書き込むとATコマンドが使えなくなるので、再びATコマンドが使えるようにするにはファームウェアを書き直す必要があります → ArduinoのESP8266をATコマンドが使えるように戻すを参考 ESP8266の設定ステーションモードに設定最初にESP8266をステーションモードにしておきます。 WiFiモードには３つあります。 ステーションモード →周囲にあるアクセスポイント(AP)に接続します。 ソフトAPモード →本モジュールがアクセスポイント(AP)になります。 ステーションモード＋APモード →上記の１と２の両方を実行します。 ↓ 現在のWiFiモードを確認できます。1AT+CWMODE? ステーションモードにするにはAT+CWMODE=1とします。1234AT+CWMODE=1# 同様に# AT+CWMODE=2 ← ソフトAPモード# AT+CWMODE=3 ← ステーションモード＋APモード ステーションモードに設定できました。 アクセスポイントに接続続いて、アクセスポイントに接続します。接続するコマンドは↓です。1AT+CWJAP=&quot;SSID&quot;,&quot;パスワード&quot; ↓接続先を確認できます。1AT+CWJAP? アクセスポイントに接続されました。ちなみに、切断したい場合は↓のコマンドです。 1AT+CWQAP HW VSP3 のインストールダウンロードダウンロード先http://www.hw-group.com/products/hw_vsp/index_en.html めんどくさい人はここからダウンロード インストールダウンロードしたhw-vsp3-single_3-1-2.exeを実行し、以下の流れでインストールします。 インストールが完了しました。 HW VSP3でTCPサーバーを立てるHW VSP3 を起動します。 「Login」を選択 「OK」を選択 「Settings」タブを選択 チェックを「TCP Server Mode」だけにします。 「Virtual Serial Port」タブを選択「Port Name」を「COM10」に選択（使ってなければ何でもよい）「IP Address」は「0.0.0.0」のまま「Port」を「8089」に選択（ウェルノウンポートでなければ何でもよい） 「Create COM」で仮想COMが作られます。 「デバイスマネージャー」を確認すると、「Virtual Serial Port(Eltima Softwate)」ができ、展開すると「COM10」が作られていることが分かります。 PCのIPアドレスを確認HW VSP3を実行中のＰＣはTCPサーバーになったので、ESP8266から接続します。 PCのIPアドレスを調べます。１と２どちらの方法でも構いません。 1.コマンドプロンプトに「ipconfig」と打つ 2.ネットワーク接続の詳細をみるコントロールパネル &gt; ネットワークとインターネット &gt; ネットワークと共有センターを開く PCのIPアドレスは192.168.11.4でした。 ESP8266で接続するアクセスポイントに接続TCP/IPまたはUDPへの接続設定＆接続開始するコマンドは↓です。1AT+CIPSTART=&quot;プロトコル&quot;,&quot;IPアドレス&quot;,ポート番号 プロトコル: TCPIPアドレス: 192.168.11.4 （各自、違います）ポート番号: 8089 （↑で設定したやつ）1AT+CIPSTART=&quot;TCP&quot;,&quot;192.168.11.4&quot;,8089 接続すると、CONNECT と OK が返ります。 コネクションが確立しました。 コネクションを切断するには↓です。1AT+CIPCLOSE TCPサーバーを開くPCからCOM10を開くと通信が開始されます。 Arduino IDE をもう一つ起動します。「COM10」を選択して、シリアルモニタを起動してください。 ESP8266から送信ESP8266から、TCPサーバーへ「Hello」と送ってみます。 送信サイズを選択1AT+CIPSEND=5 // 5バイト送信 「Hello」を送信1Hello TCPサーバーから送信次はTCPサーバーから、「ESP8266」と送ってみます。 送信画面 受信画面 相互に通信ESP8266からシームレスな通信ができるように、「トランスペアレントモード」にします。 123AT+CIPMODE=1# AT+CIPMODE=0 // ATコマンドモード つづいて↓を入力します。1AT+CIPSEND 「&gt;」が返るとトランスペアレントモードに移行します。 両方のターミナルに適当な文字を打つと、相手側のウィンドウに表示されます。 トランスペアレントモードから抜けるには、「+++」を入力します。ですが、制御コードがつくと「+++」を文字列として相手に送信してしまいます。 ↓のように「改行なし」にした状態で、「+++」を送信してください。 「AT」と打って「OK」が返れば、トランスペアレントモードから抜けました。123ATOK 再び、トランスペアレントモードに入るには↓です。1AT+CIPSEND また、↓のように送信サイズを指定して送信するには、AT+CIPMODE=0に設定を戻してください。 12AT+CIPSEND=5 // 5バイト送信&gt; Hello おわりに仮想COMポートとトランスペアレントモードを組み合わせることで、RS232C有線で接続しているかのようにUSRT通信を無線化できました。 参考 Wi-Fi-UARTシリアルモジュール - マイクロテクニカ ATコマンド集","raw":null,"content":null,"categories":[{"name":"ESP8266","slug":"ESP8266","permalink":"https://keijirotanabe.github.io/blog/categories/ESP8266/"}],"tags":[{"name":"ESP8266","slug":"ESP8266","permalink":"https://keijirotanabe.github.io/blog/tags/ESP8266/"},{"name":"ESP-WROOM-02","slug":"ESP-WROOM-02","permalink":"https://keijirotanabe.github.io/blog/tags/ESP-WROOM-02/"}]},{"title":"ESP8266でATコマンドを使ってみる","slug":"esp8266-at-command-170218","date":"2017-02-17T22:02:23.000Z","updated":"2017-02-22T05:53:07.983Z","comments":true,"path":"2017/02/17/esp8266-at-command-170218/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/17/esp8266-at-command-170218/","excerpt":"ESP8266でATコマンドを使ってみる\nはじめに使用する環境\nArduino IDE を使用するのでインストールしておきます  → Arduino IDEのインストールを参考\n\nESPr Developer(ESP-WROOM-02開発ボード)を使用します  → ESPr Developer（ESP-WROOM-02開発ボード）\n\nATコマンドを使える状態にしておいてください  一度でもArduinoのスケッチを書き込むとATコマンドが使えなくなるので、再びATコマンドが使えるようにするにはファームウェアを書き直す必要があります  → ArduinoのESP8266をATコマンドが使えるように戻すを参考\n\n","text":"ESP8266でATコマンドを使ってみる はじめに使用する環境 Arduino IDE を使用するのでインストールしておきます → Arduino IDEのインストールを参考 ESPr Developer(ESP-WROOM-02開発ボード)を使用します → ESPr Developer（ESP-WROOM-02開発ボード） ATコマンドを使える状態にしておいてください 一度でもArduinoのスケッチを書き込むとATコマンドが使えなくなるので、再びATコマンドが使えるようにするにはファームウェアを書き直す必要があります → ArduinoのESP8266をATコマンドが使えるように戻すを参考 ESP8266の起動モードについて 実行モード(Flash Boot Mode) 書かれているプログラムを起動し、実行します 書き込みモード(UART Download Mode) プログラムを書き帰るときに使用します GPIO pinの名前 実行モード 書き込みモード GPIO0 IO0 HIGH LOW GPIO2 IO2 HIGH HIGH GPIO15 IO15 LOW LOW IO0 pinの違いで起動モードが変化しますHIGH でリセット → 実行モードLOW でリセット → 書き込みモード 使い方シリアルモニタ起動画面 基本ATコマンドAT起動時のテストに使用 1AT AT+RSTモジュールを再起動するために使用 1AT+RST AT+GMRインストールされているATコマンドファームウェアのバージョンとそのSDKをチェックするために使用 1AT+GMR AT+GSLP 123AT+GSLP=&lt;時間&gt; // &lt;時間&gt;の単位はmsです例: AT+GSLP=1000 OKとでたあと「AT」と入力しても反応がなくなりました1000ms以上たっても反応していないみたいなので、復帰のさせかたがよくわからない ATE入力されたコマンドをエコーする 12例: ATE0 // エコーオフ ATE1 // エコーをオンにする AT+RESTORE工場出荷時の設定に戻しますフラッシュに保存されているすべてのパラメータはリセットされます 1AT+RESTORE AT+UARTUART構成を設定し、フラッシュに保存されます。※このコマンドは非推奨です。フラッシュへの保存あり、なしに応じて↓のコマンドを使用することが、推奨されています。 AT+UART_CUR UART構成を設定し、フラッシュに保存されません。 AT+UART_DEF UART構成を設定し、フラッシュに保存されます。 12345AT+UART_CUR=&lt;ボーレート&gt;&lt;データビット&gt;&lt;ストップビット&gt;&lt;パリティ&gt;&lt;フロー制御&gt;AT+UART_DEF=&lt;ボーレート&gt;&lt;データビット&gt;&lt;ストップビット&gt;&lt;パリティ&gt;&lt;フロー制御&gt;例: AT+UART_CUR=9600,8,1,0,0 AT+UART_DEF=9600,8,1,0,0 AT+SLEEPスリープモードを設定でき、ステーションモードでのみ使用できますデフォルトはモデムスリープモードです 基本ATコマンド一覧 コマンド 説明 AT 起動時のテスト AT+RST 再起動 AT+GMR バージョン情報を表示 AT+GSLP ディープスリープモードに入る ATE ATコマンドはエコーか? AT+RESTORE 工場出荷時リセット AT+UART UART設定 AT+UART_CUR UARTの現在の設定 AT+UART_DEF UARTのデフォルト設定、フラッシュ保存 AT+SLEEP スリープモード AT+WAKEUPGPIO ライトスリープモードからESP8266を起動させるGPIOを設定する AT+RFPOWER RF TX Powerの最大値を設定する AT+RFVDD RF TX電源をVDD33に従って設定してください WiFi ATコマンド一覧追加予定 参考 ESP8266 AT Instruction Set Version 2.0.0 ATコマンド集","raw":null,"content":null,"categories":[{"name":"ESP8266","slug":"ESP8266","permalink":"https://keijirotanabe.github.io/blog/categories/ESP8266/"}],"tags":[{"name":"ESP8266","slug":"ESP8266","permalink":"https://keijirotanabe.github.io/blog/tags/ESP8266/"},{"name":"ESP-WROOM-02","slug":"ESP-WROOM-02","permalink":"https://keijirotanabe.github.io/blog/tags/ESP-WROOM-02/"}]},{"title":"Googleフォトに置いてあるブログ用の画像が表示されなくなった","slug":"google-photo-not-show-170217","date":"2017-02-17T03:27:09.000Z","updated":"2017-02-22T05:36:39.992Z","comments":true,"path":"2017/02/17/google-photo-not-show-170217/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/17/google-photo-not-show-170217/","excerpt":"ブログ用の画像をGoogleフォトから呼び出していたが、表示されなくなったので解決策をメモ","text":"ブログ用の画像をGoogleフォトから呼び出していたが、表示されなくなったので解決策をメモ 問題の状態 解決策imgタグ1&lt;img src=&quot;http://drive.google.com/uc?export=view&amp;id=&lt;画像ID&gt;&quot;&gt; Markdown1![](src=&quot;http://drive.google.com/uc?export=view&amp;id=&lt;画像ID&gt;&quot;)&gt; 参考 Googleフォトの写真や動画をWebページに埋め込むには（追記あり） Google フォトの画像をホームページに貼る方法 Googleドライブの画像をMarkdownの中に挿入する方法.md","raw":null,"content":null,"categories":[],"tags":[]},{"title":"Hexoのテーマicarusでサイト内検索を追加する","slug":"hexo-search-add-170216","date":"2017-02-15T19:01:51.000Z","updated":"2017-02-22T06:04:14.451Z","comments":true,"path":"2017/02/15/hexo-search-add-170216/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/15/hexo-search-add-170216/","excerpt":"Hexoのテーマicarusでサイト内検索を追加するのにつまづいたのでメモ","text":"Hexoのテーマicarusでサイト内検索を追加するのにつまづいたのでメモ _config.ymlの設定themes &gt; icarus &gt; _config.yml を編集 config.yml12search: insight: true としたあと、 hexo-generator-json-contentをインストール 1$ npm install hexo-generator-json-content --save これで、追加されるはず、、、 1$ hexo s -p 8080 --draft が、サーバーを起動したらエラーが発生 解決策1$ npm install -S hexo-generator-json-content@1 --save とし、サーバーを起動 これで起動しました サイト内検索もうまく追加されました 参考 hexo打包提示错误:ERROR Plugin load failed:hexo-generator-json-content Hexo插件无法运行/安装,hexo g提示ReferenceError: hexo is not defined","raw":null,"content":null,"categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://keijirotanabe.github.io/blog/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://keijirotanabe.github.io/blog/tags/Hexo/"}]},{"title":"HexoにDisqusでコメント機能を追加する手順","slug":"hexo-disqus-add-comment-170215","date":"2017-02-15T13:03:55.000Z","updated":"2017-02-22T07:26:06.527Z","comments":true,"path":"2017/02/15/hexo-disqus-add-comment-170215/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/15/hexo-disqus-add-comment-170215/","excerpt":"HexoにDisqusでコメント機能を追加する手順をまとめました\nDisqus 公式サイトhttps://disqus.com/","text":"HexoにDisqusでコメント機能を追加する手順をまとめました Disqus 公式サイトhttps://disqus.com/ Disqusに登録「GET STARTED」を選択 今回はGoogleアカウントで登録します 別ウィンドウが開くので入力 「I want to install Disqus on my site」を選択 3ヶ所入力後、「Create Site」を選択 「Got it. Let’s get started!」を選択 Hexoはないので、次へ 使用しているテンプレートにコメントがない場合はscriptを追加してください※このブログで使用しているicarusにはコメントがあるので省略します サイトのURLを入力し、「Complete Setup」を選択 Admin &gt; Settings &gt; blog &gt; General「shortname」をコピー shortnameを_config.ymlに記述themes &gt; icarus &gt; _config.yml 123comment: disqus: [shortname] duoshuo: [shortname] 関係のないコメントを消す Admin &gt; Settings &gt; blog &gt; GeneralDiscoveryのチェックを外す","raw":null,"content":null,"categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://keijirotanabe.github.io/blog/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://keijirotanabe.github.io/blog/tags/Hexo/"},{"name":"Disqus","slug":"Disqus","permalink":"https://keijirotanabe.github.io/blog/tags/Disqus/"}]},{"title":"HEXOで目次を自動で作成してくれるhexo-tocをインストール","slug":"hexo-toc-install-170215","date":"2017-02-14T18:59:49.000Z","updated":"2017-02-22T07:13:53.440Z","comments":true,"path":"2017/02/14/hexo-toc-install-170215/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/14/hexo-toc-install-170215/","excerpt":"Hexoで目次を自動で作成してくれるhexo-tocを使うための手順をまとめました\n","text":"Hexoで目次を自動で作成してくれるhexo-tocを使うための手順をまとめました 目次 ブルーの目次 オプションの説明 記事から呼び出す オレンジの目次 ブルーの目次hexo-toc GitHubページhttps://github.com/bubkoo/hexo-toc インストールコマンド1$ npm install hexo-toc --save themes/icarus/_config.ymlに以下を追加 icarusは使用しているテンプレート名です config.yml12345678toc: maxdepth: 3 class: toc slugify: transliteration anchor: position: after symbol: '#' style: header-anchor オプションの説明12345678maxdepth ：最大深度以下の見出しを使用します。class ：tocのCSSクラス。 （ デフォルトはfalse ）slugify ：使用したい機能を選択します。 現在、 uslug （ デフォルト ）と音訳をサポートしています。anchor ：各見出しにアンカーを付けるかどうか。 （ デフォルトはfalse ） position ：アンカーは、タイトルのbefore 、タイトルのafter 、またはタイトルのafter before置く必要があります。 （ デフォルトはafter ）。 symbol ：あなたがアンカーにしたいシンボル。 （ デフォルトは# ）。 style ：アンカーのCSSクラスです（ デフォルトはheader-anchor ）。 記事から呼び出す呼び出したい箇所で以下を追加 12# 目次&lt;!-- toc --&gt; オレンジの目次呼び出したい記事で以下を追加 1toc: true","raw":null,"content":null,"categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://keijirotanabe.github.io/blog/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://keijirotanabe.github.io/blog/tags/Hexo/"}]},{"title":"有機ＥＬキャラクタディスプレイモジュールをESP8266(ESP-WROOM-02)で使う","slug":"esp8266-oled-how-to-use-170214","date":"2017-02-14T02:20:26.000Z","updated":"2017-02-22T05:51:53.035Z","comments":true,"path":"2017/02/14/esp8266-oled-how-to-use-170214/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/14/esp8266-oled-how-to-use-170214/","excerpt":"有機ＥＬキャラクタディスプレイモジュールをESP8266(ESP-WROOM-02)でmikroCのLcd Library風に使う\nこれみたいに使うmikroC PRO for PIC &gt; Lcd Library→ https://download.mikroe.com/documents/compilers/mikroc/pic/help/lcd_library.htm\n使うもの\n有機ＥＬキャラクタディスプレイモジュール　１６ｘ２行　白色  → http://akizukidenshi.com/catalog/g/gP-08277/\n  １６文字×２行の有機ＥＬ（ＯＬＥＤ）ディスプレイです。  マイコン等で制御することで内部に登録済みの任意の文字を表示させることが出来ます。  液晶と違い、文字が光りますので暗い場所での視認性が良好です。また視野角が広いです。  特長  ・コントラストが高く視認性に優れます。  ・視野角が広いです。  ・３．３Ｖ単一電源動作です。  ・Ｉ２Ｃインタフェースです。\n\n自作したライブラリ  → https://github.com/keijirotanabe/Arduino-Oled-like-mikroC\n\nESP8266(ESP-WROOM-02)  → ESPr Developer(ESP-WROOM-02開発ボード)\n\n","text":"有機ＥＬキャラクタディスプレイモジュールをESP8266(ESP-WROOM-02)でmikroCのLcd Library風に使う これみたいに使うmikroC PRO for PIC &gt; Lcd Library→ https://download.mikroe.com/documents/compilers/mikroc/pic/help/lcd_library.htm 使うもの 有機ＥＬキャラクタディスプレイモジュール １６ｘ２行 白色 → http://akizukidenshi.com/catalog/g/gP-08277/ １６文字×２行の有機ＥＬ（ＯＬＥＤ）ディスプレイです。 マイコン等で制御することで内部に登録済みの任意の文字を表示させることが出来ます。 液晶と違い、文字が光りますので暗い場所での視認性が良好です。また視野角が広いです。 特長 ・コントラストが高く視認性に優れます。 ・視野角が広いです。 ・３．３Ｖ単一電源動作です。 ・Ｉ２Ｃインタフェースです。 自作したライブラリ → https://github.com/keijirotanabe/Arduino-Oled-like-mikroC ESP8266(ESP-WROOM-02) → ESPr Developer(ESP-WROOM-02開発ボード) 配線有機ＥＬキャラクタディスプレイモジュール１６ｘ２行のピン配列 OLED(pin番号) ESP8266 説明 VSS(1) GND 電源グランド VDD(2) 3.3V 電源＋ /CS(3) GND 必ずVSSに接続 SA0(4) GND スレーブアドレス L→0x3C or H→0x3D SCL(7) IO5 I2C クロック, 4.7kΩでプルアップ SDA in(8) IO4 I2C データ入力, 4.7kΩでプルアップ SDA out(9) IO4 I2C データ出力, 4.7kΩでプルアップ 自作ライブラリをインポートダウンロードhttps://github.com/keijirotanabe/Arduino-Oled-like-mikroC 使い方自作ライブラリのインクルード 12#include &lt;Wire.h&gt;#include &lt;Arduino-Oled-like-mikroC.h&gt; 直接、記述してもかまいません 関数一覧 コマンド 目的 サンプルコード Oled_Init 初期化 Oled_Init() Oled_Cmd コマンド書き込み(↓の表を引数にとる) Oled_Cmd(ClearDisplay) Oled_Out 位置を指定して、文字列を表示 Oled_Out(1, 1, “Hello World!”) Oled_Out_Cp カーソルのある位置に文字列を表示 Oled_Out_Cp(“Hello World!”) Oled_Chr 位置を指定して、１文字を表示 Oled_Out(2, 1, ‘A’) Oled_Chr_Cp カーソルのある位置に１文字を表示 Oled_Chr_Cp(‘A’) Oled_Set_Cursor カーソルの位置を変更 Oled_Set_Cursor(2, 1) Oled_Set_Contrast コントラストを変更 Oled_Set_Contrast(0x7F) Oled_Max_Contrast コントラスト最大 Oled_Max_Contrast() Oled_Min_Contrast コントラスト最小 Oled_Min_Contrast() Oled_Cmd関数のコマンド一覧Oled_Cmd(コマンド) コマンド 目的 ClearDisplay 表示をクリアする ReturnHome カーソルをホームポジションに戻し、シフト表示を元の位置に戻します DisplayON 液晶ディスプレイをオンにする DisplayOFF 液晶ディスプレイをオフにする CursorON カーソルをオフにする CursorOFF カーソルをオンにする BlinkON カーソルを点滅させる BlinkOFF カーソルを点滅さない ShiftLeft 表示RAMデータを変更せずに表示を左にシフト ShiftRight 表示RAMデータを変更せずに表示を右にシフト CursorLeft 表示RAMデータを変更せずにカーソルを左に移動 CursorRight 表示RAMデータを変更せずにカーソルを右に移動","raw":null,"content":null,"categories":[{"name":"ESP8266","slug":"ESP8266","permalink":"https://keijirotanabe.github.io/blog/categories/ESP8266/"}],"tags":[{"name":"Arduino","slug":"Arduino","permalink":"https://keijirotanabe.github.io/blog/tags/Arduino/"},{"name":"ESP8266","slug":"ESP8266","permalink":"https://keijirotanabe.github.io/blog/tags/ESP8266/"},{"name":"ESP-WROOM-02","slug":"ESP-WROOM-02","permalink":"https://keijirotanabe.github.io/blog/tags/ESP-WROOM-02/"}]},{"title":"Raspberry Pi 3のはじめかた","slug":"raspberry-pi-3-starting-step-170210","date":"2017-02-11T01:49:17.000Z","updated":"2017-02-22T01:49:17.000Z","comments":true,"path":"2017/02/11/raspberry-pi-3-starting-step-170210/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/11/raspberry-pi-3-starting-step-170210/","excerpt":"Raspberry Pi 3 にRaspbianをインストールして使えるようにするまでのやり方を解説します。\n公式サイトhttps://www.raspberrypi.org/","text":"Raspberry Pi 3 にRaspbianをインストールして使えるようにするまでのやり方を解説します。 公式サイトhttps://www.raspberrypi.org/ 使用する環境 Windows10 Home 64bit Raspberry Pi 3 Model B Element14版 Raspbian Jessie with PIXEL 必要なもの Raspberry Pi 3 本体 microSD (8G以上) ↓によると SD と Raspberry Pi には相性があるようです 参考: http://elinux.org/RPi_SD_cards マウス キーボード モニター HDMI出力ができるもの HDMIケーブル 電源 MicroUSB経由 (2.5A推奨) ここでは2.4Aのを使っています 手順その前に、これは覚えておいてください。 電源ON → 電源ケーブルを挿す電源OFF → sudo poweroff 手順を説明します。 まずはSDをフォーマットする「SDカードフォーマッター」でSDカードをフォーマット(初期化)します。 ダウンロード先https://www.sdcard.org/jp/downloads/formatter_4/index.html 詳しくはSDカードフォーマッターの使い方 「Raspbian」の用意ダウンロード先https://www.raspberrypi.org/downloads/raspbian/ GUI版とCUI版がありますが、今回はGUI版をダウンロードします 「Raspbian」をSDカードに書き込むRaspbianをSDカードに書き込むには、「Win32DiskImager」を使います ダウンロード先https://ja.osdn.net/projects/sfnet_win32diskimager/ 詳しくはWin32DiskImagerの使い方 Raspberry Piを起動させるSDカードを挿します 周辺を接続 電源は最後に挿します 起動しました 設定まずはWiFiに接続Raspberry Pi 3には標準でWiFiがついています。 また、Raspberry Pi 2以前では、WiFi機能がないのでWiFiドングルが必要です。 接続方法 WindowsからSSHで接続SSHの設定をONにPreferences &gt; Raspberry Pi Configuration Interfaces &gt; SSH: Enabled &gt; OK IPアドレスの確認ターミナルを起動します 以下のコマンドを入力 1ifconfig 調べたIPアドレスはメモしておいてください Tera Termで接続Tera Term をインストール ダウンロード先https://ja.osdn.net/projects/ttssh2/releases/66795 ↑で調べたIPアドレスを入力して「OK」 セキュリティ警告「続行」 ユーザー名とパスワードを入力して「OK」 なお、デフォルトの設定は ユーザー名 パスワード pi raspberry となっています ログイン画面 パッケージの更新リポジトリのアップデート 1sudo apt-get update つづいて ↓ のコマンドでパッケージのアップデート※時間がかかるので注意してください 1sudo apt-get upgrade 途中で聞かれたら「y」を入力して「Enter」 途中で聞かれたら「q」を入力 終了するまで、1時間くらいかかりました 日本語化するロケールとタイムゾーンの変更 「OK」を押して再起動してください。 日本語入力できるようにする日本語IMEをインストールします。今回は、ibus-mozcを使います。 ↓ でインストール1sudo apt-get install ibus-mozc これで、日本語入力ができるようになりました。 リモートデスクトップでPCから操作できるようにする詳しくはRaspberry Pi 3をリモートデスクトップで操作できるようにする ↓ をインストール12sudo apt-get install tightvncserversudo apt-get install xrdp ↓ キーボードの設定123456cd /etc/xrdp/sudo wget http://w.vmeta.jp/temp/km-0411.inisudo ln -s km-0411.ini km-e0010411.inisudo ln -s km-0411.ini km-e0200411.inisudo ln -s km-0411.ini km-e0210411.inisudo service xrdp restart 先ほど調べたIPアドレスへ接続します ユーザー名とパスワードを入力して「OK」 ユーザー名: pi パスワード: raspberry 以下の画面が表示されます Avahiでホスト名でアクセスできるようにするTera Termや、リモートデスクトップからログインするするには、IPアドレス分からないといけません。ですが、IPアドレスは変わるので、変わる度に調べるのはめんどうです。IPアドレスを固定するか、Avahiでホスト名でアクセスできると便利です。 「Raspbian Jessie with PIXEL」には、初めからAvahiがインストールされていました。 Avahiがインストールされているかは↓のコマンドで調べられます。1dpkg -l avahi-daemon 0.6.31-5がインストールされていました。 入ってなければ、↓のコマンドでインストールできます。1sudo apt-get install avahi-daemon 接続するPCには、Bonjourをインストールします。 BonjourはiTunesにも使われてますので、iTunesをインストールされているなら、このステップは飛ばしてください。 ダウンロードhttps://support.apple.com/kb/DL999?locale=ja_JP 必要なのはBonjourですので、プリンタウィザードはあとでアンインストールして構いません。 あとは、raspberrypi.localで接続します。 raspberrypiがホスト名です。接続するには、ホスト名のあとに、.localをつけます。 ホスト名は↓のコマンドで確認できます。1cat /etc/hostname ホスト名を変更するにはhostnameファイルをvimなどで変更してください。 設定したデータのバックアップをとるまず、Raspberry Piの電源を切りますが、電源スイッチはついていません。↓のコマンドで電源OFFします。1sudo poweroff 電源が切れたら、SDをPCに接続してください。 管理者権限で、Win32DiskImagerを起動します。ファイルマークを押してください。 今回は、デスクトップに「2017-02-22-raspbian-back.img」で保存します。 SDの「Device」を確認し、「Read」を選択 完了しました。","raw":null,"content":null,"categories":[{"name":"Raspberry Pi","slug":"Raspberry-Pi","permalink":"https://keijirotanabe.github.io/blog/categories/Raspberry-Pi/"}],"tags":[{"name":"Raspberry Pi","slug":"Raspberry-Pi","permalink":"https://keijirotanabe.github.io/blog/tags/Raspberry-Pi/"},{"name":"Raspberry Pi 3","slug":"Raspberry-Pi-3","permalink":"https://keijirotanabe.github.io/blog/tags/Raspberry-Pi-3/"}]},{"title":"コマンドプロンプトの起動方法","slug":"command-prompt-start-up-170211","date":"2017-02-11T01:41:44.000Z","updated":"2017-02-22T04:57:43.853Z","comments":true,"path":"2017/02/11/command-prompt-start-up-170211/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/11/command-prompt-start-up-170211/","excerpt":"コマンドプロンプトの起動方法をメモ","text":"コマンドプロンプトの起動方法をメモ 共通「Windowsキー」+「R」→ 「ファイル名を指定して実行」 Windows10","raw":null,"content":null,"categories":[{"name":"補足","slug":"補足","permalink":"https://keijirotanabe.github.io/blog/categories/補足/"}],"tags":[{"name":"補足","slug":"補足","permalink":"https://keijirotanabe.github.io/blog/tags/補足/"}]},{"title":"Raspberry Pi 3をリモートデスクトップで操作できるようにする","slug":"raspberry-pi-remote-disktop-170211","date":"2017-02-11T00:52:02.000Z","updated":"2017-02-20T00:52:02.000Z","comments":true,"path":"2017/02/11/raspberry-pi-remote-disktop-170211/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/11/raspberry-pi-remote-disktop-170211/","excerpt":"Raspberry Piにxrdpをインストールして、Windowsのリモートデスクトップ機能から操作できるようにする","text":"Raspberry Piにxrdpをインストールして、Windowsのリモートデスクトップ機能から操作できるようにする 環境 Windows10 Home 64bit Raspberry Pi 3 Model B (Element14) Raspbian Jessie with PIXEL Tera Term バージョン 4.9.2 インストールtightvncserverのインストールxrdpというパッケージをインストールしますが、先にtightvncserverをインストールする必要があります 以下のコマンドでインストール 1sudo apt-get install tightvncserver 途中で聞かれたら「y」を入力して「Enter」 xrdpのインストール以下のコマンドでインストール 1sudo apt-get install xrdp 途中で聞かれたら「y」を入力して「Enter」 キーボードの設定日本語のキーボードと入力が対応していないので、修正が必要です。USキーボードかつ、英語しか使わないのなら、この設定は必要ありません。 ↓のコマンドを順に入力します。123456cd /etc/xrdp/sudo wget http://w.vmeta.jp/temp/km-0411.inisudo ln -s km-0411.ini km-e0010411.inisudo ln -s km-0411.ini km-e0200411.inisudo ln -s km-0411.ini km-e0210411.inisudo service xrdp restart IPアドレスの確認1ifconfig ここでは192.168.11.15を使用します※各自、異なります リモートデスクトップの起動リモートデスクトップを起動させます 「リモートデスクトップ」で検索して起動します 先ほど調べたIPアドレス(192.168.11.15)へ接続します ユーザー名とパスワードを入力して「OK」 なお、デフォルトの設定は ユーザー名 パスワード pi raspberry になっています 以下の画面が表示されます 以上です","raw":null,"content":null,"categories":[{"name":"Raspberry Pi","slug":"Raspberry-Pi","permalink":"https://keijirotanabe.github.io/blog/categories/Raspberry-Pi/"}],"tags":[{"name":"Raspberry Pi","slug":"Raspberry-Pi","permalink":"https://keijirotanabe.github.io/blog/tags/Raspberry-Pi/"},{"name":"Raspberry Pi 3","slug":"Raspberry-Pi-3","permalink":"https://keijirotanabe.github.io/blog/tags/Raspberry-Pi-3/"}]},{"title":"Win32DiskImagerの使い方","slug":"win32-disk-imager-170211","date":"2017-02-10T19:56:35.000Z","updated":"2017-02-22T05:53:50.667Z","comments":true,"path":"2017/02/10/win32-disk-imager-170211/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/10/win32-disk-imager-170211/","excerpt":"SDカードやUSBメモリーにイメージファイルを書き出せるソフトWin32DiskImagerを説明します","text":"SDカードやUSBメモリーにイメージファイルを書き出せるソフトWin32DiskImagerを説明します ダウンロードダウンロード先https://ja.osdn.net/projects/sfnet_win32diskimager/ インストールダウンロードしたWin32DiskImager-0.9.5-install.exeを実行します 以下の流れでインストール 使い方起動管理者として実行何か聞かれたら「はい」を選択 起動画面 ファイルを選択書き込みたいファイルを選択します※ここでは2017-01-11-raspbian-jessie.imgを選択 ファイルのマークを選択 ファイルを開く 選択できました 書き込み先を選択書き込み先のSDカードまたは、USBメモリーを選択します (F:)に書き込みたいので、[F]を選択 ※大抵、初めから選択されています 書き込み開始「Write」を選択 書き込み中終わるまで待ちます 終わりました 使い方は以上です","raw":null,"content":null,"categories":[{"name":"補足","slug":"補足","permalink":"https://keijirotanabe.github.io/blog/categories/補足/"}],"tags":[{"name":"補足","slug":"補足","permalink":"https://keijirotanabe.github.io/blog/tags/補足/"},{"name":"Win32DiskImager","slug":"Win32DiskImager","permalink":"https://keijirotanabe.github.io/blog/tags/Win32DiskImager/"}]},{"title":"SDカードフォーマッターの使い方","slug":"sd-formatter-4-170210","date":"2017-02-10T06:13:41.000Z","updated":"2017-02-22T05:53:44.079Z","comments":true,"path":"2017/02/10/sd-formatter-4-170210/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/10/sd-formatter-4-170210/","excerpt":"SDカードフォーマッターの使い方を説明SDカードフォーマッターは、SD / SDHC / SDXC カードのフォーマットに対応し、メモリーカードの性能が最適になるように設計されています。","text":"SDカードフォーマッターの使い方を説明SDカードフォーマッターは、SD / SDHC / SDXC カードのフォーマットに対応し、メモリーカードの性能が最適になるように設計されています。 ダウンロードSDフォーマッター4.0の入手先https://www.sdcard.org/jp/downloads/formatter_4/index.html インストールダウンロードしたファイルを解凍するとsetup.exeがあるので実行します 使い方インストールできたら起動します SDカードを刺して「フォーマット」を選択","raw":null,"content":null,"categories":[{"name":"補足","slug":"補足","permalink":"https://keijirotanabe.github.io/blog/categories/補足/"}],"tags":[{"name":"補足","slug":"補足","permalink":"https://keijirotanabe.github.io/blog/tags/補足/"},{"name":"SDカードフォーマッター","slug":"SDカードフォーマッター","permalink":"https://keijirotanabe.github.io/blog/tags/SDカードフォーマッター/"}]},{"title":"Node.jsでHTTPサーバーを立てるまでの解説","slug":"node-js-how-to-170210","date":"2017-02-09T19:56:47.000Z","updated":"2017-02-22T05:47:16.967Z","comments":true,"path":"2017/02/09/node-js-how-to-170210/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/09/node-js-how-to-170210/","excerpt":"Node.jsでHTTPサーバー起動を起動して、「Hello World!」をブラウザで表示するまでを丁寧に説明\n環境\nWindows10 Home 64bit\nNode.js バージョン6.9.5  インストール手順はNode.jsのインストール方法を参照\nテキストエディタ → Sublime Text\nウェブブラウザ → Google Chrome\n","text":"Node.jsでHTTPサーバー起動を起動して、「Hello World!」をブラウザで表示するまでを丁寧に説明 環境 Windows10 Home 64bit Node.js バージョン6.9.5 インストール手順はNode.jsのインストール方法を参照 テキストエディタ → Sublime Text ウェブブラウザ → Google Chrome server.jsの用意今回はデスクトップで作業してくので、デスクトップにhelloworldというフォルダを用意します helloworldの中にserver.jsを作ります テキストエディタで開きます 基本的なHTTPサーバー全体のコードserver.js123456789101112var http = require('http');var port = 3000;var server = http.createServer(function(req, res) &#123; res.statusCode = 200; res.setHeader('Content-Type', 'text/plain'); res.end('Hello World!\\n');&#125;);server.listen(port, function() &#123; console.log('Server running');&#125;); コードの解説 var http = require(&#39;http&#39;); httpモジュールの読み込み var port = 3000; 3000番ポートを使う var server = http.createServer(コールバック関数) httpサーバー作成し、serverに代入 serverにアクセスがくるとコールバック関数が呼ばれる res.statusCode = 200; ステータスコード200は成功を意味する 詳しくはHTTPのステータスコード res.setHeader(&#39;Content-Type&#39;, &#39;text/plain&#39;); コンテンツタイプをテキストに 参考: Content-Typeの一覧 res.end(&#39;Hello World!\\n&#39;); すべてのヘッダー情報と本文(「Hello World」)が送信されたことをサーバーに通知 server.listen(port, コールバック関数) httpサーバーを3000番ポートで待機させた後、コールバック関数を呼ぶ console.log(&#39;Server running&#39;); コンソールに「Server running」と表示 より詳しくはHTTP | Node.js v6.9.5 Documentation 書いたコードを実行コマンドプロンプトを起動しますわからない人はコマンドプロンプトの起動方法を参考に デスクトップにhelloworldフォルダを作ったので、移動しますcd Disktop/helloworldと入力して「Enter」 server.jsを起動します起動するにはnodeコマンドを使いますnode serverと入力して「Enter」 うまくいけば「Server running」が表示されます ウェブブラウザから表示Google Chromeを立ち上げてlocalhost:3000と入力して「Enter」 「Hello World!」が表示されれば成功です コードを加えます上の画像で「localhost:3000」アクセスがあったら呼ばれるというのを見ていきます console.log(&#39;Connected&#39;);を加えます 全体のコードserver.js12345678910111213var http = require('http');var port = 3000;var server = http.createServer(function(req, res) &#123; console.log('Connected'); // &lt;- 追加 res.statusCode = 200; res.setHeader('Content-Type', 'text/plain'); res.end('Hello World!\\n');&#125;);server.listen(port, function() &#123; console.log('Server running');&#125;); コードを書き替えたので、サーバーを再起動します 以前、入力したキーは「↑」、「↓」で選択可 ↓の①を何回か押してみて下さい 「localhost:3000」にアクセスがくると、http.createServer(引数)の引数に渡した関数が呼ばれますこれでこのコードの意味が分かると思います","raw":null,"content":null,"categories":[{"name":"プログラミング","slug":"プログラミング","permalink":"https://keijirotanabe.github.io/blog/categories/プログラミング/"},{"name":"Node.js","slug":"プログラミング/Node-js","permalink":"https://keijirotanabe.github.io/blog/categories/プログラミング/Node-js/"}],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"https://keijirotanabe.github.io/blog/tags/Node-js/"}]},{"title":"Node.jsのインストール方法","slug":"node-js-install-step-170210","date":"2017-02-09T19:54:23.000Z","updated":"2017-02-22T05:47:17.871Z","comments":true,"path":"2017/02/09/node-js-install-step-170210/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/09/node-js-install-step-170210/","excerpt":"Node.jsのインストール方法の解説\n公式サイトhttps://nodejs.org/ja/","text":"Node.jsのインストール方法の解説 公式サイトhttps://nodejs.org/ja/ Node.jsとは特徴 サーバー側で動作するJavaScript 通常、JavaScriptはウェブブラウザの中で実行されるが、Node.jsはサーバサイドで動作するJavaScriptの一種 ノンブロッキングI/O 送受信の完了を待たないで、他の処理を開始する通信方法 シングルスレッド 並行処理などを行わずにすべての演算を逐次に処理していくこと イベントドリブン ユーザや他のプログラムが実行した操作（イベント）に対応して処理を行う、プログラムの実行形式 ユーザが操作を行っていないときはプログラムは何もせず待機している メリット 早くてリアルタイムに強い 多数のアクセスに強い インストール手順Windows推奨版の6.9.5をインストールしていきます ダウンロードページ64bit版ダウンロード Windows (x64) 32bit版はこちらダウンロード Windows (x32) インストール手順 インストールされたか確認コマンドプロンプトを起動しますわからない人はコマンドプロンプトの起動方法を参考 node -vとnpm -vでインストールされたバージョンを確認","raw":null,"content":null,"categories":[{"name":"プログラミング","slug":"プログラミング","permalink":"https://keijirotanabe.github.io/blog/categories/プログラミング/"},{"name":"Node.js","slug":"プログラミング/Node-js","permalink":"https://keijirotanabe.github.io/blog/categories/プログラミング/Node-js/"}],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"https://keijirotanabe.github.io/blog/tags/Node-js/"}]},{"title":"回路図が書けるFritzingをインストール","slug":"fritzing-install-170208","date":"2017-02-08T03:42:50.000Z","updated":"2017-02-22T05:53:21.027Z","comments":true,"path":"2017/02/08/fritzing-install-170208/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/08/fritzing-install-170208/","excerpt":"回路図が書けるFritzingをインストールするまで\n公式サイトhttp://fritzing.org/home/\nダウンロードダウンロードページFritzing DownloadVersion 0.9.3b (2017/02/08時点)","text":"回路図が書けるFritzingをインストールするまで 公式サイトhttp://fritzing.org/home/ ダウンロードダウンロードページFritzing DownloadVersion 0.9.3b (2017/02/08時点) No DonationをチェックしてDownloadを選択 Windows 64bitを選択※環境に合わせてお選びください インストールファイルを解凍するとfritzing.0.9.3b.64.pcができるので、適当なフォルダにおいてください今回はC:\\fritzing.0.9.3b.64.pcにおきました Fritzing.exeで起動します右クリックからショートカットを作ってデスクトップに置いておくと便利かと思います 初回起動画面","raw":null,"content":null,"categories":[{"name":"Fritzing","slug":"Fritzing","permalink":"https://keijirotanabe.github.io/blog/categories/Fritzing/"}],"tags":[{"name":"Fritzing","slug":"Fritzing","permalink":"https://keijirotanabe.github.io/blog/tags/Fritzing/"}]},{"title":"ESP8266をArduinoとして使う","slug":"esp8266-how-to-170208","date":"2017-02-08T03:42:39.000Z","updated":"2017-02-22T05:52:40.795Z","comments":true,"path":"2017/02/08/esp8266-how-to-170208/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/08/esp8266-how-to-170208/","excerpt":"ESP8266(ESP-WROOM-02)をArduinoとして使う方法Arduino core for ESP8266 の基本的な使い方\n\n\n\n\n\n\n\n\n\n\n\n\n\nはじめに\nArduino core for ESP8266 | referenceを参照しています\n\nESPr Developer(ESP-WROOM-02開発ボード)を使用しています\n\n","text":"ESP8266(ESP-WROOM-02)をArduinoとして使う方法Arduino core for ESP8266 の基本的な使い方 はじめに Arduino core for ESP8266 | referenceを参照しています ESPr Developer(ESP-WROOM-02開発ボード)を使用しています 配線と起動モード 実行モード(Flash Boot Mode) 書き込んだプログラムで起動します 書き込みモード(UART Download Mode) プログラムが書き込めるようになります IO0 pinをHIGH でリセット → 実行モードLOW でリセット → 書き込みモードになります GPIO pinの名前 実行モード 書き込みモード GPIO0 IO0 HIGH LOW GPIO2 IO2 HIGH HIGH GPIO15 IO15 LOW LOW 機能解説デジタル IO GPIO 0〜15 → INPUT、OUTPUT、INPUT_PULLUP ※ただし、GPIO 6〜11はGPIOとして使用不可(↓参照) GPIO 16 → INPUT、OUTPUT、INPUT_PULLDOWN_16 ピン割り込みの使用 → GPIO 0〜15 attachInterrupt、detachInterrupt関数 デジタルピン0〜15は、INPUT、OUTPUT、INPUT_PULLUPのいずれかです。ピン16はINPUT、OUTPUT、INPUT_PULLDOWN_16のいずれかです。起動時に、ピンはINPUTとして設定されます。 デジタルピン6-11は、ほとんどのモジュール上のフラッシュメモリチップを接続するために使用されているため、この図には示されていません。 IOとしてこれらのピンを使用しようとすると、プログラムがクラッシュする可能性があります。 ピン割り込みは、attachInterrupt、detachInterrupt関数でサポートされています。割り込みは、GPIO16を除く任意のGPIOピンに接続できます。 デジタル出力IO13のLEDを点滅 123456789101112#define LED 13void setup() &#123; pinMode(LED, OUTPUT);&#125;void loop() &#123; digitalWrite(LED, HIGH); delay(1000); digitalWrite(LED, LOW); delay(1000);&#125; デジタル入力IO2のスイッチを押している間、IO13のLEDが点灯 123456789101112131415#define LED 13#define SWITCH 2void setup() &#123; pinMode(LED, OUTPUT); pinMode(SWITCH, INPUT);&#125;void loop() &#123; if (digitalRead(SWITCH) == LOW) &#123; digitalWrite(LED, HIGH); &#125; else &#123; digitalWrite(LED, LOW); &#125;&#125; アナログ出力 GPIO 0〜16で使用可 (※GPIO 6〜11を除く) analogWrite(pin, value)でON value → 0～1023 analogWrite(pin, 0)でOFF analogWrite（pin、value）指定されたピンでソフトウェアPWMをイネーブルにします。 PWMはピン0〜16で使用できます。ピンのPWMをディセーブルにするには、analogWrite（pin、0）を呼び出します。 値は0からPWMRANGEまでの範囲で指定できます。デフォルトは1023です。 IO13のLEDが徐々に明るくなるサンプルコード 123456789101112#define LED 13void setup() &#123; pinMode(LED, OUTPUT);&#125;void loop() &#123; for (int i = 0; i &lt; 1023; i++) &#123; analogWrite(LED, i); delay(3); &#125;&#125; アナログ入力analogRead(A0)で読み取り ※ADC_MODE(ADC_VCC);を関数の外に定義で、電源電圧の読み取り 入力電圧範囲は0〜1.0V ADCピンに印加される外部電圧を読み取るには、analogRead（A0）を使用します。 入力電圧範囲は0〜1.0Vです。 TOUT(A0)のAD変換値を読み取る 1234567891011int value;void setup() &#123; Serial.begin(115200);&#125;void loop() &#123; value = analogRead(A0); Serial.println(value); delay(100);&#125; 0～1023が得られるはずですが、以下のようにつなげて読み取った所、6～1024という値が得られました タイミングと遅延 リセット後の経過時間取得 ミリ秒 → millis() マイクロ秒 → micros() 遅延 ミリ秒 → delay() マイクロ秒 → delayMicroseconds() millis()およびmicros()は、それぞれリセット後に経過したミリ秒数およびマイクロ秒数を返します。 delay(ms)は、指定したミリ秒間スケッチを一時停止し、WiFiおよびTCP / IPタスクを実行できるようにします。 delayMicroseconds(us)は、指定されたマイクロ秒数で一時停止します。 シリアル通信 Serial.begin()をsetup関数に定義 Serial.swap()で使用するピンの組み合わせを変更 GPIO1(TX) &amp; GPIO3(RX) ↔ GPIO15(TX) &amp; GPIO13(RX) 選択 TX RX default GPIO1(TXD) GPIO3(RXD) Serial.swap()で変更 GPIO15(IO15) GPIO13(IO13) ※GPIO(pin Name) シリアルはUART 0を使用し、GPIO 1（TX）ピンとGPIO 3（RX）ピンにマッピングされます。 Serial.beginの後にSerial.swap（）を呼び出すことで、SerialはGPIO 15（TX）とGPIO 13（RX）を再マッピングできます。スワップを再度呼び出すと、UART 0がGPIO 1とGPIO 3にマップされます。 GPIO pin まとめ GPIO pinの名前 デジタル出力 デジタル入力 アナログ出力 アナログ入力 備考 GPIO0 IO0 〇 〇 〇 - 起動時に使用 GPIO1 TXD 〇 〇 〇 - 書き込みに使用 GPIO2 IO2 〇 〇 〇 - 起動時に使用 GPIO3 RXD 〇 〇 〇 - 書き込みに使用 GPIO4 IO4 〇 〇 〇 - - GPIO5 IO5 〇 〇 〇 - - GPIO12 IO12 〇 〇 〇 - - GPIO13 IO13 〇 〇 〇 - - GPIO14 IO14 〇 〇 〇 - - GPIO15 IO15 〇 〇 〇 - 起動時に使用 GPIO16 IO16 〇 〇 ※1 〇 - - A0 TOUT - - - 〇 - ※1 割り込みは不可 ESP-WROOM-02 | データシート Arduino core for ESP8266 | referenceの図 参考ESP-WROOM-02 | データシートArduino core for ESP8266 | DocumentationESP-WROOM-02 Arduino互換ボードのGPIOはこうやって使う","raw":null,"content":null,"categories":[{"name":"ESP8266","slug":"ESP8266","permalink":"https://keijirotanabe.github.io/blog/categories/ESP8266/"}],"tags":[{"name":"Arduino","slug":"Arduino","permalink":"https://keijirotanabe.github.io/blog/tags/Arduino/"},{"name":"ESP8266","slug":"ESP8266","permalink":"https://keijirotanabe.github.io/blog/tags/ESP8266/"},{"name":"ESP-WROOM-02","slug":"ESP-WROOM-02","permalink":"https://keijirotanabe.github.io/blog/tags/ESP-WROOM-02/"}]},{"title":"ESP8266にArduinoスケッチを書き込む","slug":"esp8266-Arduino-170207","date":"2017-02-07T06:45:56.000Z","updated":"2017-02-22T05:53:17.319Z","comments":true,"path":"2017/02/07/esp8266-Arduino-170207/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/07/esp8266-Arduino-170207/","excerpt":"ESP8266(ESP-WROOM-02)にArduinoのスケッチを書き込み、シリアルモニタに「Hello World」と表示させるまで\n\n\n\n\n\n\n\n必要なもの\nArduino IDE  ダウンロードページ  https://www.arduino.cc/en/Main/Software  バージョン 1.8.1　(2017/02/07時点)  Arduino IDEのインストールを参考  推奨版はバージョン 1.6.8ですが最新版バージョン 1.8.1(2017/02/07時点)でも動作しました\n\nESP8266 core for Arduino  https://github.com/esp8266/Arduino  Stable version 2.3.0 使用\n\nESP8266(ESP-WROOM-02)  ここではESPr Developer(ESP-WROOM-02開発ボード)を使用しています  MicroUSBを挿すだけで使えるので便利です\n\n","text":"ESP8266(ESP-WROOM-02)にArduinoのスケッチを書き込み、シリアルモニタに「Hello World」と表示させるまで 必要なもの Arduino IDE ダウンロードページ https://www.arduino.cc/en/Main/Software バージョン 1.8.1 (2017/02/07時点) Arduino IDEのインストールを参考 推奨版はバージョン 1.6.8ですが最新版バージョン 1.8.1(2017/02/07時点)でも動作しました ESP8266 core for Arduino https://github.com/esp8266/Arduino Stable version 2.3.0 使用 ESP8266(ESP-WROOM-02) ここではESPr Developer(ESP-WROOM-02開発ボード)を使用しています MicroUSBを挿すだけで使えるので便利です 手順ESP8266 core for Arduino のインストールESP8266 core for Arduino には 「Stable version」 「Staging version」がありますが、今回は「Stable version」（安定版）をインストールします https://github.com/esp8266/Arduino から画像の範囲をコピーします めんどくさい人はhttp://arduino.esp8266.com/stable/package_esp8266com_index.jsonをコピー ファイル &gt; 環境設定を開いて画像の範囲に貼り付け（Ctrl + V） → OK ツール &gt; ボード &gt; ボードマネージャ esp8266で検索 → インストール 完了したので閉じる Stable version 2.3.0がインストールされました ボードの設定ツール &gt; ボード &gt; Generic ESP8266 Moduleを選択 初期設定 画像の範囲を変更※ シリアルポートは各自選択してください スケッチを書き込む書き込みモードで起動します IO0がLOWの状態でリセットすれば、書き込みモードで起動します。 ※ ↑の画像でReset Method: nodemcuを選択すれば、次回から書き込みモードで起動する必要はありません https://www.switch-science.com/catalog/2500/を参考に IO0がHIGHの状態でリセットされるとファームウェアの実行モードで起動しますが、IO0がLOWの状態でリセットされるとファームウェアの書き込みモードで起動します。 以下のプログラムを書いて書き込みます 12345678void setup() &#123; Serial.begin(115200);&#125;void loop() &#123; Serial.println(&quot;Hello World&quot;); delay(1000);&#125; 書き込みボタンを押す ファイルを保存するか聞かれたのでhelloworldにして保存 書き込み完了 右上のアイコンを押す → シリアルモニタ起動CRおよびLF、115200 bpsに設定 「Hello World」と表示されれば上手くいきました 参考 ESP-WROOM-02開発ボードをArduino IDEで開発する方法 ESPr Developer ( ESP-WROOM-02 開発ボード )の使い方をザッと紹介","raw":null,"content":null,"categories":[{"name":"ESP8266","slug":"ESP8266","permalink":"https://keijirotanabe.github.io/blog/categories/ESP8266/"}],"tags":[{"name":"Arduino","slug":"Arduino","permalink":"https://keijirotanabe.github.io/blog/tags/Arduino/"},{"name":"ESP8266","slug":"ESP8266","permalink":"https://keijirotanabe.github.io/blog/tags/ESP8266/"},{"name":"ESP-WROOM-02","slug":"ESP-WROOM-02","permalink":"https://keijirotanabe.github.io/blog/tags/ESP-WROOM-02/"}]},{"title":"プログラミング用フォントRictyDiminishedをインストール","slug":"RictyDiminished","date":"2017-02-07T01:16:00.000Z","updated":"2017-02-22T05:54:37.447Z","comments":true,"path":"2017/02/07/RictyDiminished/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/07/RictyDiminished/","excerpt":"見やすいプログラミング用フォントのRictyDiminishedをWindowsにインストール","text":"見やすいプログラミング用フォントのRictyDiminishedをWindowsにインストール RictyDiminishedダウンロードページhttps://github.com/edihbrandon/RictyDiminished Download ZIPを押す ダウンロードしたファイルを展開します 新しくエクスプローラーを立ち上げてC:\\Windows\\Fontsを開きます fontファイルをfontフォルダへ、以下のようにコピーします 以上でRictyDiminishedのインストールは完了です","raw":null,"content":null,"categories":[{"name":"補足","slug":"補足","permalink":"https://keijirotanabe.github.io/blog/categories/補足/"}],"tags":[{"name":"Font","slug":"Font","permalink":"https://keijirotanabe.github.io/blog/tags/Font/"},{"name":"RictyDiminished","slug":"RictyDiminished","permalink":"https://keijirotanabe.github.io/blog/tags/RictyDiminished/"},{"name":"補足","slug":"補足","permalink":"https://keijirotanabe.github.io/blog/tags/補足/"}]},{"title":"Arduino IDEのインストール","slug":"Arduino-install-step-070207","date":"2017-02-07T01:15:29.000Z","updated":"2017-02-22T05:59:05.603Z","comments":true,"path":"2017/02/07/Arduino-install-step-070207/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/07/Arduino-install-step-070207/","excerpt":"Arduino IDEをインストールする手順\n\n\n\n\n\n\n\n\n使用環境\nWindows10 Home 64ビットArduino IDE バージョン 1.8.1\n公式サイトhttps://www.arduino.cc/\nダウンロードArduino IDE ダウンロードページ\nhttps://www.arduino.cc/en/Main/Softwareバージョン 1.8.1　(2017/02/07時点)","text":"Arduino IDEをインストールする手順 使用環境 Windows10 Home 64ビットArduino IDE バージョン 1.8.1 公式サイトhttps://www.arduino.cc/ ダウンロードArduino IDE ダウンロードページ https://www.arduino.cc/en/Main/Softwareバージョン 1.8.1 (2017/02/07時点) Windows Installer を選択※ 環境に合わせて選択してください 今回は寄付しないでダウンロードを選択 インストールarduino-1.8.1-windows.exeを実行 なにか聞かれるのではいを選択する 以下の手順でインストール 途中で聞かれたらインストール 同じくインストール 終わったらclose 起動画面 インストール完了 設定※以降は必須ではありません 環境設定ファイル → 環境設定 フォントサイズ: 好みの大きさ 行番号を表示する: ✅ コードの折り返しを有効に: ✅ 最後にOKを押す 起動時のウィンドウサイズを変更C:\\Users\\[ユーザー名]\\AppData\\Local\\Arduino15を押すとフォルダArduino15フォルダが開く Arduino IDE を閉じる Arduino15フォルダのpreferences.txtを編集 以下の箇所を変更 editor.window.height.default=600 editor.window.width.default=500(初期値) editor.window.height.default=960 editor.window.width.default=720に変更Ctrl + S で保存（好みに合わせて） 起動時のウィンドウサイズを変更できました フォント変更フォントをRictyDiminishedに設定します RictyDiminishedをインストールしますプログラミング用フォントRictyDiminishedをインストールを参考に preferences.txtを編集して editor.font=RictyDiminished,plain,18に書き換えます 初期設定 編集後 Arduino IDE を起動すると、以下のようにフォントが変わりました","raw":null,"content":null,"categories":[{"name":"Arduino","slug":"Arduino","permalink":"https://keijirotanabe.github.io/blog/categories/Arduino/"}],"tags":[{"name":"Arduino","slug":"Arduino","permalink":"https://keijirotanabe.github.io/blog/tags/Arduino/"},{"name":"ESP8266","slug":"ESP8266","permalink":"https://keijirotanabe.github.io/blog/tags/ESP8266/"}]},{"title":"ArduinoのESP8266をATコマンドが使えるように戻す","slug":"esp8266-at-reset-170207","date":"2017-02-06T17:28:52.000Z","updated":"2017-02-22T05:53:01.655Z","comments":true,"path":"2017/02/06/esp8266-at-reset-170207/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/06/esp8266-at-reset-170207/","excerpt":"WifiモジュールESP-WROOM-02(ESP8266)は、一度Arduinoスケッチが書き込まれるとATコマンドが使えなくなります。ですが、正規のファームウェア書き直すことで、再びATコマンドが使えるようになります。\n必要なもの書き込む中身ファームウェアからESP8266 NONOS SDK V2.0.0 20160810をダウンロードします\n書き込みに使うツールFlash Download Toolsの中からWindows環境はFlash Download Tools V3.4.4 (ESP8266 &amp; ESP32)をダウンロードします\n書き込み先(ESP8266)この記事ではESPr Developer(ESP-WROOM-02開発ボード)を使用しています","text":"WifiモジュールESP-WROOM-02(ESP8266)は、一度Arduinoスケッチが書き込まれるとATコマンドが使えなくなります。ですが、正規のファームウェア書き直すことで、再びATコマンドが使えるようになります。 必要なもの書き込む中身ファームウェアからESP8266 NONOS SDK V2.0.0 20160810をダウンロードします 書き込みに使うツールFlash Download Toolsの中からWindows環境はFlash Download Tools V3.4.4 (ESP8266 &amp; ESP32)をダウンロードします 書き込み先(ESP8266)この記事ではESPr Developer(ESP-WROOM-02開発ボード)を使用しています 手順ESP8266 NONOS SDK V2.0.0 20160810を解凍し、以下のファイルを使用します blank.bin esp_init_data_default.bin boot_v1.6.bin user1.2048.new.5.bin 1234567891011121314151617esp8266_nonos_sdk_v2.0.0_16_08_10 | +-- ESP8266_NONOS_SDK | +-- bin | +-- blank.bin | +-- boot_v1.6.bin | +-- esp_init_data_default.bin | +-- at | +-- 1024+1024 | +-- user1.2048.new.5.bin Flash Download Tools を起動します ESPFlashDownloadTool_v3.4.4.exeを起動 12345flash_download_tools_v3.4.4 | +--- FLASH_DOWNLOAD_TOOLS_V3.4.4 | +--- ESPFlashDownloadTool_v3.4.4.exe ESP8266 DownloadToolを選択 起動画面 ドキュメントの中からESP8266 AT Instruction Setを参考にします 前述したファイルを以下のアドレスに書き込みます ファイル名 アドレス blank.bin 0x3FB000 esp_init_data_default.bin 0x3FC000 blank.bin 0xFE000 blank.bin 0x3FE000 boot_v1.6.bin 0x00000 user1.2048.new.5.bin 0x01000 以下の箇所を選択してください CrystalFreq: 26M SPI SPEED: 40Mhz SPI MODE: QIO FLASH SIZE: 32Mbit-C1 COM: [各自変更] BAUD: 230400 書き込みモードで起動 IO0がLOWの状態でリセットすれば、書き込みモードで起動します。 https://www.switch-science.com/catalog/2500/を参考に IO0がHIGHの状態でリセットされるとファームウェアの実行モードで起動しますが、IO0がLOWの状態でリセットされるとファームウェアの書き込みモードで起動します。 書き込むSTARTを押します 完了 確認以下のように変更 実行モードで起動するために、IO0がHIGHの状態でリセットします redyと帰ってきたらATと入力してEnterを押して下さい OKが帰ればATコマンドが使えるようになります","raw":null,"content":null,"categories":[{"name":"ESP8266","slug":"ESP8266","permalink":"https://keijirotanabe.github.io/blog/categories/ESP8266/"}],"tags":[{"name":"ESP8266","slug":"ESP8266","permalink":"https://keijirotanabe.github.io/blog/tags/ESP8266/"},{"name":"ESP-WROOM-02","slug":"ESP-WROOM-02","permalink":"https://keijirotanabe.github.io/blog/tags/ESP-WROOM-02/"},{"name":"WiFi","slug":"WiFi","permalink":"https://keijirotanabe.github.io/blog/tags/WiFi/"}]},{"title":"HEXOで使えるMarkDown記法","slug":"markdown","date":"2017-02-04T12:03:00.000Z","updated":"2017-02-22T06:01:58.903Z","comments":true,"path":"2017/02/04/markdown/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/04/markdown/","excerpt":"Hexoで記事を書くときの記法まとめ","text":"Hexoで記事を書くときの記法まとめ 目次 見出し リンク 斜体、強調 リスト テーブル 画像 コード・ブロック インライン・コード Block Quote 参考 見出しh1の見出しh2の見出しh3の見出しh4の見出しh5の見出しh6の見出し123456# h1の見出し## h2の見出し### h3の見出し#### h4の見出し##### h5の見出し###### h6の見出し h1 と h2 は以下のやり方も使える h1の見出しh2の見出し1234h1の見出し=========h2の見出し--------- リンクGoogleサイト内リンクHello World 123[Google](http://google.com)[サイト内リンク](/blog/tags/HEXO/)&#123;% post_link hello-world %&#125; 斜体、強調斜体強調 12*斜体***強調** リストul リスト list 説明１。説明１。説明１。説明１。説明１。説明１。 list 説明２。説明２。説明２。説明２。説明２。 list 12345- list 説明１。説明１。説明１。説明１。説明１。説明１。- list 説明２。説明２。説明２。説明２。説明２。- list ol リスト（番号付き） リスト１ リスト２ リスト３ 1231. リスト１2. リスト２3. リスト３ テーブル left center right aaa bbb ccc aaa bbb ccc aaa bbb ccc 12345|left | center | right| |:-------|:------:|-------:||aaa |bbb |ccc ||aaa |bbb |ccc ||aaa |bbb |ccc | 画像Googleフォトから 1![sample.jpg](https://lh3.googleusercontent.com/cW67I7JnR5qK_0d5PpnZrUjtKMDmngACeK2miSINisJB1Ma0SXzfTQadXOA4Z47vmGkmT7o7KZ9afrT5ccpBG07VpA_OZfSqnhZ-csDO-Tn3b23WkUDxeAkhiUxvGVl_seualFbNPVgOSCSrwdwgYsBS3nHRYWjAlA23TF9oHvAMQtEkNXRRscGqGX4PkQyF-VQeWjPV4pu775rVl3pW0crVx_MK818y3niAKDdk317-mO9uwDjOHbQEJ-z9CiU4LTFZ3q7AY9LJtoKoeMxFMQbR9WKq0XPhhFMtwjjRF1JKMSCRJfkDgK-MmtFedQ-EsJUDHuI5QtgyYT7OtqQ4IAsgx5YQNuyPGQ7oW1E4Bb-bJ6oo8M2JMPh5qAFn6zNMSqvvRR3xQBp7IGnCY8H2nTNyqmtIepVdjft8vCaeJcp8p9F5gvwsrS8m6tGZDcpEzUDwQdj8mUThAWl3CHKsISVGAGqw3CaPyQgB910HeHyDIbCiw7jVBUnnVjfk5IP485ma4ZSuxJdnYTothNKMGBBoqr1fJmQIcRQstaS3kPCRnzy0PsKvVygFTmJ1NnLUd82qL-djXqygcwToJZtRHK1T-anw7vsWavK-FUTw8N5lO_8iUWHW=w260-h193-no &quot;sample.jpg&quot;) HEXO内から 以下のように、同じ名前のフォルダを作り、その下に画像ファイルを置く 12345_post ----+--- sample.md | +--+ sample | +--- sample.jpg sample.md から以下のように呼び出す1&#123;% asset_img sample.jpg %&#125; また、_config.yml の次の値をtrueに書き換え（デフォルト値はfalse）することで hexo new したときに自動でファイルが作られる 1post_asset_folder: true コード・ブロック```を使うやり方script.js123function hello() &#123; console.log('Hello World!');&#125; ``` javascript script.jsfunction hello() { console.log(‘Hello World!’);}``` {% codeblock %}を使うやり方script.js123function hello() &#123; console.log('Hello World!');&#125; 12345&#123;% codeblock script.js lang:javascript %&#125;function hello() &#123; console.log(&apos;Hello World!&apos;);&#125;&#123;% endcodeblock %&#125; インライン・コードこれはインラインコードです。 1これは`インラインコード`です。 Block QuoteMarkDown での書き方 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. 1&gt; Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. {% blockquote %} での書き方Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. 123&#123;% blockquote %&#125;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.&#123;% endblockquote %&#125; 参考DARING FIREBALL | Markdown: SyntaxHEXO公式 | Tag Pluginsmarkdownの記法まとめ・hexoで記事を書く方法","raw":null,"content":null,"categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://keijirotanabe.github.io/blog/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://keijirotanabe.github.io/blog/tags/Hexo/"},{"name":"MarkDown","slug":"MarkDown","permalink":"https://keijirotanabe.github.io/blog/tags/MarkDown/"}]},{"title":"固定ページのつくり方（メモ）","slug":"固定ページのつくり方（メモ）","date":"2017-02-04T02:59:26.000Z","updated":"2017-02-22T06:01:05.743Z","comments":true,"path":"2017/02/04/固定ページのつくり方（メモ）/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/04/固定ページのつくり方（メモ）/","excerpt":"Hexoで固定ページを作るメモ","text":"Hexoで固定ページを作るメモ 1$ hexo new page index で、indexフォルダの下にindex.mdが作られる 12345source --+-- _posts | +-+ index | +--- index.md themes/[テーマ名]/_config.ymlを編集 _config.yml123456# Headermenu: ## If your site is put in a subdirectory, set Home as '/child/' Home: / Archives: archives index: index index: indexを追加","raw":null,"content":null,"categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://keijirotanabe.github.io/blog/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://keijirotanabe.github.io/blog/tags/Hexo/"},{"name":"メモ","slug":"メモ","permalink":"https://keijirotanabe.github.io/blog/tags/メモ/"}]}]}