{"meta":{"title":"blog","subtitle":null,"description":"忘れないようにメモします","author":"田邊 慶次朗","url":"https://keijirotanabe.github.io/blog"},"pages":[{"title":"index Page","date":"2017-02-16T02:26:49.200Z","updated":"2017-02-16T02:26:49.200Z","comments":true,"path":"index/index.html","permalink":"https://keijirotanabe.github.io/blog/index/index.html","excerpt":"","text":"固定ページです","raw":null,"content":null}],"posts":[{"title":"Googleフォトに置いてあるブログ用の画像が表示されなくなった","slug":"google-photo-not-show-170217","date":"2017-02-17T03:27:09.000Z","updated":"2017-02-17T13:05:25.287Z","comments":true,"path":"2017/02/17/google-photo-not-show-170217/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/17/google-photo-not-show-170217/","excerpt":"","text":"ブログ用の画像をGoogleフォト 問題 解決策1&lt;img src=&quot;http://drive.google.com/uc?export=view&amp;id=[画像ID]&quot;&gt; 参考 Googleフォトの写真や動画をWebページに埋め込むには（追記あり） Google フォトの画像をホームページに貼る方法 Googleドライブの画像をMarkdownの中に挿入する方法.md","raw":null,"content":null,"categories":[],"tags":[]},{"title":"Cloud9からHexoを使ってGutHub Pagesにブログを公開する手順","slug":"Cloud9とHEXOを使ってGutHub Pagesにブログを公開する手順","date":"2017-02-16T06:08:05.956Z","updated":"2017-02-16T06:08:05.956Z","comments":true,"path":"2017/02/16/Cloud9とHEXOを使ってGutHub Pagesにブログを公開する手順/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/16/Cloud9とHEXOを使ってGutHub Pagesにブログを公開する手順/","excerpt":"","text":"Cloud9にHexoをインストールし作成したブログをGitHub Pagesに公開するやり方をメモ 手順 Clude9とGitHubの登録 Clude9でblogを作成 GitHubにリポジトリを作成 SSHの設定 GitHub Pages にデプロイする Clude9とGitHubの登録GitHubCloud9 Clude9でblogを作成作業用プロジェクトの作成手順 create a new workspace Workspace name: blog_work Choose a template -&gt; Node.js Create workspace blog_workという名前のプロジェクトができます。 初めにあるファイルはすべて削除します。 以下でnodeとnpmのバージョンを確認1234~/workspace $ node -vv4.6.1~/workspace $ npm -v2.15.9 HexoのインストールHexo公式サイト 12345~/workspace $ npm install hexo-cli -g~/workspace $ hexo init blog~/workspace $ cd blog~/workspace/blog $ npm install~/workspace/blog $ hexo server -p 8080 ターミナルから http://localhost:8080/ -&gt; Open SSHの設定Clude9の場合1$ cat ~/.ssh/id_rsa.pub で公開鍵が出力されるので、コピーする Clude9以外の場合.sshディレクトリの作成 1~/workspace/blog $ mkdir ~/.ssh 鍵を生成12345~/workspace/blog $ ssh-keygen -t rsaGenerating public/private rsa key pair.Enter file in which to save the key (/Users/(username)/.ssh/id_rsa):Enter passphrase (empty for no passphrase):Enter same passphrase again: 何か聞かれるので3回エンター 鍵の中身をクリップボードへコピーxselのインストール 1~/workspace/blog $ sudo apt-get install xsel クリップボードへコピーするコマンド 12345~/workspace/blog $ cat ./id_rsa.pub | xsel --clipboard --input# Mac or Windows$ pbcopy &lt; ~/.ssh/id_rsa.pub (Mac)$ clip &lt; ~/.ssh/id_rsa.pub (Windows) 公開鍵をGitHubに登録公開鍵をGitHubに登録で公開鍵を設定。 New SSH key Titlte : cloud9-ssh-rsa Key : 鍵の中身をコピペ (Ctrl + V) Add SSH key 接続確認 12~/workspace/blog $ ssh -T git@github.comHi &lt;アカウント名&gt; You&apos;ve successfully authenticated, but GitHub does not provide shell access. と返れば成功 GitHubにリポジトリを作成手順 Start a project Repository name: blog Create repository SSH文字列をコピー 1git@github.com:keijirotanabe/blog.git こういうやつ GitHub Pages にデプロイする GitHub Pages へデプロイするには ‘hexo-deployer-git’ という Hexo のプラグインをインストールする必要があるので、 1$ npm install hexo-deployer-git --save でインストール gitの設定バージョン確認 12$ git --versiongit version 2.10.2 インストールされてなければ以下で、インストール 1$ sudo apt-get install git-core 名前とメールアドレスの設定 12$ git config --global user.name &quot;Keijiro Tanabe&quot;$ git config --global user.email &quot;ayt7gysnyx@gmail.com&quot; 設定できたか確認 123456789$ git config -luser.name=Keijiro Tanabeuser.email=ayt7gysnyx@gmail.comcore.editor=nanocore.whitespace=offcore.excludesfile=~/.gitignoreadvice.statusuoption=falsecolor.ui=truepush.default=current _config.yml の編集Deployment | Hexoを参考に_config.ymlファイルを編集していく url: https://[アカウント名].github.io/blog/ 123456789url: https://keijirotanabe.github.io/blog/root: /blog/# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:keijirotanabe/blog.git (さっきコピーしたやつ) branch: gh-pages デプロイ1~/workspace/blog $ hexo deploy -g https://keijirotanabe.github.io/blog/https://[アカウント名].github.io/blog/ といったurlにアクセス 参考HexoのインストールとGitHub PageへデプロイgitHubでssh接続する手順~公開鍵・秘密鍵の生成から~ メモ Cloud9背景黒Preferences -&gt; THEMES -&gt; Classic Theme","raw":null,"content":null,"categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://keijirotanabe.github.io/blog/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://keijirotanabe.github.io/blog/tags/Hexo/"},{"name":"Cloud9","slug":"Cloud9","permalink":"https://keijirotanabe.github.io/blog/tags/Cloud9/"},{"name":"GutHub","slug":"GutHub","permalink":"https://keijirotanabe.github.io/blog/tags/GutHub/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-02-16T02:26:38.644Z","updated":"2017-02-16T02:26:38.644Z","comments":true,"path":"2017/02/16/hello-world/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/16/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","raw":null,"content":null,"categories":[],"tags":[]},{"title":"Hexoのテーマicarusでサイト内検索を追加する","slug":"hexo-search-add-170216","date":"2017-02-15T19:01:51.000Z","updated":"2017-02-17T11:02:23.603Z","comments":true,"path":"2017/02/15/hexo-search-add-170216/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/15/hexo-search-add-170216/","excerpt":"","text":"Hexoのテーマicarusでサイト内検索を追加するのにつまづいたのでメモ _config.ymlの設定themes &gt; icarus &gt; _config.yml を編集 config.yml12search: insight: true としたあと、 hexo-generator-json-contentをインストール 1$ npm install hexo-generator-json-content --save これで、追加されるはず、、、 1$ hexo s -p 8080 --draft が、サーバーを起動したらエラーが発生 解決策1$ npm install -S hexo-generator-json-content@1 --save とし、サーバーを起動 これで起動しました サイト内検索もうまく追加されました 参考 hexo打包提示错误:ERROR Plugin load failed:hexo-generator-json-content Hexo插件无法运行/安装,hexo g提示ReferenceError: hexo is not defined","raw":null,"content":null,"categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://keijirotanabe.github.io/blog/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://keijirotanabe.github.io/blog/tags/Hexo/"}]},{"title":"HexoにDisqusでコメント機能を追加する手順","slug":"hexo-disqus-add-comment-170215","date":"2017-02-15T13:03:55.000Z","updated":"2017-02-16T02:26:38.968Z","comments":true,"path":"2017/02/15/hexo-disqus-add-comment-170215/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/15/hexo-disqus-add-comment-170215/","excerpt":"","text":"HexoにDisqusでコメント機能を追加する手順をまとめました Disqus 公式サイトhttps://disqus.com/ Disqusに登録「GET STARTED」を選択 今回はGoogleアカウントで登録します 別ウィンドウが開くので入力 「I want to install Disqus on my site」を選択 3ヶ所入力後、「Create Site」を選択 「Got it. Let’s get started!」を選択 Hexoはないので、次へ 使用しているテンプレートにコメントがない場合はscriptを追加してください※このブログで使用しているicarusにはコメントがあるので省略します サイトのURLを入力し、「Complete Setup」を選択 Admin &gt; Settings &gt; blog &gt; General「shortname」をコピー shortnameを_config.ymlに記述themes &gt; icarus &gt; _config.yml 123comment: disqus: [shortname] duoshuo: [shortname] 関係のないコメントを消す Admin &gt; Settings &gt; blog &gt; GeneralDiscoveryのチェックを外す","raw":null,"content":null,"categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://keijirotanabe.github.io/blog/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://keijirotanabe.github.io/blog/tags/Hexo/"},{"name":"Disqus","slug":"Disqus","permalink":"https://keijirotanabe.github.io/blog/tags/Disqus/"}]},{"title":"HEXOで目次を自動で作成してくれるhexo-tocをインストール","slug":"hexo-toc-install-170215","date":"2017-02-14T18:59:49.000Z","updated":"2017-02-17T14:55:36.486Z","comments":true,"path":"2017/02/14/hexo-toc-install-170215/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/14/hexo-toc-install-170215/","excerpt":"","text":"Hexoで目次を自動で作成してくれるhexo-tocを使うための手順をまとめました 目次 ブルーの目次 オプションの説明 記事から呼び出す オレンジの目次 ブルーの目次hexo-toc GitHubページhttps://github.com/bubkoo/hexo-toc インストールコマンド1$ npm install hexo-toc --save themes/icarus/_config.ymlに以下を追加 icarusは使用しているテンプレート名です config.yml12345678toc: maxdepth: 3 class: toc slugify: transliteration anchor: position: after symbol: '#' style: header-anchor オプションの説明12345678maxdepth ：最大深度以下の見出しを使用します。class ：tocのCSSクラス。 （ デフォルトはfalse ）slugify ：使用したい機能を選択します。 現在、 uslug （ デフォルト ）と音訳をサポートしています。anchor ：各見出しにアンカーを付けるかどうか。 （ デフォルトはfalse ） position ：アンカーは、タイトルのbefore 、タイトルのafter 、またはタイトルのafter before置く必要があります。 （ デフォルトはafter ）。 symbol ：あなたがアンカーにしたいシンボル。 （ デフォルトは# ）。 style ：アンカーのCSSクラスです（ デフォルトはheader-anchor ）。 記事から呼び出す呼び出したい箇所で以下を追加 12# 目次&lt;!-- toc --&gt; オレンジの目次呼び出したい記事で以下を追加 1toc: true","raw":null,"content":null,"categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://keijirotanabe.github.io/blog/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://keijirotanabe.github.io/blog/tags/Hexo/"}]},{"title":"有機ＥＬキャラクタディスプレイモジュールをESP8266(ESP-WROOM-02)で使う","slug":"esp8266-oled-how-to-use-170214","date":"2017-02-14T02:20:26.000Z","updated":"2017-02-16T02:26:38.288Z","comments":true,"path":"2017/02/14/esp8266-oled-how-to-use-170214/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/14/esp8266-oled-how-to-use-170214/","excerpt":"","text":"有機ＥＬキャラクタディスプレイモジュールをESP8266(ESP-WROOM-02)でmikroCのLcd Library風に使う これみたいに使うmikroC PRO for PIC &gt; Lcd Library→ https://download.mikroe.com/documents/compilers/mikroc/pic/help/lcd_library.htm 目次 使うもの 配線 自作ライブラリをインポート 使い方 自作ライブラリのインクルード 関数一覧 Oled_Cmd関数のコマンド一覧 使うもの 有機ＥＬキャラクタディスプレイモジュール １６ｘ２行 白色 → http://akizukidenshi.com/catalog/g/gP-08277/ １６文字×２行の有機ＥＬ（ＯＬＥＤ）ディスプレイです。 マイコン等で制御することで内部に登録済みの任意の文字を表示させることが出来ます。 液晶と違い、文字が光りますので暗い場所での視認性が良好です。また視野角が広いです。 特長 ・コントラストが高く視認性に優れます。 ・視野角が広いです。 ・３．３Ｖ単一電源動作です。 ・Ｉ２Ｃインタフェースです。 仕様 ・電源：２．４Ｖ～３．６Ｖ（標準 ３．３Ｖ） ・消費電流：最大８０ｍＡ（標準 ５０ｍＡ） ・表示色：白色 ・表示部：１６文字ｘ２行 ・１文字（キャラクタ）のドット構成：縦７ドット×横５ドット ・明るさ：最小１２０ｃｄ／ｍ２（標準 １５０ｃｄ／ｍ２） ・コントローラ：ＵＳ２０６６または互換品 ・寸法：８０．０ｘ３６．０ｘ８．５ｍｍ 自作したライブラリ → https://github.com/keijirotanabe/Arduino-Oled-like-mikroC ESP8266(ESP-WROOM-02) → ESPr Developer(ESP-WROOM-02開発ボード) 配線有機ＥＬキャラクタディスプレイモジュール１６ｘ２行のピン配列 OLED(pin番号) ESP8266 説明 VSS(1) GND 電源グランド VDD(2) 3.3V 電源＋ /CS(3) GND 必ずVSSに接続 SA0(4) GND スレーブアドレス L→0x3C or H→0x3D SCL(7) IO5 I2C クロック, 4.7kΩでプルアップ SDA in(8) IO4 I2C データ入力, 4.7kΩでプルアップ SDA out(9) IO4 I2C データ出力, 4.7kΩでプルアップ 自作ライブラリをインポートダウンロードhttps://github.com/keijirotanabe/Arduino-Oled-like-mikroC 使い方自作ライブラリのインクルード 12#include &lt;Wire.h&gt;#include &lt;Arduino-Oled-like-mikroC.h&gt; 直接、記述してもかまいません 関数一覧 コマンド 目的 サンプルコード Oled_Init 初期化 Oled_Init() Oled_Cmd コマンド書き込み(↓の表を引数にとる) Oled_Cmd(ClearDisplay) Oled_Out 位置を指定して、文字列を表示 Oled_Out(1, 1, “Hello World!”) Oled_Out_Cp カーソルのある位置に文字列を表示 Oled_Out_Cp(“Hello World!”) Oled_Chr 位置を指定して、１文字を表示 Oled_Out(2, 1, ‘A’) Oled_Chr_Cp カーソルのある位置に１文字を表示 Oled_Chr_Cp(‘A’) Oled_Set_Cursor カーソルの位置を変更 Oled_Set_Cursor(2, 1) Oled_Set_Contrast コントラストを変更 Oled_Set_Contrast(0x7F) Oled_Max_Contrast コントラスト最大 Oled_Max_Contrast() Oled_Min_Contrast コントラスト最小 Oled_Min_Contrast() Oled_Cmd関数のコマンド一覧Oled_Cmd(コマンド) コマンド 目的 ClearDisplay 表示をクリアする ReturnHome カーソルをホームポジションに戻し、シフト表示を元の位置に戻します DisplayON 液晶ディスプレイをオンにする DisplayOFF 液晶ディスプレイをオフにする CursorON カーソルをオフにする CursorOFF カーソルをオンにする BlinkON カーソルを点滅させる BlinkOFF カーソルを点滅さない ShiftLeft 表示RAMデータを変更せずに表示を左にシフト ShiftRight 表示RAMデータを変更せずに表示を右にシフト CursorLeft 表示RAMデータを変更せずにカーソルを左に移動 CursorRight 表示RAMデータを変更せずにカーソルを右に移動","raw":null,"content":null,"categories":[{"name":"ESP8266","slug":"ESP8266","permalink":"https://keijirotanabe.github.io/blog/categories/ESP8266/"}],"tags":[{"name":"Arduino","slug":"Arduino","permalink":"https://keijirotanabe.github.io/blog/tags/Arduino/"},{"name":"ESP8266","slug":"ESP8266","permalink":"https://keijirotanabe.github.io/blog/tags/ESP8266/"},{"name":"ESP-WROOM-02","slug":"ESP-WROOM-02","permalink":"https://keijirotanabe.github.io/blog/tags/ESP-WROOM-02/"}]},{"title":"Raspberry Pi 3のはじめかた","slug":"raspberry-pi-3-starting-step-170210","date":"2017-02-11T01:49:17.000Z","updated":"2017-02-17T14:51:43.014Z","comments":true,"path":"2017/02/11/raspberry-pi-3-starting-step-170210/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/11/raspberry-pi-3-starting-step-170210/","excerpt":"","text":"Raspberry Pi 3 にRaspbianをインストールして使えるようにするまでのやり方、解説 目次 環境 公式サイト 必要なもの 手順 まずはSDをフォーマットする 「Raspbian」の用意 「Raspbian」をSDカードに書き込む Raspberry Piを起動させる 設定 まずはWiFiに接続 WindowsからSSHで接続 SSHの設定をONに IPアドレスの確認 Tera Termで接続 パッケージの更新 リモートデスクトップでPCから操作できるようにする 環境 Windows10 Home 64bit Raspberry Pi 3 Model B Element14版 Raspbian Jessie with PIXEL 公式サイトhttps://www.raspberrypi.org/ 必要なもの Raspberry Pi 3 本体 microSD (8G以上) ↓によると SD と Raspberry Pi には相性があるようです 参考: http://elinux.org/RPi_SD_cards マウス キーボード モニター HDMI出力ができるもの HDMIケーブル 電源 MicroUSB経由 (2.5A推奨) ここでは2.4Aのを使っています こういうのもあるようです Raspberry Pi 3 model B 専用電源 手順まずはSDをフォーマットする「SDカードフォーマッター」でSDカードをフォーマット(初期化)します ダウンロード先https://www.sdcard.org/jp/downloads/formatter_4/index.html 詳しくはSDカードフォーマッターの使い方 「Raspbian」の用意ダウンロード先https://www.raspberrypi.org/downloads/raspbian/ GUI版とCUI版がありますが、今回はGUI版をダウンロードします 「Raspbian」をSDカードに書き込むRaspbianをSDカードに書き込むには、「Win32DiskImager」を使います ダウンロード先https://ja.osdn.net/projects/sfnet_win32diskimager/ 詳しくはWin32DiskImagerの使い方 Raspberry Piを起動させるSDカードを挿します 周辺を接続 電源は最後に挿します 起動しました 設定まずはWiFiに接続Raspberry Pi 3には標準でWiFiがついています 接続方法 WindowsからSSHで接続SSHの設定をONにPreferences &gt; Raspberry Pi Configuration Interfaces &gt; SSH: Enabled &gt; OK IPアドレスの確認ターミナルを起動します 以下のコマンドを入力 1ifconfig 調べたIPアドレスはメモしておいてください Tera Termで接続Tera Term をインストール ダウンロード先https://ja.osdn.net/projects/ttssh2/releases/66795 ↑で調べたIPアドレスを入力して「OK」 セキュリティ警告「続行」 ユーザー名とパスワードを入力して「OK」 なお、デフォルトの設定は ユーザー名 パスワード pi raspberry となっています ログイン画面 パッケージの更新以下のコマンドでパッケージをアップデートしておきます 1sudo apt-get update つづいて ↓ も※時間がかかるので注意してください 1sudo apt-get upgrade 途中で聞かれたら「y」を入力して「Enter」 途中で聞かれたら「q」を入力 終了しました1時間くらいかかりました リモートデスクトップでPCから操作できるようにする詳しくはRaspberry Pi 3をリモートデスクトップで操作 以下をインストール 12sudo apt-get install tightvncserversudo apt-get install xrdp 先ほど調べたIPアドレスへ接続します ユーザー名とパスワードを入力して「OK」 ユーザー名: pi パスワード: raspberry 以下の画面が表示されます","raw":null,"content":null,"categories":[{"name":"Raspberry Pi","slug":"Raspberry-Pi","permalink":"https://keijirotanabe.github.io/blog/categories/Raspberry-Pi/"}],"tags":[{"name":"Raspberry Pi","slug":"Raspberry-Pi","permalink":"https://keijirotanabe.github.io/blog/tags/Raspberry-Pi/"},{"name":"Raspberry Pi 3","slug":"Raspberry-Pi-3","permalink":"https://keijirotanabe.github.io/blog/tags/Raspberry-Pi-3/"}]},{"title":"コマンドプロンプトの起動方法","slug":"command-prompt-start-up-170211","date":"2017-02-11T01:41:44.000Z","updated":"2017-02-17T14:00:42.477Z","comments":true,"path":"2017/02/11/command-prompt-start-up-170211/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/11/command-prompt-start-up-170211/","excerpt":"","text":"コマンドプロンプトの起動方法をメモ 共通「Windowsキー」+「R」→ 「ファイル名を指定して実行」 Windows10","raw":null,"content":null,"categories":[{"name":"補足","slug":"補足","permalink":"https://keijirotanabe.github.io/blog/categories/補足/"}],"tags":[{"name":"補足","slug":"補足","permalink":"https://keijirotanabe.github.io/blog/tags/補足/"}]},{"title":"Raspberry Pi 3をリモートデスクトップで操作","slug":"raspberry-pi-remote-disktop-170211","date":"2017-02-11T00:52:02.000Z","updated":"2017-02-17T14:47:48.463Z","comments":true,"path":"2017/02/11/raspberry-pi-remote-disktop-170211/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/11/raspberry-pi-remote-disktop-170211/","excerpt":"","text":"Raspberry Piにxrdpをインストールして、Windowsのリモートデスクトップ機能から操作できるようにする 環境 Windows10 Home 64bit Raspberry Pi 3 Model B (Element14) Raspbian Jessie with PIXEL Tera Term バージョン 4.9.2 インストールtightvncserverのインストールxrdpというパッケージをインストールしますが、先にtightvncserverをインストールする必要があります 以下のコマンドでインストール 1sudo apt-get install tightvncserver 途中で聞かれたら「y」を入力して「Enter」 xrdpのインストール以下のコマンドでインストール 1sudo apt-get install xrdp 途中で聞かれたら「y」を入力して「Enter」 IPアドレスの確認1ifconfig ここでは192.168.11.15を使用します※各自、異なります リモートデスクトップの起動リモートデスクトップを起動させます 「リモートデスクトップ」で検索して起動します 先ほど調べたIPアドレス(192.168.11.15)へ接続します ユーザー名とパスワードを入力して「OK」 なお、デフォルトの設定は ユーザー名 パスワード pi raspberry になっています 以下の画面が表示されます 以上です","raw":null,"content":null,"categories":[{"name":"Raspberry Pi","slug":"Raspberry-Pi","permalink":"https://keijirotanabe.github.io/blog/categories/Raspberry-Pi/"}],"tags":[{"name":"Raspberry Pi","slug":"Raspberry-Pi","permalink":"https://keijirotanabe.github.io/blog/tags/Raspberry-Pi/"},{"name":"Raspberry Pi 3","slug":"Raspberry-Pi-3","permalink":"https://keijirotanabe.github.io/blog/tags/Raspberry-Pi-3/"}]},{"title":"Win32DiskImagerの使い方","slug":"win32-disk-imager-170211","date":"2017-02-10T19:56:35.000Z","updated":"2017-02-17T14:40:49.587Z","comments":true,"path":"2017/02/10/win32-disk-imager-170211/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/10/win32-disk-imager-170211/","excerpt":"","text":"SDカードやUSBメモリーにイメージファイルを書き出せるソフトWin32DiskImagerを説明します ダウンロードダウンロード先https://ja.osdn.net/projects/sfnet_win32diskimager/ インストールダウンロードしたWin32DiskImager-0.9.5-install.exeを実行します 以下の流れでインストール 使い方起動管理者として実行何か聞かれたら「はい」を選択 起動画面 ファイルを選択書き込みたいファイルを選択します※ここでは2017-01-11-raspbian-jessie.imgを選択 ファイルのマークを選択 ファイルを開く 選択できました 書き込み先を選択書き込み先のSDカードまたは、USBメモリーを選択します (F:)に書き込みたいので、[F]を選択 ※大抵、初めから選択されています 書き込み開始「Write」を選択 書き込み中終わるまで待ちます 終わりました 使い方は以上です","raw":null,"content":null,"categories":[{"name":"補足","slug":"補足","permalink":"https://keijirotanabe.github.io/blog/categories/補足/"}],"tags":[{"name":"補足","slug":"補足","permalink":"https://keijirotanabe.github.io/blog/tags/補足/"},{"name":"Win32DiskImager","slug":"Win32DiskImager","permalink":"https://keijirotanabe.github.io/blog/tags/Win32DiskImager/"}]},{"title":"SDカードフォーマッターの使い方","slug":"sd-formatter-4-170210","date":"2017-02-10T06:13:41.000Z","updated":"2017-02-17T14:18:13.068Z","comments":true,"path":"2017/02/10/sd-formatter-4-170210/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/10/sd-formatter-4-170210/","excerpt":"","text":"SD / SDHC / SDXC カードのフォーマットに対応し、メモリーカードの性能が最適になるように設計されています ダウンロードSDフォーマッター4.0の入手先https://www.sdcard.org/jp/downloads/formatter_4/index.html インストールダウンロードしたファイルを解凍するとsetup.exeがあるので実行します 使い方インストールできたら起動します SDカードを刺して「フォーマット」を選択","raw":null,"content":null,"categories":[{"name":"補足","slug":"補足","permalink":"https://keijirotanabe.github.io/blog/categories/補足/"}],"tags":[{"name":"補足","slug":"補足","permalink":"https://keijirotanabe.github.io/blog/tags/補足/"},{"name":"SDカードフォーマッター","slug":"SDカードフォーマッター","permalink":"https://keijirotanabe.github.io/blog/tags/SDカードフォーマッター/"}]},{"title":"Node.jsでHTTPサーバーを立てるまでの解説","slug":"node-js-how-to-170210","date":"2017-02-09T19:56:47.000Z","updated":"2017-02-17T14:13:34.084Z","comments":true,"path":"2017/02/09/node-js-how-to-170210/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/09/node-js-how-to-170210/","excerpt":"","text":"Node.jsでHTTPサーバー起動を起動して、「Hello World!」をブラウザで表示するまでを丁寧に説明 環境 Windows10 Home 64bit Node.js バージョン6.9.5 インストール手順はNode.jsのインストール方法を参照 テキストエディタ → Sublime Text ウェブブラウザ → Google Chrome server.jsの用意今回はデスクトップで作業してくので、デスクトップにhelloworldというフォルダを用意します helloworldの中にserver.jsを作ります テキストエディタで開きます 基本的なHTTPサーバー全体のコードserver.js123456789101112var http = require('http');var port = 3000;var server = http.createServer(function(req, res) &#123; res.statusCode = 200; res.setHeader('Content-Type', 'text/plain'); res.end('Hello World!\\n');&#125;);server.listen(port, function() &#123; console.log('Server running');&#125;); コードの解説 var http = require(&#39;http&#39;); httpモジュールの読み込み var port = 3000; 3000番ポートを使う var server = http.createServer(コールバック関数) httpサーバー作成し、serverに代入 serverにアクセスがくるとコールバック関数が呼ばれる res.statusCode = 200; ステータスコード200は成功を意味する 詳しくはHTTPのステータスコード res.setHeader(&#39;Content-Type&#39;, &#39;text/plain&#39;); コンテンツタイプをテキストに 参考: Content-Typeの一覧 res.end(&#39;Hello World!\\n&#39;); すべてのヘッダー情報と本文(「Hello World」)が送信されたことをサーバーに通知 server.listen(port, コールバック関数) httpサーバーを3000番ポートで待機させた後、コールバック関数を呼ぶ console.log(&#39;Server running&#39;); コンソールに「Server running」と表示 より詳しくはHTTP | Node.js v6.9.5 Documentation 書いたコードを実行コマンドプロンプトを起動しますわからない人はコマンドプロンプトの起動方法を参考に デスクトップにhelloworldフォルダを作ったので、移動しますcd Disktop/helloworldと入力して「Enter」 server.jsを起動します起動するにはnodeコマンドを使いますnode serverと入力して「Enter」 うまくいけば「Server running」が表示されます ウェブブラウザから表示Google Chromeを立ち上げてlocalhost:3000と入力して「Enter」 「Hello World!」が表示されれば成功です コードを加えます上の画像で「localhost:3000」アクセスがあったら呼ばれるというのを見ていきます console.log(&#39;Connected&#39;);を加えます 全体のコードserver.js12345678910111213var http = require('http');var port = 3000;var server = http.createServer(function(req, res) &#123; console.log('Connected'); // &lt;- 追加 res.statusCode = 200; res.setHeader('Content-Type', 'text/plain'); res.end('Hello World!\\n');&#125;);server.listen(port, function() &#123; console.log('Server running');&#125;); コードを書き替えたので、サーバーを再起動します 以前、入力したキーは「↑」、「↓」で選択可 ↓の①を何回か押してみて下さい 「localhost:3000」にアクセスがくると、http.createServer(引数)の引数に渡した関数が呼ばれますこれでこのコードの意味が分かると思います","raw":null,"content":null,"categories":[{"name":"プログラミング","slug":"プログラミング","permalink":"https://keijirotanabe.github.io/blog/categories/プログラミング/"},{"name":"Node.js","slug":"プログラミング/Node-js","permalink":"https://keijirotanabe.github.io/blog/categories/プログラミング/Node-js/"}],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"https://keijirotanabe.github.io/blog/tags/Node-js/"}]},{"title":"Node.jsのインストール方法","slug":"node-js-install-step-170210","date":"2017-02-09T19:54:23.000Z","updated":"2017-02-17T13:59:30.669Z","comments":true,"path":"2017/02/09/node-js-install-step-170210/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/09/node-js-install-step-170210/","excerpt":"","text":"Node.jsのインストール方法 目次 公式サイト Node.jsとは 特徴 インストール手順 Windows ダウンロードページ インストール手順 インストールされたか確認 公式サイトhttps://nodejs.org/ja/ Node.jsとは特徴 サーバー側で動作するJavaScript 通常、JavaScriptはウェブブラウザの中で実行されるが、Node.jsはサーバサイドで動作するJavaScriptの一種 ノンブロッキングI/O 送受信の完了を待たないで、他の処理を開始する通信方法 シングルスレッド 並行処理などを行わずにすべての演算を逐次に処理していくこと イベントドリブン ユーザや他のプログラムが実行した操作（イベント）に対応して処理を行う、プログラムの実行形式 ユーザが操作を行っていないときはプログラムは何もせず待機している メリット 早くてリアルタイムに強い 多数のアクセスに強い インストール手順Windows推奨版の6.9.5をインストールしていきます ダウンロードページ64bit版ダウンロード Windows (x64) 32bit版はこちらダウンロード Windows (x32) インストール手順 インストールされたか確認コマンドプロンプトを起動しますわからない人はコマンドプロンプトの起動方法を参考 node -vとnpm -vでインストールされたバージョンを確認","raw":null,"content":null,"categories":[{"name":"プログラミング","slug":"プログラミング","permalink":"https://keijirotanabe.github.io/blog/categories/プログラミング/"},{"name":"Node.js","slug":"プログラミング/Node-js","permalink":"https://keijirotanabe.github.io/blog/categories/プログラミング/Node-js/"}],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"https://keijirotanabe.github.io/blog/tags/Node-js/"}]},{"title":"回路図が書けるFritzingをインストール","slug":"fritzing-install-170208","date":"2017-02-08T03:42:50.000Z","updated":"2017-02-17T13:53:49.069Z","comments":true,"path":"2017/02/08/fritzing-install-170208/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/08/fritzing-install-170208/","excerpt":"","text":"回路図が書けるFritzingをインストールするまで 公式サイトhttp://fritzing.org/home/ ダウンロードダウンロードページFritzing DownloadVersion 0.9.3b (2017/02/08時点) No DonationをチェックしてDownloadを選択 Windows 64bitを選択※環境に合わせてお選びください インストールファイルを解凍するとfritzing.0.9.3b.64.pcができるので、適当なフォルダにおいてください今回はC:\\fritzing.0.9.3b.64.pcにおきました Fritzing.exeで起動します右クリックからショートカットを作ってデスクトップに置いておくと便利かと思います 初回起動画面","raw":null,"content":null,"categories":[{"name":"Fritzing","slug":"Fritzing","permalink":"https://keijirotanabe.github.io/blog/categories/Fritzing/"}],"tags":[{"name":"Fritzing","slug":"Fritzing","permalink":"https://keijirotanabe.github.io/blog/tags/Fritzing/"}]},{"title":"ESP8266をArduinoとして使う","slug":"esp8266-how-to-170208","date":"2017-02-08T03:42:39.000Z","updated":"2017-02-17T13:51:52.261Z","comments":true,"path":"2017/02/08/esp8266-how-to-170208/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/08/esp8266-how-to-170208/","excerpt":"","text":"ESP8266(ESP-WROOM-02)をArduinoとして使う方法Arduino core for ESP8266 の基本的な使い方 目次 はじめに 配線と起動モード 機能解説 デジタル IO デジタル出力 デジタル入力 アナログ出力 アナログ入力 タイミングと遅延 シリアル通信 GPIO pin まとめ 参考 はじめに Arduino core for ESP8266 | referenceを参照しています ESPr Developer(ESP-WROOM-02開発ボード)を使用しています 配線と起動モード 実行モード(Flash Boot Mode) 書き込んだプログラムで起動します 書き込みモード(UART Download Mode) プログラムが書き込めるようになります IO0 pinをHIGH でリセット → 実行モードLOW でリセット → 書き込みモードになります GPIO pinの名前 実行モード 書き込みモード GPIO0 IO0 HIGH LOW GPIO2 IO2 HIGH HIGH GPIO15 IO15 LOW LOW 機能解説デジタル IO GPIO 0〜15 → INPUT、OUTPUT、INPUT_PULLUP ※ただし、GPIO 6〜11はGPIOとして使用不可(↓参照) GPIO 16 → INPUT、OUTPUT、INPUT_PULLDOWN_16 ピン割り込みの使用 → GPIO 0〜15 attachInterrupt、detachInterrupt関数 デジタルピン0〜15は、INPUT、OUTPUT、INPUT_PULLUPのいずれかです。ピン16はINPUT、OUTPUT、INPUT_PULLDOWN_16のいずれかです。起動時に、ピンはINPUTとして設定されます。 デジタルピン6-11は、ほとんどのモジュール上のフラッシュメモリチップを接続するために使用されているため、この図には示されていません。 IOとしてこれらのピンを使用しようとすると、プログラムがクラッシュする可能性があります。 ピン割り込みは、attachInterrupt、detachInterrupt関数でサポートされています。割り込みは、GPIO16を除く任意のGPIOピンに接続できます。 デジタル出力IO13のLEDを点滅 123456789101112#define LED 13void setup() &#123; pinMode(LED, OUTPUT);&#125;void loop() &#123; digitalWrite(LED, HIGH); delay(1000); digitalWrite(LED, LOW); delay(1000);&#125; デジタル入力IO2のスイッチを押している間、IO13のLEDが点灯 123456789101112131415#define LED 13#define SWITCH 2void setup() &#123; pinMode(LED, OUTPUT); pinMode(SWITCH, INPUT);&#125;void loop() &#123; if (digitalRead(SWITCH) == LOW) &#123; digitalWrite(LED, HIGH); &#125; else &#123; digitalWrite(LED, LOW); &#125;&#125; アナログ出力 GPIO 0〜16で使用可 (※GPIO 6〜11を除く) analogWrite(pin, value)でON value → 0～1023 analogWrite(pin, 0)でOFF analogWrite（pin、value）指定されたピンでソフトウェアPWMをイネーブルにします。 PWMはピン0〜16で使用できます。ピンのPWMをディセーブルにするには、analogWrite（pin、0）を呼び出します。 値は0からPWMRANGEまでの範囲で指定できます。デフォルトは1023です。 IO13のLEDが徐々に明るくなるサンプルコード 123456789101112#define LED 13void setup() &#123; pinMode(LED, OUTPUT);&#125;void loop() &#123; for (int i = 0; i &lt; 1023; i++) &#123; analogWrite(LED, i); delay(3); &#125;&#125; アナログ入力analogRead(A0)で読み取り ※ADC_MODE(ADC_VCC);を関数の外に定義で、電源電圧の読み取り 入力電圧範囲は0〜1.0V ADCピンに印加される外部電圧を読み取るには、analogRead（A0）を使用します。 入力電圧範囲は0〜1.0Vです。 TOUT(A0)のAD変換値を読み取る 1234567891011int value;void setup() &#123; Serial.begin(115200);&#125;void loop() &#123; value = analogRead(A0); Serial.println(value); delay(100);&#125; 0～1023が得られるはずですが、以下のようにつなげて読み取った所、6～1024という値が得られました タイミングと遅延 リセット後の経過時間取得 ミリ秒 → millis() マイクロ秒 → micros() 遅延 ミリ秒 → delay() マイクロ秒 → delayMicroseconds() millis()およびmicros()は、それぞれリセット後に経過したミリ秒数およびマイクロ秒数を返します。 delay(ms)は、指定したミリ秒間スケッチを一時停止し、WiFiおよびTCP / IPタスクを実行できるようにします。 delayMicroseconds(us)は、指定されたマイクロ秒数で一時停止します。 シリアル通信 Serial.begin()をsetup関数に定義 Serial.swap()で使用するピンの組み合わせを変更 GPIO1(TX) &amp; GPIO3(RX) ↔ GPIO15(TX) &amp; GPIO13(RX) 選択 TX RX default GPIO1(TXD) GPIO3(RXD) Serial.swap()で変更 GPIO15(IO15) GPIO13(IO13) ※GPIO(pin Name) シリアルはUART 0を使用し、GPIO 1（TX）ピンとGPIO 3（RX）ピンにマッピングされます。 Serial.beginの後にSerial.swap（）を呼び出すことで、SerialはGPIO 15（TX）とGPIO 13（RX）を再マッピングできます。スワップを再度呼び出すと、UART 0がGPIO 1とGPIO 3にマップされます。 GPIO pin まとめ GPIO pinの名前 デジタル出力 デジタル入力 アナログ出力 アナログ入力 備考 GPIO0 IO0 〇 〇 〇 - 起動時に使用 GPIO1 TXD 〇 〇 〇 - 書き込みに使用 GPIO2 IO2 〇 〇 〇 - 起動時に使用 GPIO3 RXD 〇 〇 〇 - 書き込みに使用 GPIO4 IO4 〇 〇 〇 - - GPIO5 IO5 〇 〇 〇 - - GPIO12 IO12 〇 〇 〇 - - GPIO13 IO13 〇 〇 〇 - - GPIO14 IO14 〇 〇 〇 - - GPIO15 IO15 〇 〇 〇 - 起動時に使用 GPIO16 IO16 〇 〇 ※1 〇 - - A0 TOUT - - - 〇 - ※1 割り込みは不可 ESP-WROOM-02 | データシート Arduino core for ESP8266 | referenceの図 参考ESP-WROOM-02 | データシートArduino core for ESP8266 | DocumentationESP-WROOM-02 Arduino互換ボードのGPIOはこうやって使う","raw":null,"content":null,"categories":[{"name":"ESP8266","slug":"ESP8266","permalink":"https://keijirotanabe.github.io/blog/categories/ESP8266/"}],"tags":[{"name":"Arduino","slug":"Arduino","permalink":"https://keijirotanabe.github.io/blog/tags/Arduino/"},{"name":"ESP8266","slug":"ESP8266","permalink":"https://keijirotanabe.github.io/blog/tags/ESP8266/"},{"name":"ESP-WROOM-02","slug":"ESP-WROOM-02","permalink":"https://keijirotanabe.github.io/blog/tags/ESP-WROOM-02/"}]},{"title":"ESP8266にArduinoスケッチを書き込む","slug":"esp8266-Arduino-170207","date":"2017-02-07T06:45:56.000Z","updated":"2017-02-17T13:46:43.921Z","comments":true,"path":"2017/02/07/esp8266-Arduino-170207/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/07/esp8266-Arduino-170207/","excerpt":"","text":"ESP8266(ESP-WROOM-02)にArduinoのスケッチを書き込み、シリアルモニタに「Hello World」と表示させるまで 目次 必要なもの 手順 ESP8266 core for Arduino のインストール ボードの設定 スケッチを書き込む 参考 必要なもの Arduino IDE ダウンロードページ https://www.arduino.cc/en/Main/Software バージョン 1.8.1 (2017/02/07時点) Arduino IDEのインストールを参考 推奨版はバージョン 1.6.8ですが最新版バージョン 1.8.1(2017/02/07時点)でも動作しました ESP8266 core for Arduino https://github.com/esp8266/Arduino Stable version 2.3.0 使用 ESP8266(ESP-WROOM-02) ここではESPr Developer(ESP-WROOM-02開発ボード)を使用しています MicroUSBを挿すだけで使えるので便利です 手順ESP8266 core for Arduino のインストールESP8266 core for Arduino には 「Stable version」 「Staging version」がありますが、今回は「Stable version」（安定版）をインストールします https://github.com/esp8266/Arduino から画像の範囲をコピーします めんどくさい人はhttp://arduino.esp8266.com/stable/package_esp8266com_index.jsonをコピー ファイル &gt; 環境設定を開いて画像の範囲に貼り付け（Ctrl + V） → OK ツール &gt; ボード &gt; ボードマネージャ esp8266で検索 → インストール 完了したので閉じる Stable version 2.3.0がインストールされました ボードの設定ツール &gt; ボード &gt; Generic ESP8266 Moduleを選択 初期設定 画像の範囲を変更※ シリアルポートは各自選択してください スケッチを書き込む書き込みモードで起動します IO0がLOWの状態でリセットすれば、書き込みモードで起動します。 ※ ↑の画像でReset Method: nodemcuを選択すれば、次回から書き込みモードで起動する必要はありません https://www.switch-science.com/catalog/2500/を参考に IO0がHIGHの状態でリセットされるとファームウェアの実行モードで起動しますが、IO0がLOWの状態でリセットされるとファームウェアの書き込みモードで起動します。 以下のプログラムを書いて書き込みます 12345678void setup() &#123; Serial.begin(115200);&#125;void loop() &#123; Serial.println(&quot;Hello World&quot;); delay(1000);&#125; 書き込みボタンを押す ファイルを保存するか聞かれたのでhelloworldにして保存 書き込み完了 右上のアイコンを押す → シリアルモニタ起動CRおよびLF、115200 bpsに設定 「Hello World」と表示されれば上手くいきました 参考 ESP-WROOM-02開発ボードをArduino IDEで開発する方法 ESPr Developer ( ESP-WROOM-02 開発ボード )の使い方をザッと紹介","raw":null,"content":null,"categories":[{"name":"ESP8266","slug":"ESP8266","permalink":"https://keijirotanabe.github.io/blog/categories/ESP8266/"}],"tags":[{"name":"Arduino","slug":"Arduino","permalink":"https://keijirotanabe.github.io/blog/tags/Arduino/"},{"name":"ESP8266","slug":"ESP8266","permalink":"https://keijirotanabe.github.io/blog/tags/ESP8266/"},{"name":"ESP-WROOM-02","slug":"ESP-WROOM-02","permalink":"https://keijirotanabe.github.io/blog/tags/ESP-WROOM-02/"}]},{"title":"プログラミング用フォントRictyDiminishedをインストール","slug":"RictyDiminished","date":"2017-02-07T01:16:00.000Z","updated":"2017-02-17T13:34:31.530Z","comments":true,"path":"2017/02/07/RictyDiminished/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/07/RictyDiminished/","excerpt":"","text":"見やすいプログラミング用フォントのRictyDiminishedをWindowsにインストール RictyDiminishedダウンロードページhttps://github.com/edihbrandon/RictyDiminished Download ZIPを押す ダウンロードしたファイルを展開します 新しくエクスプローラーを立ち上げてC:\\Windows\\Fontsを開きます fontファイルをfontフォルダへ、以下のようにコピーします 以上でRictyDiminishedのインストールは完了です","raw":null,"content":null,"categories":[{"name":"Font","slug":"Font","permalink":"https://keijirotanabe.github.io/blog/categories/Font/"}],"tags":[{"name":"Font","slug":"Font","permalink":"https://keijirotanabe.github.io/blog/tags/Font/"},{"name":"RictyDiminished","slug":"RictyDiminished","permalink":"https://keijirotanabe.github.io/blog/tags/RictyDiminished/"}]},{"title":"Arduino IDEのインストール","slug":"Arduino-install-step-070207","date":"2017-02-07T01:15:29.000Z","updated":"2017-02-17T13:30:51.842Z","comments":true,"path":"2017/02/07/Arduino-install-step-070207/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/07/Arduino-install-step-070207/","excerpt":"","text":"Arduino IDEをインストールする手順 目次 公式サイト ダウンロード インストール 設定 環境設定 起動時のウィンドウサイズを変更 フォント変更 環境Windows10 Home 64ビット 公式サイトhttps://www.arduino.cc/ ダウンロードArduino IDE ダウンロードページhttps://www.arduino.cc/en/Main/Softwareバージョン 1.8.1 (2017/02/07時点) Windows Installer を選択※ 環境に合わせて選択してください 今回は寄付しないでダウンロードを選択 インストールarduino-1.8.1-windows.exeを実行 なにか聞かれるのではいを選択する 以下の手順でインストール 途中で聞かれたらインストール 同じくインストール 終わったらclose 起動画面 インストール完了 設定※以降は必須ではありません 環境設定ファイル → 環境設定 フォントサイズ: 好みの大きさ 行番号を表示する: ✅ コードの折り返しを有効に: ✅ 最後にOKを押す 起動時のウィンドウサイズを変更C:\\Users\\[ユーザー名]\\AppData\\Local\\Arduino15を押すとフォルダArduino15フォルダが開く Arduino IDE を閉じる Arduino15フォルダのpreferences.txtを編集 以下の箇所を変更 editor.window.height.default=600 editor.window.width.default=500(初期値) editor.window.height.default=960 editor.window.width.default=720に変更Ctrl + S で保存（好みに合わせて） 起動時のウィンドウサイズを変更できました フォント変更フォントをRictyDiminishedに設定します RictyDiminishedをインストールしますプログラミング用フォントRictyDiminishedをインストールを参考に preferences.txtを編集して editor.font=RictyDiminished,plain,18に書き換えます 初期設定 編集後 Arduino IDE を起動すると、以下のようにフォントが変わりました","raw":null,"content":null,"categories":[{"name":"Arduino","slug":"Arduino","permalink":"https://keijirotanabe.github.io/blog/categories/Arduino/"}],"tags":[{"name":"Arduino","slug":"Arduino","permalink":"https://keijirotanabe.github.io/blog/tags/Arduino/"},{"name":"ESP8266","slug":"ESP8266","permalink":"https://keijirotanabe.github.io/blog/tags/ESP8266/"}]},{"title":"ArduinoのESP8266をATコマンドが使えるように戻す","slug":"esp8266-at-reset-170207","date":"2017-02-06T17:28:52.000Z","updated":"2017-02-17T13:15:08.111Z","comments":true,"path":"2017/02/06/esp8266-at-reset-170207/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/06/esp8266-at-reset-170207/","excerpt":"","text":"WifiモジュールESP-WROOM-02(ESP8266)は、一度Arduinoスケッチが書き込まれるとATコマンドが使えなくなります。ですが、正規のファームウェア書き直すことで、再びATコマンドが使えるようになります。 必要なもの書き込む中身ファームウェアからESP8266 NONOS SDK V2.0.0 20160810をダウンロードします 書き込みに使うツールFlash Download Toolsの中からWindows環境はFlash Download Tools V3.4.4 (ESP8266 &amp; ESP32)をダウンロードします 書き込み先(ESP8266)この記事ではESPr Developer(ESP-WROOM-02開発ボード)を使用しています 手順ESP8266 NONOS SDK V2.0.0 20160810を解凍し、以下のファイルを使用します blank.bin esp_init_data_default.bin boot_v1.6.bin user1.2048.new.5.bin 1234567891011121314151617esp8266_nonos_sdk_v2.0.0_16_08_10 | +-- ESP8266_NONOS_SDK | +-- bin | +-- blank.bin | +-- boot_v1.6.bin | +-- esp_init_data_default.bin | +-- at | +-- 1024+1024 | +-- user1.2048.new.5.bin Flash Download Tools を起動します ESPFlashDownloadTool_v3.4.4.exeを起動 12345flash_download_tools_v3.4.4 | +--- FLASH_DOWNLOAD_TOOLS_V3.4.4 | +--- ESPFlashDownloadTool_v3.4.4.exe ESP8266 DownloadToolを選択 起動画面 ドキュメントの中からESP8266 AT Instruction Setを参考にします 前述したファイルを以下のアドレスに書き込みます ファイル名 アドレス blank.bin 0x3FB000 esp_init_data_default.bin 0x3FC000 blank.bin 0xFE000 blank.bin 0x3FE000 boot_v1.6.bin 0x00000 user1.2048.new.5.bin 0x01000 以下の箇所を選択してください CrystalFreq: 26M SPI SPEED: 40Mhz SPI MODE: QIO FLASH SIZE: 32Mbit-C1 COM: [各自変更] BAUD: 230400 書き込みモードで起動 IO0がLOWの状態でリセットすれば、書き込みモードで起動します。 https://www.switch-science.com/catalog/2500/を参考に IO0がHIGHの状態でリセットされるとファームウェアの実行モードで起動しますが、IO0がLOWの状態でリセットされるとファームウェアの書き込みモードで起動します。 書き込むSTARTを押します 完了 確認以下のように変更 実行モードで起動するために、IO0がHIGHの状態でリセットします redyと帰ってきたらATと入力してEnterを押して下さい OKが帰ればATコマンドが使えるようになります","raw":null,"content":null,"categories":[{"name":"ESP8266","slug":"ESP8266","permalink":"https://keijirotanabe.github.io/blog/categories/ESP8266/"}],"tags":[{"name":"ESP8266","slug":"ESP8266","permalink":"https://keijirotanabe.github.io/blog/tags/ESP8266/"},{"name":"WiFi","slug":"WiFi","permalink":"https://keijirotanabe.github.io/blog/tags/WiFi/"},{"name":"ESP-WROOM-02","slug":"ESP-WROOM-02","permalink":"https://keijirotanabe.github.io/blog/tags/ESP-WROOM-02/"}]},{"title":"HEXOで使えるMarkDown記法","slug":"markdown","date":"2017-02-04T12:03:00.000Z","updated":"2017-02-17T11:53:31.291Z","comments":true,"path":"2017/02/04/markdown/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/04/markdown/","excerpt":"","text":"Hexoで記事を書くときの記法まとめ 目次 見出し リンク 斜体、強調 リスト テーブル 画像 コード・ブロック インライン・コード Block Quote 参考 見出しh1の見出しh2の見出しh3の見出しh4の見出しh5の見出しh6の見出し123456# h1の見出し## h2の見出し### h3の見出し#### h4の見出し##### h5の見出し###### h6の見出し h1 と h2 は以下のやり方も使える h1の見出しh2の見出し1234h1の見出し=========h2の見出し--------- リンクGoogleサイト内リンクHello World 123[Google](http://google.com)[サイト内リンク](/blog/tags/HEXO/)&#123;% post_link hello-world %&#125; 斜体、強調斜体強調 12*斜体***強調** リストul リスト list 説明１。説明１。説明１。説明１。説明１。説明１。 list 説明２。説明２。説明２。説明２。説明２。 list 12345- list 説明１。説明１。説明１。説明１。説明１。説明１。- list 説明２。説明２。説明２。説明２。説明２。- list ol リスト（番号付き） リスト１ リスト２ リスト３ 1231. リスト１2. リスト２3. リスト３ テーブル left center right aaa bbb ccc aaa bbb ccc aaa bbb ccc 12345|left | center | right| |:-------|:------:|-------:||aaa |bbb |ccc ||aaa |bbb |ccc ||aaa |bbb |ccc | 画像Googleフォトから 1![sample.jpg](https://lh3.googleusercontent.com/cW67I7JnR5qK_0d5PpnZrUjtKMDmngACeK2miSINisJB1Ma0SXzfTQadXOA4Z47vmGkmT7o7KZ9afrT5ccpBG07VpA_OZfSqnhZ-csDO-Tn3b23WkUDxeAkhiUxvGVl_seualFbNPVgOSCSrwdwgYsBS3nHRYWjAlA23TF9oHvAMQtEkNXRRscGqGX4PkQyF-VQeWjPV4pu775rVl3pW0crVx_MK818y3niAKDdk317-mO9uwDjOHbQEJ-z9CiU4LTFZ3q7AY9LJtoKoeMxFMQbR9WKq0XPhhFMtwjjRF1JKMSCRJfkDgK-MmtFedQ-EsJUDHuI5QtgyYT7OtqQ4IAsgx5YQNuyPGQ7oW1E4Bb-bJ6oo8M2JMPh5qAFn6zNMSqvvRR3xQBp7IGnCY8H2nTNyqmtIepVdjft8vCaeJcp8p9F5gvwsrS8m6tGZDcpEzUDwQdj8mUThAWl3CHKsISVGAGqw3CaPyQgB910HeHyDIbCiw7jVBUnnVjfk5IP485ma4ZSuxJdnYTothNKMGBBoqr1fJmQIcRQstaS3kPCRnzy0PsKvVygFTmJ1NnLUd82qL-djXqygcwToJZtRHK1T-anw7vsWavK-FUTw8N5lO_8iUWHW=w260-h193-no &quot;sample.jpg&quot;) HEXO内から 以下のように、同じ名前のフォルダを作り、その下に画像ファイルを置く 12345_post ----+--- sample.md | +--+ sample | +--- sample.jpg sample.md から以下のように呼び出す1&#123;% asset_img sample.jpg %&#125; また、_config.yml の次の値をtrueに書き換え（デフォルト値はfalse）することで hexo new したときに自動でファイルが作られる 1post_asset_folder: true コード・ブロック```を使うやり方script.js123function hello() &#123; console.log('Hello World!');&#125; ``` javascript script.jsfunction hello() { console.log(‘Hello World!’);}``` {% codeblock %}を使うやり方script.js123function hello() &#123; console.log('Hello World!');&#125; 12345&#123;% codeblock script.js lang:javascript %&#125;function hello() &#123; console.log(&apos;Hello World!&apos;);&#125;&#123;% endcodeblock %&#125; インライン・コードこれはインラインコードです。 1これは`インラインコード`です。 Block QuoteMarkDown での書き方 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. 1&gt; Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. {% blockquote %} での書き方Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. 123&#123;% blockquote %&#125;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.&#123;% endblockquote %&#125; 参考DARING FIREBALL | Markdown: SyntaxHEXO公式 | Tag Pluginsmarkdownの記法まとめ・hexoで記事を書く方法","raw":null,"content":null,"categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://keijirotanabe.github.io/blog/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://keijirotanabe.github.io/blog/tags/Hexo/"},{"name":"MarkDown","slug":"MarkDown","permalink":"https://keijirotanabe.github.io/blog/tags/MarkDown/"}]},{"title":"固定ページのつくり方（メモ）","slug":"固定ページのつくり方（メモ）","date":"2017-02-04T02:59:26.000Z","updated":"2017-02-16T06:37:11.938Z","comments":true,"path":"2017/02/04/固定ページのつくり方（メモ）/","link":"","permalink":"https://keijirotanabe.github.io/blog/blog/2017/02/04/固定ページのつくり方（メモ）/","excerpt":"","text":"Hexoで固定ページを作るメモ 1$ hexo new page index で、indexフォルダの下にindex.mdが作られる 12345source --+-- _posts | +-+ index | +--- index.md themes/[テーマ名]/_config.ymlを編集 _config.yml123456# Headermenu: ## If your site is put in a subdirectory, set Home as '/child/' Home: / Archives: archives index: index index: indexを追加","raw":null,"content":null,"categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://keijirotanabe.github.io/blog/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://keijirotanabe.github.io/blog/tags/Hexo/"},{"name":"メモ","slug":"メモ","permalink":"https://keijirotanabe.github.io/blog/tags/メモ/"}]}]}